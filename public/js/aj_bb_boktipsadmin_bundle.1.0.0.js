/**!
ANDREAS HANDLEBARS
 @license
 handlebars v4.0.10

Copyright (C) 2011-2016 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap ANDREAS HANDLEBARS
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsRuntime = __webpack_require__(2);

	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

	// Compiler imports

	var _handlebarsCompilerAst = __webpack_require__(35);

	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

	var _handlebarsCompilerBase = __webpack_require__(36);

	var _handlebarsCompilerCompiler = __webpack_require__(41);

	var _handlebarsCompilerJavascriptCompiler = __webpack_require__(42);

	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

	var _handlebarsCompilerVisitor = __webpack_require__(39);

	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	var _create = _handlebarsRuntime2['default'].create;
	function create() {
	  var hb = _create();

	  hb.compile = function (input, options) {
	    return _handlebarsCompilerCompiler.compile(input, options, hb);
	  };
	  hb.precompile = function (input, options) {
	    return _handlebarsCompilerCompiler.precompile(input, options, hb);
	  };

	  hb.AST = _handlebarsCompilerAst2['default'];
	  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
	  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
	  hb.Parser = _handlebarsCompilerBase.parser;
	  hb.parse = _handlebarsCompilerBase.parse;

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst.Visitor = _handlebarsCompilerVisitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(4);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(21);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(6);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(22);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(10);

	var _decorators = __webpack_require__(18);

	var _logger = __webpack_require__(20);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.10';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$defineProperty = __webpack_require__(7)['default'];

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (_Object$defineProperty) {
	        Object.defineProperty(this, 'column', {
	          value: column,
	          enumerable: true
	        });
	      } else {
	        this.column = column;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(8), __esModule: true };

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(9);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;

	var _helpersBlockHelperMissing = __webpack_require__(11);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(12);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(13);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(14);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(15);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(16);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(17);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(19);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$seal = __webpack_require__(23)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(4);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },
	    // An empty object to use as replacement for null-contexts
	    nullContext: _Object$seal({}),

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  // Use the current closure context to save the partial-block if this partial
	  var currentPartialBlock = options.data && options.data['partial-block'];
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    (function () {
	      options.data = _base.createFrame(options.data);
	      // Wrapper function to get access to currentPartialBlock from the closure
	      var fn = options.fn;
	      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        // Restore the partial-block from the closure for the execution of the block
	        // i.e. the part inside the block of the partial call.
	        options.data = _base.createFrame(options.data);
	        options.data['partial-block'] = currentPartialBlock;
	        return fn(context, options);
	      };
	      if (fn.partials) {
	        options.partials = Utils.extend({}, options.partials, fn.partials);
	      }
	    })();
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(24), __esModule: true };

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	module.exports = __webpack_require__(30).Object.seal;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(26);

	__webpack_require__(27)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(it) : it;
	  };
	});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(28)
	  , core    = __webpack_require__(30)
	  , fails   = __webpack_require__(33);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(29)
	  , core      = __webpack_require__(30)
	  , ctx       = __webpack_require__(31)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(32);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var AST = {
	  // Public API used to evaluate derived attributes regarding AST nodes
	  helpers: {
	    // a mustache is definitely a helper if:
	    // * it is an eligible helper, and
	    // * it has at least one parameter or hash segment
	    helperExpression: function helperExpression(node) {
	      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
	    },

	    scopedId: function scopedId(path) {
	      return (/^\.|this\b/.test(path.original)
	      );
	    },

	    // an ID is simple if it only has one part, and that part is not
	    // `..` or `this`.
	    simpleId: function simpleId(path) {
	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
	    }
	  }
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = __webpack_require__(37);

	var _parser2 = _interopRequireDefault(_parser);

	var _whitespaceControl = __webpack_require__(38);

	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

	var _helpers = __webpack_require__(40);

	var Helpers = _interopRequireWildcard(_helpers);

	var _utils = __webpack_require__(5);

	exports.parser = _parser2['default'];

	var yy = {};
	_utils.extend(yy, Helpers);

	function parse(input, options) {
	  // Just return if an already-compiled AST was passed in.
	  if (input.type === 'Program') {
	    return input;
	  }

	  _parser2['default'].yy = yy;

	  // Altering the shared object here, but this is ok as parser is a sync operation
	  yy.locInfo = function (locInfo) {
	    return new yy.SourceLocation(options && options.srcName, locInfo);
	  };

	  var strip = new _whitespaceControl2['default'](options);
	  return strip.accept(_parser2['default'].parse(input));
	}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	// File ignored in coverage tests via setting in .istanbul.yml
	/* Jison generated parser */
	"use strict";

	exports.__esModule = true;
	var handlebars = (function () {
	    var parser = { trace: function trace() {},
	        yy: {},
	        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
	        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
	        /**/) {

	            var $0 = $$.length - 1;
	            switch (yystate) {
	                case 1:
	                    return $$[$0 - 1];
	                    break;
	                case 2:
	                    this.$ = yy.prepareProgram($$[$0]);
	                    break;
	                case 3:
	                    this.$ = $$[$0];
	                    break;
	                case 4:
	                    this.$ = $$[$0];
	                    break;
	                case 5:
	                    this.$ = $$[$0];
	                    break;
	                case 6:
	                    this.$ = $$[$0];
	                    break;
	                case 7:
	                    this.$ = $$[$0];
	                    break;
	                case 8:
	                    this.$ = $$[$0];
	                    break;
	                case 9:
	                    this.$ = {
	                        type: 'CommentStatement',
	                        value: yy.stripComment($$[$0]),
	                        strip: yy.stripFlags($$[$0], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 10:
	                    this.$ = {
	                        type: 'ContentStatement',
	                        original: $$[$0],
	                        value: $$[$0],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 11:
	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 12:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
	                    break;
	                case 13:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
	                    break;
	                case 14:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
	                    break;
	                case 15:
	                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 16:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 17:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 18:
	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
	                    break;
	                case 19:
	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
	                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
	                    program.chained = true;

	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

	                    break;
	                case 20:
	                    this.$ = $$[$0];
	                    break;
	                case 21:
	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
	                    break;
	                case 22:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 23:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 24:
	                    this.$ = {
	                        type: 'PartialStatement',
	                        name: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        indent: '',
	                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 25:
	                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 26:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
	                    break;
	                case 27:
	                    this.$ = $$[$0];
	                    break;
	                case 28:
	                    this.$ = $$[$0];
	                    break;
	                case 29:
	                    this.$ = {
	                        type: 'SubExpression',
	                        path: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 30:
	                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 31:
	                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 32:
	                    this.$ = yy.id($$[$0 - 1]);
	                    break;
	                case 33:
	                    this.$ = $$[$0];
	                    break;
	                case 34:
	                    this.$ = $$[$0];
	                    break;
	                case 35:
	                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 36:
	                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
	                    break;
	                case 37:
	                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
	                    break;
	                case 38:
	                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
	                    break;
	                case 39:
	                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
	                    break;
	                case 40:
	                    this.$ = $$[$0];
	                    break;
	                case 41:
	                    this.$ = $$[$0];
	                    break;
	                case 42:
	                    this.$ = yy.preparePath(true, $$[$0], this._$);
	                    break;
	                case 43:
	                    this.$ = yy.preparePath(false, $$[$0], this._$);
	                    break;
	                case 44:
	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
	                    break;
	                case 45:
	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
	                    break;
	                case 46:
	                    this.$ = [];
	                    break;
	                case 47:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 48:
	                    this.$ = [$$[$0]];
	                    break;
	                case 49:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 50:
	                    this.$ = [];
	                    break;
	                case 51:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 58:
	                    this.$ = [];
	                    break;
	                case 59:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 64:
	                    this.$ = [];
	                    break;
	                case 65:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 70:
	                    this.$ = [];
	                    break;
	                case 71:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 78:
	                    this.$ = [];
	                    break;
	                case 79:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 82:
	                    this.$ = [];
	                    break;
	                case 83:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 86:
	                    this.$ = [];
	                    break;
	                case 87:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 90:
	                    this.$ = [];
	                    break;
	                case 91:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 94:
	                    this.$ = [];
	                    break;
	                case 95:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 98:
	                    this.$ = [$$[$0]];
	                    break;
	                case 99:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 100:
	                    this.$ = [$$[$0]];
	                    break;
	                case 101:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	            }
	        },
	        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
	        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
	        parseError: function parseError(str, hash) {
	            throw new Error(str);
	        },
	        parse: function parse(input) {
	            var self = this,
	                stack = [0],
	                vstack = [null],
	                lstack = [],
	                table = this.table,
	                yytext = "",
	                yylineno = 0,
	                yyleng = 0,
	                recovering = 0,
	                TERROR = 2,
	                EOF = 1;
	            this.lexer.setInput(input);
	            this.lexer.yy = this.yy;
	            this.yy.lexer = this.lexer;
	            this.yy.parser = this;
	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
	            var yyloc = this.lexer.yylloc;
	            lstack.push(yyloc);
	            var ranges = this.lexer.options && this.lexer.options.ranges;
	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
	            function popStack(n) {
	                stack.length = stack.length - 2 * n;
	                vstack.length = vstack.length - n;
	                lstack.length = lstack.length - n;
	            }
	            function lex() {
	                var token;
	                token = self.lexer.lex() || 1;
	                if (typeof token !== "number") {
	                    token = self.symbols_[token] || token;
	                }
	                return token;
	            }
	            var symbol,
	                preErrorSymbol,
	                state,
	                action,
	                a,
	                r,
	                yyval = {},
	                p,
	                len,
	                newState,
	                expected;
	            while (true) {
	                state = stack[stack.length - 1];
	                if (this.defaultActions[state]) {
	                    action = this.defaultActions[state];
	                } else {
	                    if (symbol === null || typeof symbol == "undefined") {
	                        symbol = lex();
	                    }
	                    action = table[state] && table[state][symbol];
	                }
	                if (typeof action === "undefined" || !action.length || !action[0]) {
	                    var errStr = "";
	                    if (!recovering) {
	                        expected = [];
	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
	                            expected.push("'" + this.terminals_[p] + "'");
	                        }
	                        if (this.lexer.showPosition) {
	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                        } else {
	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
	                        }
	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
	                    }
	                }
	                if (action[0] instanceof Array && action.length > 1) {
	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	                }
	                switch (action[0]) {
	                    case 1:
	                        stack.push(symbol);
	                        vstack.push(this.lexer.yytext);
	                        lstack.push(this.lexer.yylloc);
	                        stack.push(action[1]);
	                        symbol = null;
	                        if (!preErrorSymbol) {
	                            yyleng = this.lexer.yyleng;
	                            yytext = this.lexer.yytext;
	                            yylineno = this.lexer.yylineno;
	                            yyloc = this.lexer.yylloc;
	                            if (recovering > 0) recovering--;
	                        } else {
	                            symbol = preErrorSymbol;
	                            preErrorSymbol = null;
	                        }
	                        break;
	                    case 2:
	                        len = this.productions_[action[1]][1];
	                        yyval.$ = vstack[vstack.length - len];
	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
	                        if (ranges) {
	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	                        }
	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	                        if (typeof r !== "undefined") {
	                            return r;
	                        }
	                        if (len) {
	                            stack = stack.slice(0, -1 * len * 2);
	                            vstack = vstack.slice(0, -1 * len);
	                            lstack = lstack.slice(0, -1 * len);
	                        }
	                        stack.push(this.productions_[action[1]][0]);
	                        vstack.push(yyval.$);
	                        lstack.push(yyval._$);
	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	                        stack.push(newState);
	                        break;
	                    case 3:
	                        return true;
	                }
	            }
	            return true;
	        }
	    };
	    /* Jison generated lexer */
	    var lexer = (function () {
	        var lexer = { EOF: 1,
	            parseError: function parseError(str, hash) {
	                if (this.yy.parser) {
	                    this.yy.parser.parseError(str, hash);
	                } else {
	                    throw new Error(str);
	                }
	            },
	            setInput: function setInput(input) {
	                this._input = input;
	                this._more = this._less = this.done = false;
	                this.yylineno = this.yyleng = 0;
	                this.yytext = this.matched = this.match = '';
	                this.conditionStack = ['INITIAL'];
	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
	                if (this.options.ranges) this.yylloc.range = [0, 0];
	                this.offset = 0;
	                return this;
	            },
	            input: function input() {
	                var ch = this._input[0];
	                this.yytext += ch;
	                this.yyleng++;
	                this.offset++;
	                this.match += ch;
	                this.matched += ch;
	                var lines = ch.match(/(?:\r\n?|\n).*/g);
	                if (lines) {
	                    this.yylineno++;
	                    this.yylloc.last_line++;
	                } else {
	                    this.yylloc.last_column++;
	                }
	                if (this.options.ranges) this.yylloc.range[1]++;

	                this._input = this._input.slice(1);
	                return ch;
	            },
	            unput: function unput(ch) {
	                var len = ch.length;
	                var lines = ch.split(/(?:\r\n?|\n)/g);

	                this._input = ch + this._input;
	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
	                //this.yyleng -= len;
	                this.offset -= len;
	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	                this.match = this.match.substr(0, this.match.length - 1);
	                this.matched = this.matched.substr(0, this.matched.length - 1);

	                if (lines.length - 1) this.yylineno -= lines.length - 1;
	                var r = this.yylloc.range;

	                this.yylloc = { first_line: this.yylloc.first_line,
	                    last_line: this.yylineno + 1,
	                    first_column: this.yylloc.first_column,
	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
	                };

	                if (this.options.ranges) {
	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	                }
	                return this;
	            },
	            more: function more() {
	                this._more = true;
	                return this;
	            },
	            less: function less(n) {
	                this.unput(this.match.slice(n));
	            },
	            pastInput: function pastInput() {
	                var past = this.matched.substr(0, this.matched.length - this.match.length);
	                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
	            },
	            upcomingInput: function upcomingInput() {
	                var next = this.match;
	                if (next.length < 20) {
	                    next += this._input.substr(0, 20 - next.length);
	                }
	                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	            },
	            showPosition: function showPosition() {
	                var pre = this.pastInput();
	                var c = new Array(pre.length + 1).join("-");
	                return pre + this.upcomingInput() + "\n" + c + "^";
	            },
	            next: function next() {
	                if (this.done) {
	                    return this.EOF;
	                }
	                if (!this._input) this.done = true;

	                var token, match, tempMatch, index, col, lines;
	                if (!this._more) {
	                    this.yytext = '';
	                    this.match = '';
	                }
	                var rules = this._currentRules();
	                for (var i = 0; i < rules.length; i++) {
	                    tempMatch = this._input.match(this.rules[rules[i]]);
	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                        match = tempMatch;
	                        index = i;
	                        if (!this.options.flex) break;
	                    }
	                }
	                if (match) {
	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
	                    if (lines) this.yylineno += lines.length;
	                    this.yylloc = { first_line: this.yylloc.last_line,
	                        last_line: this.yylineno + 1,
	                        first_column: this.yylloc.last_column,
	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
	                    this.yytext += match[0];
	                    this.match += match[0];
	                    this.matches = match;
	                    this.yyleng = this.yytext.length;
	                    if (this.options.ranges) {
	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
	                    }
	                    this._more = false;
	                    this._input = this._input.slice(match[0].length);
	                    this.matched += match[0];
	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
	                    if (this.done && this._input) this.done = false;
	                    if (token) return token;else return;
	                }
	                if (this._input === "") {
	                    return this.EOF;
	                } else {
	                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
	                }
	            },
	            lex: function lex() {
	                var r = this.next();
	                if (typeof r !== 'undefined') {
	                    return r;
	                } else {
	                    return this.lex();
	                }
	            },
	            begin: function begin(condition) {
	                this.conditionStack.push(condition);
	            },
	            popState: function popState() {
	                return this.conditionStack.pop();
	            },
	            _currentRules: function _currentRules() {
	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	            },
	            topState: function topState() {
	                return this.conditionStack[this.conditionStack.length - 2];
	            },
	            pushState: function begin(condition) {
	                this.begin(condition);
	            } };
	        lexer.options = {};
	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
	        /**/) {

	            function strip(start, end) {
	                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
	            }

	            var YYSTATE = YY_START;
	            switch ($avoiding_name_collisions) {
	                case 0:
	                    if (yy_.yytext.slice(-2) === "\\\\") {
	                        strip(0, 1);
	                        this.begin("mu");
	                    } else if (yy_.yytext.slice(-1) === "\\") {
	                        strip(0, 1);
	                        this.begin("emu");
	                    } else {
	                        this.begin("mu");
	                    }
	                    if (yy_.yytext) return 15;

	                    break;
	                case 1:
	                    return 15;
	                    break;
	                case 2:
	                    this.popState();
	                    return 15;

	                    break;
	                case 3:
	                    this.begin('raw');return 15;
	                    break;
	                case 4:
	                    this.popState();
	                    // Should be using `this.topState()` below, but it currently
	                    // returns the second top instead of the first top. Opened an
	                    // issue about it at https://github.com/zaach/jison/issues/291
	                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
	                        return 15;
	                    } else {
	                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
	                        return 'END_RAW_BLOCK';
	                    }

	                    break;
	                case 5:
	                    return 15;
	                    break;
	                case 6:
	                    this.popState();
	                    return 14;

	                    break;
	                case 7:
	                    return 65;
	                    break;
	                case 8:
	                    return 68;
	                    break;
	                case 9:
	                    return 19;
	                    break;
	                case 10:
	                    this.popState();
	                    this.begin('raw');
	                    return 23;

	                    break;
	                case 11:
	                    return 55;
	                    break;
	                case 12:
	                    return 60;
	                    break;
	                case 13:
	                    return 29;
	                    break;
	                case 14:
	                    return 47;
	                    break;
	                case 15:
	                    this.popState();return 44;
	                    break;
	                case 16:
	                    this.popState();return 44;
	                    break;
	                case 17:
	                    return 34;
	                    break;
	                case 18:
	                    return 39;
	                    break;
	                case 19:
	                    return 51;
	                    break;
	                case 20:
	                    return 48;
	                    break;
	                case 21:
	                    this.unput(yy_.yytext);
	                    this.popState();
	                    this.begin('com');

	                    break;
	                case 22:
	                    this.popState();
	                    return 14;

	                    break;
	                case 23:
	                    return 48;
	                    break;
	                case 24:
	                    return 73;
	                    break;
	                case 25:
	                    return 72;
	                    break;
	                case 26:
	                    return 72;
	                    break;
	                case 27:
	                    return 87;
	                    break;
	                case 28:
	                    // ignore whitespace
	                    break;
	                case 29:
	                    this.popState();return 54;
	                    break;
	                case 30:
	                    this.popState();return 33;
	                    break;
	                case 31:
	                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
	                    break;
	                case 32:
	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
	                    break;
	                case 33:
	                    return 85;
	                    break;
	                case 34:
	                    return 82;
	                    break;
	                case 35:
	                    return 82;
	                    break;
	                case 36:
	                    return 83;
	                    break;
	                case 37:
	                    return 84;
	                    break;
	                case 38:
	                    return 81;
	                    break;
	                case 39:
	                    return 75;
	                    break;
	                case 40:
	                    return 77;
	                    break;
	                case 41:
	                    return 72;
	                    break;
	                case 42:
	                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
	                    break;
	                case 43:
	                    return 'INVALID';
	                    break;
	                case 44:
	                    return 5;
	                    break;
	            }
	        };
	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
	        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
	        return lexer;
	    })();
	    parser.lexer = lexer;
	    function Parser() {
	        this.yy = {};
	    }Parser.prototype = parser;parser.Parser = Parser;
	    return new Parser();
	})();exports["default"] = handlebars;
	module.exports = exports["default"];

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _visitor = __webpack_require__(39);

	var _visitor2 = _interopRequireDefault(_visitor);

	function WhitespaceControl() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
	  var doStandalone = !this.options.ignoreStandalone;

	  var isRoot = !this.isRootSeen;
	  this.isRootSeen = true;

	  var body = program.body;
	  for (var i = 0, l = body.length; i < l; i++) {
	    var current = body[i],
	        strip = this.accept(current);

	    if (!strip) {
	      continue;
	    }

	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
	        openStandalone = strip.openStandalone && _isPrevWhitespace,
	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

	    if (strip.close) {
	      omitRight(body, i, true);
	    }
	    if (strip.open) {
	      omitLeft(body, i, true);
	    }

	    if (doStandalone && inlineStandalone) {
	      omitRight(body, i);

	      if (omitLeft(body, i)) {
	        // If we are on a standalone node, save the indent info for partials
	        if (current.type === 'PartialStatement') {
	          // Pull out the whitespace from the final line
	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
	        }
	      }
	    }
	    if (doStandalone && openStandalone) {
	      omitRight((current.program || current.inverse).body);

	      // Strip out the previous content node if it's whitespace only
	      omitLeft(body, i);
	    }
	    if (doStandalone && closeStandalone) {
	      // Always strip the next node
	      omitRight(body, i);

	      omitLeft((current.inverse || current.program).body);
	    }
	  }

	  return program;
	};

	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
	  this.accept(block.program);
	  this.accept(block.inverse);

	  // Find the inverse program that is involed with whitespace stripping.
	  var program = block.program || block.inverse,
	      inverse = block.program && block.inverse,
	      firstInverse = inverse,
	      lastInverse = inverse;

	  if (inverse && inverse.chained) {
	    firstInverse = inverse.body[0].program;

	    // Walk the inverse chain to find the last inverse that is actually in the chain.
	    while (lastInverse.chained) {
	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
	    }
	  }

	  var strip = {
	    open: block.openStrip.open,
	    close: block.closeStrip.close,

	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
	    // so our parent can determine if we actually are standalone
	    openStandalone: isNextWhitespace(program.body),
	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
	  };

	  if (block.openStrip.close) {
	    omitRight(program.body, null, true);
	  }

	  if (inverse) {
	    var inverseStrip = block.inverseStrip;

	    if (inverseStrip.open) {
	      omitLeft(program.body, null, true);
	    }

	    if (inverseStrip.close) {
	      omitRight(firstInverse.body, null, true);
	    }
	    if (block.closeStrip.open) {
	      omitLeft(lastInverse.body, null, true);
	    }

	    // Find standalone else statments
	    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
	      omitLeft(program.body);
	      omitRight(firstInverse.body);
	    }
	  } else if (block.closeStrip.open) {
	    omitLeft(program.body, null, true);
	  }

	  return strip;
	};

	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
	  return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
	  /* istanbul ignore next */
	  var strip = node.strip || {};
	  return {
	    inlineStandalone: true,
	    open: strip.open,
	    close: strip.close
	  };
	};

	function isPrevWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = body.length;
	  }

	  // Nodes that end with newlines are considered whitespace (but are special
	  // cased for strip operations)
	  var prev = body[i - 1],
	      sibling = body[i - 2];
	  if (!prev) {
	    return isRoot;
	  }

	  if (prev.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	  }
	}
	function isNextWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = -1;
	  }

	  var next = body[i + 1],
	      sibling = body[i + 2];
	  if (!next) {
	    return isRoot;
	  }

	  if (next.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	  }
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
	  var current = body[i == null ? 0 : i + 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
	    return;
	  }

	  var original = current.value;
	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
	  current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
	  var current = body[i == null ? body.length - 1 : i - 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
	    return;
	  }

	  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
	  var original = current.value;
	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
	  current.leftStripped = current.value !== original;
	  return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function Visitor() {
	  this.parents = [];
	}

	Visitor.prototype = {
	  constructor: Visitor,
	  mutating: false,

	  // Visits a given value. If mutating, will replace the value if necessary.
	  acceptKey: function acceptKey(node, name) {
	    var value = this.accept(node[name]);
	    if (this.mutating) {
	      // Hacky sanity check: This may have a few false positives for type for the helper
	      // methods but will generally do the right thing without a lot of overhead.
	      if (value && !Visitor.prototype[value.type]) {
	        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
	      }
	      node[name] = value;
	    }
	  },

	  // Performs an accept operation with added sanity check to ensure
	  // required keys are not removed.
	  acceptRequired: function acceptRequired(node, name) {
	    this.acceptKey(node, name);

	    if (!node[name]) {
	      throw new _exception2['default'](node.type + ' requires ' + name);
	    }
	  },

	  // Traverses a given array. If mutating, empty respnses will be removed
	  // for child elements.
	  acceptArray: function acceptArray(array) {
	    for (var i = 0, l = array.length; i < l; i++) {
	      this.acceptKey(array, i);

	      if (!array[i]) {
	        array.splice(i, 1);
	        i--;
	        l--;
	      }
	    }
	  },

	  accept: function accept(object) {
	    if (!object) {
	      return;
	    }

	    /* istanbul ignore next: Sanity code */
	    if (!this[object.type]) {
	      throw new _exception2['default']('Unknown type: ' + object.type, object);
	    }

	    if (this.current) {
	      this.parents.unshift(this.current);
	    }
	    this.current = object;

	    var ret = this[object.type](object);

	    this.current = this.parents.shift();

	    if (!this.mutating || ret) {
	      return ret;
	    } else if (ret !== false) {
	      return object;
	    }
	  },

	  Program: function Program(program) {
	    this.acceptArray(program.body);
	  },

	  MustacheStatement: visitSubExpression,
	  Decorator: visitSubExpression,

	  BlockStatement: visitBlock,
	  DecoratorBlock: visitBlock,

	  PartialStatement: visitPartial,
	  PartialBlockStatement: function PartialBlockStatement(partial) {
	    visitPartial.call(this, partial);

	    this.acceptKey(partial, 'program');
	  },

	  ContentStatement: function ContentStatement() /* content */{},
	  CommentStatement: function CommentStatement() /* comment */{},

	  SubExpression: visitSubExpression,

	  PathExpression: function PathExpression() /* path */{},

	  StringLiteral: function StringLiteral() /* string */{},
	  NumberLiteral: function NumberLiteral() /* number */{},
	  BooleanLiteral: function BooleanLiteral() /* bool */{},
	  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
	  NullLiteral: function NullLiteral() /* literal */{},

	  Hash: function Hash(hash) {
	    this.acceptArray(hash.pairs);
	  },
	  HashPair: function HashPair(pair) {
	    this.acceptRequired(pair, 'value');
	  }
	};

	function visitSubExpression(mustache) {
	  this.acceptRequired(mustache, 'path');
	  this.acceptArray(mustache.params);
	  this.acceptKey(mustache, 'hash');
	}
	function visitBlock(block) {
	  visitSubExpression.call(this, block);

	  this.acceptKey(block, 'program');
	  this.acceptKey(block, 'inverse');
	}
	function visitPartial(partial) {
	  this.acceptRequired(partial, 'name');
	  this.acceptArray(partial.params);
	  this.acceptKey(partial, 'hash');
	}

	exports['default'] = Visitor;
	module.exports = exports['default'];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function validateClose(open, close) {
	  close = close.path ? close.path.original : close;

	  if (open.path.original !== close) {
	    var errorNode = { loc: open.path.loc };

	    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
	  }
	}

	function SourceLocation(source, locInfo) {
	  this.source = source;
	  this.start = {
	    line: locInfo.first_line,
	    column: locInfo.first_column
	  };
	  this.end = {
	    line: locInfo.last_line,
	    column: locInfo.last_column
	  };
	}

	function id(token) {
	  if (/^\[.*\]$/.test(token)) {
	    return token.substr(1, token.length - 2);
	  } else {
	    return token;
	  }
	}

	function stripFlags(open, close) {
	  return {
	    open: open.charAt(2) === '~',
	    close: close.charAt(close.length - 3) === '~'
	  };
	}

	function stripComment(comment) {
	  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, loc) {
	  loc = this.locInfo(loc);

	  var original = data ? '@' : '',
	      dig = [],
	      depth = 0,
	      depthString = '';

	  for (var i = 0, l = parts.length; i < l; i++) {
	    var part = parts[i].part,

	    // If we have [] syntax then we do not treat path references as operators,
	    // i.e. foo.[this] resolves to approximately context.foo['this']
	    isLiteral = parts[i].original !== part;
	    original += (parts[i].separator || '') + part;

	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
	      if (dig.length > 0) {
	        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
	      } else if (part === '..') {
	        depth++;
	        depthString += '../';
	      }
	    } else {
	      dig.push(part);
	    }
	  }

	  return {
	    type: 'PathExpression',
	    data: data,
	    depth: depth,
	    parts: dig,
	    original: original,
	    loc: loc
	  };
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
	  // Must use charAt to support IE pre-10
	  var escapeFlag = open.charAt(3) || open.charAt(2),
	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

	  var decorator = /\*/.test(open);
	  return {
	    type: decorator ? 'Decorator' : 'MustacheStatement',
	    path: path,
	    params: params,
	    hash: hash,
	    escaped: escaped,
	    strip: strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
	  validateClose(openRawBlock, close);

	  locInfo = this.locInfo(locInfo);
	  var program = {
	    type: 'Program',
	    body: contents,
	    strip: {},
	    loc: locInfo
	  };

	  return {
	    type: 'BlockStatement',
	    path: openRawBlock.path,
	    params: openRawBlock.params,
	    hash: openRawBlock.hash,
	    program: program,
	    openStrip: {},
	    inverseStrip: {},
	    closeStrip: {},
	    loc: locInfo
	  };
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
	  if (close && close.path) {
	    validateClose(openBlock, close);
	  }

	  var decorator = /\*/.test(openBlock.open);

	  program.blockParams = openBlock.blockParams;

	  var inverse = undefined,
	      inverseStrip = undefined;

	  if (inverseAndProgram) {
	    if (decorator) {
	      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
	    }

	    if (inverseAndProgram.chain) {
	      inverseAndProgram.program.body[0].closeStrip = close.strip;
	    }

	    inverseStrip = inverseAndProgram.strip;
	    inverse = inverseAndProgram.program;
	  }

	  if (inverted) {
	    inverted = inverse;
	    inverse = program;
	    program = inverted;
	  }

	  return {
	    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
	    path: openBlock.path,
	    params: openBlock.params,
	    hash: openBlock.hash,
	    program: program,
	    inverse: inverse,
	    openStrip: openBlock.strip,
	    inverseStrip: inverseStrip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareProgram(statements, loc) {
	  if (!loc && statements.length) {
	    var firstLoc = statements[0].loc,
	        lastLoc = statements[statements.length - 1].loc;

	    /* istanbul ignore else */
	    if (firstLoc && lastLoc) {
	      loc = {
	        source: firstLoc.source,
	        start: {
	          line: firstLoc.start.line,
	          column: firstLoc.start.column
	        },
	        end: {
	          line: lastLoc.end.line,
	          column: lastLoc.end.column
	        }
	      };
	    }
	  }

	  return {
	    type: 'Program',
	    body: statements,
	    strip: {},
	    loc: loc
	  };
	}

	function preparePartialBlock(open, program, close, locInfo) {
	  validateClose(open, close);

	  return {
	    type: 'PartialBlockStatement',
	    name: open.path,
	    params: open.params,
	    hash: open.hash,
	    program: program,
	    openStrip: open.strip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable new-cap */

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _ast = __webpack_require__(35);

	var _ast2 = _interopRequireDefault(_ast);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
	  compiler: Compiler,

	  equals: function equals(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }

	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
	        return false;
	      }
	    }

	    // We know that length is the same between the two arrays because they are directly tied
	    // to the opcode behavior above.
	    len = this.children.length;
	    for (var i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }

	    return true;
	  },

	  guid: 0,

	  compile: function compile(program, options) {
	    this.sourceNode = [];
	    this.opcodes = [];
	    this.children = [];
	    this.options = options;
	    this.stringParams = options.stringParams;
	    this.trackIds = options.trackIds;

	    options.blockParams = options.blockParams || [];

	    // These changes will propagate to the other compiler components
	    var knownHelpers = options.knownHelpers;
	    options.knownHelpers = {
	      'helperMissing': true,
	      'blockHelperMissing': true,
	      'each': true,
	      'if': true,
	      'unless': true,
	      'with': true,
	      'log': true,
	      'lookup': true
	    };
	    if (knownHelpers) {
	      for (var _name in knownHelpers) {
	        /* istanbul ignore else */
	        if (_name in knownHelpers) {
	          this.options.knownHelpers[_name] = knownHelpers[_name];
	        }
	      }
	    }

	    return this.accept(program);
	  },

	  compileProgram: function compileProgram(program) {
	    var childCompiler = new this.compiler(),
	        // eslint-disable-line new-cap
	    result = childCompiler.compile(program, this.options),
	        guid = this.guid++;

	    this.usePartial = this.usePartial || result.usePartial;

	    this.children[guid] = result;
	    this.useDepths = this.useDepths || result.useDepths;

	    return guid;
	  },

	  accept: function accept(node) {
	    /* istanbul ignore next: Sanity code */
	    if (!this[node.type]) {
	      throw new _exception2['default']('Unknown type: ' + node.type, node);
	    }

	    this.sourceNode.unshift(node);
	    var ret = this[node.type](node);
	    this.sourceNode.shift();
	    return ret;
	  },

	  Program: function Program(program) {
	    this.options.blockParams.unshift(program.blockParams);

	    var body = program.body,
	        bodyLength = body.length;
	    for (var i = 0; i < bodyLength; i++) {
	      this.accept(body[i]);
	    }

	    this.options.blockParams.shift();

	    this.isSimple = bodyLength === 1;
	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

	    return this;
	  },

	  BlockStatement: function BlockStatement(block) {
	    transformLiteralToPath(block);

	    var program = block.program,
	        inverse = block.inverse;

	    program = program && this.compileProgram(program);
	    inverse = inverse && this.compileProgram(inverse);

	    var type = this.classifySexpr(block);

	    if (type === 'helper') {
	      this.helperSexpr(block, program, inverse);
	    } else if (type === 'simple') {
	      this.simpleSexpr(block);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue', block.path.original);
	    } else {
	      this.ambiguousSexpr(block, program, inverse);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }

	    this.opcode('append');
	  },

	  DecoratorBlock: function DecoratorBlock(decorator) {
	    var program = decorator.program && this.compileProgram(decorator.program);
	    var params = this.setupFullMustacheParams(decorator, program, undefined),
	        path = decorator.path;

	    this.useDecorators = true;
	    this.opcode('registerDecorator', params.length, path.original);
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.usePartial = true;

	    var program = partial.program;
	    if (program) {
	      program = this.compileProgram(partial.program);
	    }

	    var params = partial.params;
	    if (params.length > 1) {
	      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
	    } else if (!params.length) {
	      if (this.options.explicitPartialContext) {
	        this.opcode('pushLiteral', 'undefined');
	      } else {
	        params.push({ type: 'PathExpression', parts: [], depth: 0 });
	      }
	    }

	    var partialName = partial.name.original,
	        isDynamic = partial.name.type === 'SubExpression';
	    if (isDynamic) {
	      this.accept(partial.name);
	    }

	    this.setupFullMustacheParams(partial, program, undefined, true);

	    var indent = partial.indent || '';
	    if (this.options.preventIndent && indent) {
	      this.opcode('appendContent', indent);
	      indent = '';
	    }

	    this.opcode('invokePartial', isDynamic, partialName, indent);
	    this.opcode('append');
	  },
	  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
	    this.PartialStatement(partialBlock);
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.SubExpression(mustache);

	    if (mustache.escaped && !this.options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },
	  Decorator: function Decorator(decorator) {
	    this.DecoratorBlock(decorator);
	  },

	  ContentStatement: function ContentStatement(content) {
	    if (content.value) {
	      this.opcode('appendContent', content.value);
	    }
	  },

	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    transformLiteralToPath(sexpr);
	    var type = this.classifySexpr(sexpr);

	    if (type === 'simple') {
	      this.simpleSexpr(sexpr);
	    } else if (type === 'helper') {
	      this.helperSexpr(sexpr);
	    } else {
	      this.ambiguousSexpr(sexpr);
	    }
	  },
	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
	    var path = sexpr.path,
	        name = path.parts[0],
	        isBlock = program != null || inverse != null;

	    this.opcode('getContext', path.depth);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    path.strict = true;
	    this.accept(path);

	    this.opcode('invokeAmbiguous', name, isBlock);
	  },

	  simpleSexpr: function simpleSexpr(sexpr) {
	    var path = sexpr.path;
	    path.strict = true;
	    this.accept(path);
	    this.opcode('resolvePossibleLambda');
	  },

	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
	        path = sexpr.path,
	        name = path.parts[0];

	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
	    } else {
	      path.strict = true;
	      path.falsy = true;

	      this.accept(path);
	      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
	    }
	  },

	  PathExpression: function PathExpression(path) {
	    this.addDepth(path.depth);
	    this.opcode('getContext', path.depth);

	    var name = path.parts[0],
	        scoped = _ast2['default'].helpers.scopedId(path),
	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

	    if (blockParamId) {
	      this.opcode('lookupBlockParam', blockParamId, path.parts);
	    } else if (!name) {
	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
	      this.opcode('pushContext');
	    } else if (path.data) {
	      this.options.data = true;
	      this.opcode('lookupData', path.depth, path.parts, path.strict);
	    } else {
	      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
	    }
	  },

	  StringLiteral: function StringLiteral(string) {
	    this.opcode('pushString', string.value);
	  },

	  NumberLiteral: function NumberLiteral(number) {
	    this.opcode('pushLiteral', number.value);
	  },

	  BooleanLiteral: function BooleanLiteral(bool) {
	    this.opcode('pushLiteral', bool.value);
	  },

	  UndefinedLiteral: function UndefinedLiteral() {
	    this.opcode('pushLiteral', 'undefined');
	  },

	  NullLiteral: function NullLiteral() {
	    this.opcode('pushLiteral', 'null');
	  },

	  Hash: function Hash(hash) {
	    var pairs = hash.pairs,
	        i = 0,
	        l = pairs.length;

	    this.opcode('pushHash');

	    for (; i < l; i++) {
	      this.pushParam(pairs[i].value);
	    }
	    while (i--) {
	      this.opcode('assignToHash', pairs[i].key);
	    }
	    this.opcode('popHash');
	  },

	  // HELPERS
	  opcode: function opcode(name) {
	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
	  },

	  addDepth: function addDepth(depth) {
	    if (!depth) {
	      return;
	    }

	    this.useDepths = true;
	  },

	  classifySexpr: function classifySexpr(sexpr) {
	    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

	    // a mustache is an eligible helper if:
	    // * its id is simple (a single part, not `this` or `..`)
	    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

	    // if a mustache is an eligible helper but not a definite
	    // helper, it is ambiguous, and will be resolved in a later
	    // pass or at runtime.
	    var isEligible = !isBlockParam && (isHelper || isSimple);

	    // if ambiguous, we can possibly resolve the ambiguity now
	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
	    if (isEligible && !isHelper) {
	      var _name2 = sexpr.path.parts[0],
	          options = this.options;

	      if (options.knownHelpers[_name2]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }

	    if (isHelper) {
	      return 'helper';
	    } else if (isEligible) {
	      return 'ambiguous';
	    } else {
	      return 'simple';
	    }
	  },

	  pushParams: function pushParams(params) {
	    for (var i = 0, l = params.length; i < l; i++) {
	      this.pushParam(params[i]);
	    }
	  },

	  pushParam: function pushParam(val) {
	    var value = val.value != null ? val.value : val.original || '';

	    if (this.stringParams) {
	      if (value.replace) {
	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
	      }

	      if (val.depth) {
	        this.addDepth(val.depth);
	      }
	      this.opcode('getContext', val.depth || 0);
	      this.opcode('pushStringParam', value, val.type);

	      if (val.type === 'SubExpression') {
	        // SubExpressions get evaluated and passed in
	        // in string params mode.
	        this.accept(val);
	      }
	    } else {
	      if (this.trackIds) {
	        var blockParamIndex = undefined;
	        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
	          blockParamIndex = this.blockParamIndex(val.parts[0]);
	        }
	        if (blockParamIndex) {
	          var blockParamChild = val.parts.slice(1).join('.');
	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
	        } else {
	          value = val.original || value;
	          if (value.replace) {
	            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
	          }

	          this.opcode('pushId', val.type, value);
	        }
	      }
	      this.accept(val);
	    }
	  },

	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
	    var params = sexpr.params;
	    this.pushParams(params);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    if (sexpr.hash) {
	      this.accept(sexpr.hash);
	    } else {
	      this.opcode('emptyHash', omitEmpty);
	    }

	    return params;
	  },

	  blockParamIndex: function blockParamIndex(name) {
	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
	      var blockParams = this.options.blockParams[depth],
	          param = blockParams && _utils.indexOf(blockParams, name);
	      if (blockParams && param >= 0) {
	        return [depth, param];
	      }
	    }
	  }
	};

	function precompile(input, options, env) {
	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
	  }

	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var ast = env.parse(input, options),
	      environment = new env.Compiler().compile(ast, options);
	  return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, options, env) {
	  if (options === undefined) options = {};

	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
	  }

	  options = _utils.extend({}, options);
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var compiled = undefined;

	  function compileInput() {
	    var ast = env.parse(input, options),
	        environment = new env.Compiler().compile(ast, options),
	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
	    return env.template(templateSpec);
	  }

	  // Template is only compiled on first use and cached after that point.
	  function ret(context, execOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled.call(this, context, execOptions);
	  }
	  ret._setup = function (setupOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._setup(setupOptions);
	  };
	  ret._child = function (i, data, blockParams, depths) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._child(i, data, blockParams, depths);
	  };
	  return ret;
	}

	function argEquals(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
	    for (var i = 0; i < a.length; i++) {
	      if (!argEquals(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	function transformLiteralToPath(sexpr) {
	  if (!sexpr.path.parts) {
	    var literal = sexpr.path;
	    // Casting to string here to make false and 0 literal values play nicely with the rest
	    // of the system.
	    sexpr.path = {
	      type: 'PathExpression',
	      data: false,
	      depth: 0,
	      parts: [literal.original + ''],
	      original: literal.original + '',
	      loc: literal.loc
	    };
	  }
	}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _base = __webpack_require__(4);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _codeGen = __webpack_require__(43);

	var _codeGen2 = _interopRequireDefault(_codeGen);

	function Literal(value) {
	  this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function nameLookup(parent, name /* , type*/) {
	    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	      return [parent, '.', name];
	    } else {
	      return [parent, '[', JSON.stringify(name), ']'];
	    }
	  },
	  depthedLookup: function depthedLookup(name) {
	    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
	  },

	  compilerInfo: function compilerInfo() {
	    var revision = _base.COMPILER_REVISION,
	        versions = _base.REVISION_CHANGES[revision];
	    return [revision, versions];
	  },

	  appendToBuffer: function appendToBuffer(source, location, explicit) {
	    // Force a source as this simplifies the merge logic.
	    if (!_utils.isArray(source)) {
	      source = [source];
	    }
	    source = this.source.wrap(source, location);

	    if (this.environment.isSimple) {
	      return ['return ', source, ';'];
	    } else if (explicit) {
	      // This is a case where the buffer operation occurs as a child of another
	      // construct, generally braces. We have to explicitly output these buffer
	      // operations to ensure that the emitted code goes in the correct location.
	      return ['buffer += ', source, ';'];
	    } else {
	      source.appendToBuffer = true;
	      return source;
	    }
	  },

	  initializeBuffer: function initializeBuffer() {
	    return this.quotedString('');
	  },
	  // END PUBLIC API

	  compile: function compile(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options;
	    this.stringParams = this.options.stringParams;
	    this.trackIds = this.options.trackIds;
	    this.precompile = !asObject;

	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      decorators: [],
	      programs: [],
	      environments: []
	    };

	    this.preamble();

	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.aliases = {};
	    this.registers = { list: [] };
	    this.hashes = [];
	    this.compileStack = [];
	    this.inlineStack = [];
	    this.blockParams = [];

	    this.compileChildren(environment, options);

	    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

	    var opcodes = environment.opcodes,
	        opcode = undefined,
	        firstLoc = undefined,
	        i = undefined,
	        l = undefined;

	    for (i = 0, l = opcodes.length; i < l; i++) {
	      opcode = opcodes[i];

	      this.source.currentLocation = opcode.loc;
	      firstLoc = firstLoc || opcode.loc;
	      this[opcode.opcode].apply(this, opcode.args);
	    }

	    // Flush any trailing content that might be pending.
	    this.source.currentLocation = firstLoc;
	    this.pushSource('');

	    /* istanbul ignore next */
	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
	      throw new _exception2['default']('Compile completed with content left on stack');
	    }

	    if (!this.decorators.isEmpty()) {
	      this.useDecorators = true;

	      this.decorators.prepend('var decorators = container.decorators;\n');
	      this.decorators.push('return fn;');

	      if (asObject) {
	        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
	      } else {
	        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
	        this.decorators.push('}\n');
	        this.decorators = this.decorators.merge();
	      }
	    } else {
	      this.decorators = undefined;
	    }

	    var fn = this.createFunctionContext(asObject);
	    if (!this.isChild) {
	      var ret = {
	        compiler: this.compilerInfo(),
	        main: fn
	      };

	      if (this.decorators) {
	        ret.main_d = this.decorators; // eslint-disable-line camelcase
	        ret.useDecorators = true;
	      }

	      var _context = this.context;
	      var programs = _context.programs;
	      var decorators = _context.decorators;

	      for (i = 0, l = programs.length; i < l; i++) {
	        if (programs[i]) {
	          ret[i] = programs[i];
	          if (decorators[i]) {
	            ret[i + '_d'] = decorators[i];
	            ret.useDecorators = true;
	          }
	        }
	      }

	      if (this.environment.usePartial) {
	        ret.usePartial = true;
	      }
	      if (this.options.data) {
	        ret.useData = true;
	      }
	      if (this.useDepths) {
	        ret.useDepths = true;
	      }
	      if (this.useBlockParams) {
	        ret.useBlockParams = true;
	      }
	      if (this.options.compat) {
	        ret.compat = true;
	      }

	      if (!asObject) {
	        ret.compiler = JSON.stringify(ret.compiler);

	        this.source.currentLocation = { start: { line: 1, column: 0 } };
	        ret = this.objectLiteral(ret);

	        if (options.srcName) {
	          ret = ret.toStringWithSourceMap({ file: options.destName });
	          ret.map = ret.map && ret.map.toString();
	        } else {
	          ret = ret.toString();
	        }
	      } else {
	        ret.compilerOptions = this.options;
	      }

	      return ret;
	    } else {
	      return fn;
	    }
	  },

	  preamble: function preamble() {
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = new _codeGen2['default'](this.options.srcName);
	    this.decorators = new _codeGen2['default'](this.options.srcName);
	  },

	  createFunctionContext: function createFunctionContext(asObject) {
	    var varDeclarations = '';

	    var locals = this.stackVars.concat(this.registers.list);
	    if (locals.length > 0) {
	      varDeclarations += ', ' + locals.join(', ');
	    }

	    // Generate minimizer alias mappings
	    //
	    // When using true SourceNodes, this will update all references to the given alias
	    // as the source nodes are reused in situ. For the non-source node compilation mode,
	    // aliases will not be used, but this case is already being run on the client and
	    // we aren't concern about minimizing the template size.
	    var aliasCount = 0;
	    for (var alias in this.aliases) {
	      // eslint-disable-line guard-for-in
	      var node = this.aliases[alias];

	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
	        node.children[0] = 'alias' + aliasCount;
	      }
	    }

	    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

	    if (this.useBlockParams || this.useDepths) {
	      params.push('blockParams');
	    }
	    if (this.useDepths) {
	      params.push('depths');
	    }

	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource(varDeclarations);

	    if (asObject) {
	      params.push(source);

	      return Function.apply(this, params);
	    } else {
	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
	    }
	  },
	  mergeSource: function mergeSource(varDeclarations) {
	    var isSimple = this.environment.isSimple,
	        appendOnly = !this.forceBuffer,
	        appendFirst = undefined,
	        sourceSeen = undefined,
	        bufferStart = undefined,
	        bufferEnd = undefined;
	    this.source.each(function (line) {
	      if (line.appendToBuffer) {
	        if (bufferStart) {
	          line.prepend('  + ');
	        } else {
	          bufferStart = line;
	        }
	        bufferEnd = line;
	      } else {
	        if (bufferStart) {
	          if (!sourceSeen) {
	            appendFirst = true;
	          } else {
	            bufferStart.prepend('buffer += ');
	          }
	          bufferEnd.add(';');
	          bufferStart = bufferEnd = undefined;
	        }

	        sourceSeen = true;
	        if (!isSimple) {
	          appendOnly = false;
	        }
	      }
	    });

	    if (appendOnly) {
	      if (bufferStart) {
	        bufferStart.prepend('return ');
	        bufferEnd.add(';');
	      } else if (!sourceSeen) {
	        this.source.push('return "";');
	      }
	    } else {
	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

	      if (bufferStart) {
	        bufferStart.prepend('return buffer + ');
	        bufferEnd.add(';');
	      } else {
	        this.source.push('return buffer;');
	      }
	    }

	    if (varDeclarations) {
	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
	    }

	    return this.source.merge();
	  },

	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function blockValue(name) {
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs(name, 0, params);

	    var blockName = this.popStack();
	    params.splice(1, 0, blockName);

	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
	  },

	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function ambiguousBlockValue() {
	    // We're being a bit cheeky and reusing the options value from the prior exec
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs('', 0, params, true);

	    this.flushInline();

	    var current = this.topStack();
	    params.splice(1, 0, current);

	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
	  },

	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function appendContent(content) {
	    if (this.pendingContent) {
	      content = this.pendingContent + content;
	    } else {
	      this.pendingLocation = this.source.currentLocation;
	    }

	    this.pendingContent = content;
	  },

	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function append() {
	    if (this.isInline()) {
	      this.replaceStack(function (current) {
	        return [' != null ? ', current, ' : ""'];
	      });

	      this.pushSource(this.appendToBuffer(this.popStack()));
	    } else {
	      var local = this.popStack();
	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
	      if (this.environment.isSimple) {
	        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
	      }
	    }
	  },

	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function appendEscaped() {
	    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
	  },

	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function getContext(depth) {
	    this.lastContext = depth;
	  },

	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function pushContext() {
	    this.pushStackLiteral(this.contextName(this.lastContext));
	  },

	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
	    var i = 0;

	    if (!scoped && this.options.compat && !this.lastContext) {
	      // The depthed query is expected to handle the undefined logic for the root level that
	      // is implemented below, so we evaluate that directly in compat mode
	      this.push(this.depthedLookup(parts[i++]));
	    } else {
	      this.pushContext();
	    }

	    this.resolvePath('context', parts, i, falsy, strict);
	  },

	  // [lookupBlockParam]
	  //
	  // On stack, before: ...
	  // On stack, after: blockParam[name], ...
	  //
	  // Looks up the value of `parts` on the given block param and pushes
	  // it onto the stack.
	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
	    this.useBlockParams = true;

	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
	    this.resolvePath('context', parts, 1);
	  },

	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data, ...
	  //
	  // Push the data lookup operator
	  lookupData: function lookupData(depth, parts, strict) {
	    if (!depth) {
	      this.pushStackLiteral('data');
	    } else {
	      this.pushStackLiteral('container.data(data, ' + depth + ')');
	    }

	    this.resolvePath('data', parts, 0, true, strict);
	  },

	  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
	    // istanbul ignore next

	    var _this = this;

	    if (this.options.strict || this.options.assumeObjects) {
	      this.push(strictLookup(this.options.strict && strict, this, parts, type));
	      return;
	    }

	    var len = parts.length;
	    for (; i < len; i++) {
	      /* eslint-disable no-loop-func */
	      this.replaceStack(function (current) {
	        var lookup = _this.nameLookup(current, parts[i], type);
	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
	        // needs to have the special handling for these values.
	        if (!falsy) {
	          return [' != null ? ', lookup, ' : ', current];
	        } else {
	          // Otherwise we can use generic falsy handling
	          return [' && ', lookup];
	        }
	      });
	      /* eslint-enable no-loop-func */
	    }
	  },

	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function resolvePossibleLambda() {
	    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
	  },

	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function pushStringParam(string, type) {
	    this.pushContext();
	    this.pushString(type);

	    // If it's a subexpression, the string result
	    // will be pushed after this opcode.
	    if (type !== 'SubExpression') {
	      if (typeof string === 'string') {
	        this.pushString(string);
	      } else {
	        this.pushStackLiteral(string);
	      }
	    }
	  },

	  emptyHash: function emptyHash(omitEmpty) {
	    if (this.trackIds) {
	      this.push('{}'); // hashIds
	    }
	    if (this.stringParams) {
	      this.push('{}'); // hashContexts
	      this.push('{}'); // hashTypes
	    }
	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
	  },
	  pushHash: function pushHash() {
	    if (this.hash) {
	      this.hashes.push(this.hash);
	    }
	    this.hash = { values: [], types: [], contexts: [], ids: [] };
	  },
	  popHash: function popHash() {
	    var hash = this.hash;
	    this.hash = this.hashes.pop();

	    if (this.trackIds) {
	      this.push(this.objectLiteral(hash.ids));
	    }
	    if (this.stringParams) {
	      this.push(this.objectLiteral(hash.contexts));
	      this.push(this.objectLiteral(hash.types));
	    }

	    this.push(this.objectLiteral(hash.values));
	  },

	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function pushString(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },

	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function pushLiteral(value) {
	    this.pushStackLiteral(value);
	  },

	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function pushProgram(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },

	  // [registerDecorator]
	  //
	  // On stack, before: hash, program, params..., ...
	  // On stack, after: ...
	  //
	  // Pops off the decorator's parameters, invokes the decorator,
	  // and inserts the decorator into the decorators list.
	  registerDecorator: function registerDecorator(paramSize, name) {
	    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
	        options = this.setupHelperArgs(name, paramSize);

	    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
	  },

	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
	    var nonHelper = this.popStack(),
	        helper = this.setupHelper(paramSize, name),
	        simple = isSimple ? [helper.name, ' || '] : '';

	    var lookup = ['('].concat(simple, nonHelper);
	    if (!this.options.strict) {
	      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
	    }
	    lookup.push(')');

	    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
	  },

	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
	  },

	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
	    this.useRegister('helper');

	    var nonHelper = this.popStack();

	    this.emptyHash();
	    var helper = this.setupHelper(0, name, helperCall);

	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
	    if (!this.options.strict) {
	      lookup[0] = '(helper = ';
	      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
	    }

	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
	  },

	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function invokePartial(isDynamic, name, indent) {
	    var params = [],
	        options = this.setupParams(name, 1, params);

	    if (isDynamic) {
	      name = this.popStack();
	      delete options.name;
	    }

	    if (indent) {
	      options.indent = JSON.stringify(indent);
	    }
	    options.helpers = 'helpers';
	    options.partials = 'partials';
	    options.decorators = 'container.decorators';

	    if (!isDynamic) {
	      params.unshift(this.nameLookup('partials', name, 'partial'));
	    } else {
	      params.unshift(name);
	    }

	    if (this.options.compat) {
	      options.depths = 'depths';
	    }
	    options = this.objectLiteral(options);
	    params.push(options);

	    this.push(this.source.functionCall('container.invokePartial', '', params));
	  },

	  // [assignToHash]
	  //
	  // On stack, before: value, ..., hash, ...
	  // On stack, after: ..., hash, ...
	  //
	  // Pops a value off the stack and assigns it to the current hash
	  assignToHash: function assignToHash(key) {
	    var value = this.popStack(),
	        context = undefined,
	        type = undefined,
	        id = undefined;

	    if (this.trackIds) {
	      id = this.popStack();
	    }
	    if (this.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }

	    var hash = this.hash;
	    if (context) {
	      hash.contexts[key] = context;
	    }
	    if (type) {
	      hash.types[key] = type;
	    }
	    if (id) {
	      hash.ids[key] = id;
	    }
	    hash.values[key] = value;
	  },

	  pushId: function pushId(type, name, child) {
	    if (type === 'BlockParam') {
	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
	    } else if (type === 'PathExpression') {
	      this.pushString(name);
	    } else if (type === 'SubExpression') {
	      this.pushStackLiteral('true');
	    } else {
	      this.pushStackLiteral('null');
	    }
	  },

	  // HELPERS

	  compiler: JavaScriptCompiler,

	  compileChildren: function compileChildren(environment, options) {
	    var children = environment.children,
	        child = undefined,
	        compiler = undefined;

	    for (var i = 0, l = children.length; i < l; i++) {
	      child = children[i];
	      compiler = new this.compiler(); // eslint-disable-line new-cap

	      var existing = this.matchExistingProgram(child);

	      if (existing == null) {
	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
	        var index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
	        this.context.decorators[index] = compiler.decorators;
	        this.context.environments[index] = child;

	        this.useDepths = this.useDepths || compiler.useDepths;
	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
	        child.useDepths = this.useDepths;
	        child.useBlockParams = this.useBlockParams;
	      } else {
	        child.index = existing.index;
	        child.name = 'program' + existing.index;

	        this.useDepths = this.useDepths || existing.useDepths;
	        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
	      }
	    }
	  },
	  matchExistingProgram: function matchExistingProgram(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return environment;
	      }
	    }
	  },

	  programExpression: function programExpression(guid) {
	    var child = this.environment.children[guid],
	        programParams = [child.index, 'data', child.blockParams];

	    if (this.useBlockParams || this.useDepths) {
	      programParams.push('blockParams');
	    }
	    if (this.useDepths) {
	      programParams.push('depths');
	    }

	    return 'container.program(' + programParams.join(', ') + ')';
	  },

	  useRegister: function useRegister(name) {
	    if (!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },

	  push: function push(expr) {
	    if (!(expr instanceof Literal)) {
	      expr = this.source.wrap(expr);
	    }

	    this.inlineStack.push(expr);
	    return expr;
	  },

	  pushStackLiteral: function pushStackLiteral(item) {
	    this.push(new Literal(item));
	  },

	  pushSource: function pushSource(source) {
	    if (this.pendingContent) {
	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
	      this.pendingContent = undefined;
	    }

	    if (source) {
	      this.source.push(source);
	    }
	  },

	  replaceStack: function replaceStack(callback) {
	    var prefix = ['('],
	        stack = undefined,
	        createdStack = undefined,
	        usedLiteral = undefined;

	    /* istanbul ignore next */
	    if (!this.isInline()) {
	      throw new _exception2['default']('replaceStack on non-inline');
	    }

	    // We want to merge the inline statement into the replacement statement via ','
	    var top = this.popStack(true);

	    if (top instanceof Literal) {
	      // Literals do not need to be inlined
	      stack = [top.value];
	      prefix = ['(', stack];
	      usedLiteral = true;
	    } else {
	      // Get or create the current stack name for use by the inline
	      createdStack = true;
	      var _name = this.incrStack();

	      prefix = ['((', this.push(_name), ' = ', top, ')'];
	      stack = this.topStack();
	    }

	    var item = callback.call(this, stack);

	    if (!usedLiteral) {
	      this.popStack();
	    }
	    if (createdStack) {
	      this.stackSlot--;
	    }
	    this.push(prefix.concat(item, ')'));
	  },

	  incrStack: function incrStack() {
	    this.stackSlot++;
	    if (this.stackSlot > this.stackVars.length) {
	      this.stackVars.push('stack' + this.stackSlot);
	    }
	    return this.topStackName();
	  },
	  topStackName: function topStackName() {
	    return 'stack' + this.stackSlot;
	  },
	  flushInline: function flushInline() {
	    var inlineStack = this.inlineStack;
	    this.inlineStack = [];
	    for (var i = 0, len = inlineStack.length; i < len; i++) {
	      var entry = inlineStack[i];
	      /* istanbul ignore if */
	      if (entry instanceof Literal) {
	        this.compileStack.push(entry);
	      } else {
	        var stack = this.incrStack();
	        this.pushSource([stack, ' = ', entry, ';']);
	        this.compileStack.push(stack);
	      }
	    }
	  },
	  isInline: function isInline() {
	    return this.inlineStack.length;
	  },

	  popStack: function popStack(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();

	    if (!wrapped && item instanceof Literal) {
	      return item.value;
	    } else {
	      if (!inline) {
	        /* istanbul ignore next */
	        if (!this.stackSlot) {
	          throw new _exception2['default']('Invalid stack pop');
	        }
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },

	  topStack: function topStack() {
	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
	        item = stack[stack.length - 1];

	    /* istanbul ignore if */
	    if (item instanceof Literal) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },

	  contextName: function contextName(context) {
	    if (this.useDepths && context) {
	      return 'depths[' + context + ']';
	    } else {
	      return 'depth' + context;
	    }
	  },

	  quotedString: function quotedString(str) {
	    return this.source.quotedString(str);
	  },

	  objectLiteral: function objectLiteral(obj) {
	    return this.source.objectLiteral(obj);
	  },

	  aliasable: function aliasable(name) {
	    var ret = this.aliases[name];
	    if (ret) {
	      ret.referenceCount++;
	      return ret;
	    }

	    ret = this.aliases[name] = this.source.wrap(name);
	    ret.aliasable = true;
	    ret.referenceCount = 1;

	    return ret;
	  },

	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
	    var params = [],
	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
	    var foundHelper = this.nameLookup('helpers', name, 'helper'),
	        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

	    return {
	      params: params,
	      paramsInit: paramsInit,
	      name: foundHelper,
	      callParams: [callContext].concat(params)
	    };
	  },

	  setupParams: function setupParams(helper, paramSize, params) {
	    var options = {},
	        contexts = [],
	        types = [],
	        ids = [],
	        objectArgs = !params,
	        param = undefined;

	    if (objectArgs) {
	      params = [];
	    }

	    options.name = this.quotedString(helper);
	    options.hash = this.popStack();

	    if (this.trackIds) {
	      options.hashIds = this.popStack();
	    }
	    if (this.stringParams) {
	      options.hashTypes = this.popStack();
	      options.hashContexts = this.popStack();
	    }

	    var inverse = this.popStack(),
	        program = this.popStack();

	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      options.fn = program || 'container.noop';
	      options.inverse = inverse || 'container.noop';
	    }

	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
	    // so we need to pop them off the stack in reverse order
	    var i = paramSize;
	    while (i--) {
	      param = this.popStack();
	      params[i] = param;

	      if (this.trackIds) {
	        ids[i] = this.popStack();
	      }
	      if (this.stringParams) {
	        types[i] = this.popStack();
	        contexts[i] = this.popStack();
	      }
	    }

	    if (objectArgs) {
	      options.args = this.source.generateArray(params);
	    }

	    if (this.trackIds) {
	      options.ids = this.source.generateArray(ids);
	    }
	    if (this.stringParams) {
	      options.types = this.source.generateArray(types);
	      options.contexts = this.source.generateArray(contexts);
	    }

	    if (this.options.data) {
	      options.data = 'data';
	    }
	    if (this.useBlockParams) {
	      options.blockParams = 'blockParams';
	    }
	    return options;
	  },

	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
	    var options = this.setupParams(helper, paramSize, params);
	    options = this.objectLiteral(options);
	    if (useRegister) {
	      this.useRegister('options');
	      params.push('options');
	      return ['options=', options];
	    } else if (params) {
	      params.push(options);
	      return '';
	    } else {
	      return options;
	    }
	  }
	};

	(function () {
	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

	  for (var i = 0, l = reservedWords.length; i < l; i++) {
	    compilerWords[reservedWords[i]] = true;
	  }
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
	  var stack = compiler.popStack(),
	      i = 0,
	      len = parts.length;
	  if (requireTerminal) {
	    len--;
	  }

	  for (; i < len; i++) {
	    stack = compiler.nameLookup(stack, parts[i], type);
	  }

	  if (requireTerminal) {
	    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
	  } else {
	    return stack;
	  }
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* global define */
	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var SourceNode = undefined;

	try {
	  /* istanbul ignore next */
	  if (false) {
	    // We don't support this in AMD environments. For these environments, we asusme that
	    // they are running on the browser and thus have no need for the source-map library.
	    var SourceMap = require('source-map');
	    SourceNode = SourceMap.SourceNode;
	  }
	} catch (err) {}
	/* NOP */

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
	  SourceNode = function (line, column, srcFile, chunks) {
	    this.src = '';
	    if (chunks) {
	      this.add(chunks);
	    }
	  };
	  /* istanbul ignore next */
	  SourceNode.prototype = {
	    add: function add(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src += chunks;
	    },
	    prepend: function prepend(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src = chunks + this.src;
	    },
	    toStringWithSourceMap: function toStringWithSourceMap() {
	      return { code: this.toString() };
	    },
	    toString: function toString() {
	      return this.src;
	    }
	  };
	}

	function castChunk(chunk, codeGen, loc) {
	  if (_utils.isArray(chunk)) {
	    var ret = [];

	    for (var i = 0, len = chunk.length; i < len; i++) {
	      ret.push(codeGen.wrap(chunk[i], loc));
	    }
	    return ret;
	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
	    // Handle primitives that the SourceNode will throw up on
	    return chunk + '';
	  }
	  return chunk;
	}

	function CodeGen(srcFile) {
	  this.srcFile = srcFile;
	  this.source = [];
	}

	CodeGen.prototype = {
	  isEmpty: function isEmpty() {
	    return !this.source.length;
	  },
	  prepend: function prepend(source, loc) {
	    this.source.unshift(this.wrap(source, loc));
	  },
	  push: function push(source, loc) {
	    this.source.push(this.wrap(source, loc));
	  },

	  merge: function merge() {
	    var source = this.empty();
	    this.each(function (line) {
	      source.add(['  ', line, '\n']);
	    });
	    return source;
	  },

	  each: function each(iter) {
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      iter(this.source[i]);
	    }
	  },

	  empty: function empty() {
	    var loc = this.currentLocation || { start: {} };
	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
	  },
	  wrap: function wrap(chunk) {
	    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

	    if (chunk instanceof SourceNode) {
	      return chunk;
	    }

	    chunk = castChunk(chunk, this, loc);

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
	  },

	  functionCall: function functionCall(fn, type, params) {
	    params = this.generateList(params);
	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
	  },

	  quotedString: function quotedString(str) {
	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
	    .replace(/\u2029/g, '\\u2029') + '"';
	  },

	  objectLiteral: function objectLiteral(obj) {
	    var pairs = [];

	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        var value = castChunk(obj[key], this);
	        if (value !== 'undefined') {
	          pairs.push([this.quotedString(key), ':', value]);
	        }
	      }
	    }

	    var ret = this.generateList(pairs);
	    ret.prepend('{');
	    ret.add('}');
	    return ret;
	  },

	  generateList: function generateList(entries) {
	    var ret = this.empty();

	    for (var i = 0, len = entries.length; i < len; i++) {
	      if (i) {
	        ret.add(',');
	      }

	      ret.add(castChunk(entries[i], this));
	    }

	    return ret;
	  },

	  generateArray: function generateArray(entries) {
	    var ret = this.generateList(entries);
	    ret.prepend('[');
	    ret.add(']');

	    return ret;
	  }
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];

/***/ })
/******/ ])
});
;
/*
    JavaScript autoComplete v1.0.4
    Copyright (c) 2014 Simon Steinberger / Pixabay
    GitHub: https://github.com/Pixabay/JavaScript-autoComplete
    License: http://www.opensource.org/licenses/mit-license.php
*/

var autoComplete = (function(){
    // "use strict";
    function autoComplete(options){
        if (!document.querySelector) return;

        // helpers
        function hasClass(el, className){ return el.classList ? el.classList.contains(className) : new RegExp('\\b'+ className+'\\b').test(el.className); }

        function addEvent(el, type, handler){
            if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
        }
        function removeEvent(el, type, handler){
            // if (el.removeEventListener) not working in IE11
            if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
        }
        function live(elClass, event, cb, context){
            addEvent(context || document, event, function(e){
                var found, el = e.target || e.srcElement;
                while (el && !(found = hasClass(el, elClass))) el = el.parentElement;
                if (found) cb.call(el, e);
            });
        }

        var o = {
            selector: 0,
            source: 0,
            minChars: 3,
            delay: 150,
            offsetLeft: 0,
            offsetTop: 1,
            cache: 1,
            menuClass: '',
            renderItem: function (item, search){
                // escape special characters
                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
            },
            onSelect: function(e, term, item){}
        };
        for (var k in options) { if (options.hasOwnProperty(k)) o[k] = options[k]; }

        // init
        var elems = typeof o.selector == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
        for (var i=0; i<elems.length; i++) {
            var that = elems[i];

            // create suggestions container "sc"
            that.sc = document.createElement('div');
            that.sc.className = 'autocomplete-suggestions '+o.menuClass;

            that.autocompleteAttr = that.getAttribute('autocomplete');
            that.setAttribute('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';

            that.updateSC = function(resize, next){
                var rect = that.getBoundingClientRect();
                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
                that.sc.style.width = Math.round(rect.right - rect.left) + 'px'; // outerWidth
                if (!resize) {
                    that.sc.style.display = 'block';
                    if (!that.sc.maxHeight) { that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight); }
                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
                    if (that.sc.suggestionHeight)
                        if (!next) that.sc.scrollTop = 0;
                        else {
                            var scrTop = that.sc.scrollTop, selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
                                that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;
                            else if (selTop < 0)
                                that.sc.scrollTop = selTop + scrTop;
                        }
                }
            }
            addEvent(window, 'resize', that.updateSC);
            document.body.appendChild(that.sc);

            live('autocomplete-suggestion', 'mouseleave', function(e){
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) setTimeout(function(){ sel.className = sel.className.replace('selected', ''); }, 20);
            }, that.sc);

            live('autocomplete-suggestion', 'mouseover', function(e){
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) sel.className = sel.className.replace('selected', '');
                this.className += ' selected';
            }, that.sc);

            live('autocomplete-suggestion', 'mousedown', function(e){
                if (hasClass(this, 'autocomplete-suggestion')) { // else outside click
                    var v = this.getAttribute('data-val');
                    that.value = v;
                    o.onSelect(e, v, this);
                    that.sc.style.display = 'none';
                }
            }, that.sc);

            that.blurHandler = function(){
                try { var over_sb = document.querySelector('.autocomplete-suggestions:hover'); } catch(e){ var over_sb = 0; }
                if (!over_sb) {
                    that.last_val = that.value;
                    that.sc.style.display = 'none';
                    setTimeout(function(){ that.sc.style.display = 'none'; }, 350); // hide suggestions on fast input
                } else if (that !== document.activeElement) setTimeout(function(){ that.focus(); }, 20);
            };
            addEvent(that, 'blur', that.blurHandler);

            var suggest = function(data){
                var val = that.value;
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (var i=0;i<data.length;i++) s += o.renderItem(data[i], val);
                    that.sc.innerHTML = s;
                    that.updateSC(0);
                }
                else
                    that.sc.style.display = 'none';
            }

            that.keydownHandler = function(e){
                var key = window.event ? e.keyCode : e.which;
                // down (40), up (38)
                if ((key == 40 || key == 38) && that.sc.innerHTML) {
                    var next, sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (!sel) {
                        next = (key == 40) ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1]; // first : last
                        next.className += ' selected';
                        that.value = next.getAttribute('data-val');
                    } else {
                        next = (key == 40) ? sel.nextSibling : sel.previousSibling;
                        if (next) {
                            sel.className = sel.className.replace('selected', '');
                            next.className += ' selected';
                            that.value = next.getAttribute('data-val');
                        }
                        else { sel.className = sel.className.replace('selected', ''); that.value = that.last_val; next = 0; }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // esc
                else if (key == 27) { that.value = that.last_val; that.sc.style.display = 'none'; }
                // enter
                else if (key == 13 || key == 9) {
                    var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (sel && that.sc.style.display != 'none') { o.onSelect(e, sel.getAttribute('data-val'), sel); setTimeout(function(){ that.sc.style.display = 'none'; }, 20); }
                }
            };
            addEvent(that, 'keydown', that.keydownHandler);

            that.keyupHandler = function(e){
                var key = window.event ? e.keyCode : e.which;
                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
                    var val = that.value;
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) { suggest(that.cache[val]); return; }
                                // no requests if previous suggestions were empty
                                for (var i=1; i<val.length-o.minChars; i++) {
                                    var part = val.slice(0, val.length-i);
                                    if (part in that.cache && !that.cache[part].length) { suggest([]); return; }
                                }
                            }
                            that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.style.display = 'none';
                    }
                }
            };
            addEvent(that, 'keyup', that.keyupHandler);

            that.focusHandler = function(e){
                that.last_val = '\n';
                that.keyupHandler(e)
            };
            if (!o.minChars) addEvent(that, 'focus', that.focusHandler);
        }

        // public destroy method
        this.destroy = function(){
            for (var i=0; i<elems.length; i++) {
                var that = elems[i];
                removeEvent(window, 'resize', that.updateSC);
                removeEvent(that, 'blur', that.blurHandler);
                removeEvent(that, 'focus', that.focusHandler);
                removeEvent(that, 'keydown', that.keydownHandler);
                removeEvent(that, 'keyup', that.keyupHandler);
                if (that.autocompleteAttr)
                    that.setAttribute('autocomplete', that.autocompleteAttr);
                else
                    that.removeAttribute('autocomplete');
                document.body.removeChild(that.sc);
                that = null;
            }
        };
    }
    return autoComplete;
})();

(function(){
    if (typeof define === 'function' && define.amd)
        define('autoComplete', function () { return autoComplete; });
    else if (typeof module !== 'undefined' && module.exports)
        module.exports = autoComplete;
    else
        window.autoComplete = autoComplete;
})();

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var dt = __webpack_require__(1);
	var $ = __webpack_require__(2);
	   
	$(function () {

	    let init = function () {
	       
	        dt.init();
	    }

	    init();      
	   
	    
	});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	let $ = __webpack_require__(2);
	let _dt = __webpack_require__(3);
	let _dtEvent = __webpack_require__(4);
	let _hh = __webpack_require__(6)
	let _hh_helper = __webpack_require__(13);
	let _service = __webpack_require__(12);
	let servicecall = __webpack_require__(10);
	let appsettingsobject = __webpack_require__(8);
	let appsettings = appsettingsobject.config;

	module.exports = {
	    init: function () {
	        this.cacheDom();
	        this.bindEvent();
	        this.EventHandler();
	        this.render();
	    },
	    cacheDom: function () {
	        this.$body = $('body');
	        this.$bb_aj_listatoApprove = $("#bb_aj_listatoApprove");
	        this.$bb_aj_listaAlla = $("#bb_aj_listaAlla");
	        this.$bb_aj_boktipsAdminList = $("#bb_aj_boktipsAdminList");
	        this.$bb_aj_boktipsAdminALLList = $("#bb_aj_boktipsAdminALLList");
	    },
	    bindEvent: function (userid) {
	        let that = this;
	                
	        this.$body.on('click', '#bb_aj_listaAlla', function (e) {
	            $(this).addClass("not-active");
	            that.$bb_aj_listatoApprove.removeClass("not-active");

	            that.$bb_aj_boktipsAdminList.hide();
	            let datatables = that.$bb_aj_boktipsAdminList.DataTable();
	            datatables.destroy();
	                        
	            that.serviceHandler("#bb_aj_boktipsAdminALLList", appsettings.api.boktipslistor.getboktipslistAll(), function(){
	                that.$bb_aj_boktipsAdminALLList.show();
	            });
	                       
	            return false;
	        });

	        this.$body.on('click', '#bb_aj_listatoApprove', function (e) {        
	            $(this).addClass("not-active");
	            that.$bb_aj_listaAlla.removeClass("not-active");
	            that.$bb_aj_boktipsAdminALLList.hide();

	            let datatables = that.$bb_aj_boktipsAdminALLList.DataTable();
	            datatables.destroy();            
	            
	            that.serviceHandler("#bb_aj_boktipsAdminList", appsettings.api.boktipslistor.getboktipslistToApprove(), function () {
	                that.$bb_aj_boktipsAdminList.show();
	            });           
	         
	            return false;
	        });

	        this.$body.on('click', '#bb_aj_Deleteboktips', function (e) {
	            let id = $(this).attr('data-tipid');

	            servicecall.deletetip(id, function (isok) {
	                that.updatetable();
	            });

	            $("#bb_aj_modalContainer").hide();
	            return false;
	        });

	        this.$body.on('click', '#bb_aj_Saveboktips', function (e) {
	            let id = $(this).attr('data-tipid');
	            let rub = $("#bb_aj_saveBoktipRubrik").html();
	            let content = tinyMCE.activeEditor.getContent();

	            servicecall.savetip(id, rub, content, function () {              
	                that.updatetable();                          
	            });

	            $("#bb_aj_modalContainer").hide();
	            return false;
	        });
	    },
	    EventHandler: function () {
	        _dtEvent.init();
	        _hh_helper.init();
	    },
	    updatetable: function () {

	        let valdlist, urlen, cssdiv;
	        if (this.$bb_aj_boktipsAdminList.is(':visible')) {
	            valdlist = this.$bb_aj_boktipsAdminList;
	            urlen = appsettings.api.boktipslistor.getboktipslistToApprove();
	            cssdiv = "#bb_aj_boktipsAdminList"
	            
	        }
	        else {
	            if (this.$bb_aj_boktipsAdminALLList.is(':visible')) {
	                valdlist = this.$bb_aj_boktipsAdminALLList
	                urlen = appsettings.api.boktipslistor.getboktipslistAll();
	                cssdiv = "#bb_aj_boktipsAdminALLList"                
	            };
	        };      
	       
	        let datatables = valdlist.DataTable();
	        datatables.destroy();
	        valdlist.hide();
	        this.serviceHandler(cssdiv, urlen, function () {
	            valdlist.show();
	        });
	    },
	    serviceHandler: function (cssSelector,url, callback) {
	        //let jsondatapromise = _service.getjsondata('https://www2.barnensbibliotek.se/Api_v3.1/boktips/typ/ByUserId/val/7017/txtval/0/devkey/alf/?type=json');
	        let jsondatapromise = _service.getjsondata(url);

	        jsondatapromise.then(jsondata => {

	            appsettings.dataset.currentdatalist = jsondata;

	            _hh.injecthtmltemplate(cssSelector, appsettings.handlebartemplate.hb_booktipList_tmp, jsondata, function () {
	                console.log("funkar1:" + appsettings.dataset.currentdatalist);
	                _dt.RunDataTable(cssSelector);
	                console.log("funkar2:" + appsettings.dataset.currentdatalist);
	                callback();
	            });
	        });    
	    },
	    render: function () {
	        
	        this.serviceHandler("#bb_aj_boktipsAdminList", appsettings.api.boktipslistor.getboktipslistToApprove(), function () { });
	        //this.serviceHandler("#bb_aj_boktipsAdminALLList", appsettings.api.boktipslistor.getboktipslistAll());
	    }
	}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.3.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-01-20T17:24Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};

	var isFunction = function isFunction( obj ) {

	      // Support: Chrome <=57, Firefox <=52
	      // In some browsers, typeof returns "function" for HTML <object> elements
	      // (i.e., `typeof document.createElement( "object" ) === "function"`).
	      // We don't want to classify *any* DOM node as a function.
	      return typeof obj === "function" && typeof obj.nodeType !== "number";
	  };


	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};




		var preservedScriptAttributes = {
			type: true,
			src: true,
			noModule: true
		};

		function DOMEval( code, doc, node ) {
			doc = doc || document;

			var i,
				script = doc.createElement( "script" );

			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {
					if ( node[ i ] ) {
						script[ i ] = node[ i ];
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}


	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.3.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );

		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,

						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};


	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase( all, letter ) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while ( maxIterations-- ) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;

			}

			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( toType( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			div.style.position = "absolute";
			scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}

		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;

		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {

				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}

			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5
			) );
		}

		return delta;
	}

	function getWidthOrHeight( elem, dimension, extra ) {

		// Start with computed style
		var styles = getStyles( elem ),
			val = curCSS( elem, dimension, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox;

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = valueIsBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ dimension ] );

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		if ( val === "auto" ||
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

			val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

			// offsetWidth/offsetHeight provide border-box values
			valueIsBorderBox = true;
		}

		// Normalize "" and auto
		val = parseFloat( val ) || 0;

		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,

				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, dimension, extra );
							} ) :
							getWidthOrHeight( elem, dimension, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),
					isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra && boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					);

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && support.scrollboxSize() === styles.position ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = Date.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );

			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( isValidValue ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}

						elem[ type ]();

						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}

						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && toType( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {

		// offset() relates an element's border box to the document origin
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();

			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {

					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.7
	 * ©2008-2014 SpryMedia Ltd - datatables.net/license
	 */
	var $ = __webpack_require__(2);
	/**
	 * @summary     DataTables
	 * @description Paginate, search and order HTML tables
	 * @version     1.10.7
	 * @file        jquery.dataTables.js
	 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
	 * @contact     www.sprymedia.co.uk/contact
	 * @copyright   Copyright 2008-2014 SpryMedia Ltd.
	 *
	 * This source file is free software, available under the following license:
	 *   MIT license - http://datatables.net/license
	 *
	 * This source file is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 *
	 * For details please refer to: http://www.datatables.net
	 */

	/*jslint evil: true, undef: true, browser: true */
	/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
	module.exports = {
	    jqueryTableInit: function () {
	        (/** @lends <global> */function (window, document, undefined) {

	            (function (factory) {
	                "use strict";

	                if (true) {
	                    // Define as an AMD module if possible
	                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	                }
	                else if (typeof exports === 'object') {
	                    // Node/CommonJS
	                    module.exports = factory(require('jquery'));
	                }
	                else if (jQuery && !jQuery.fn.dataTable) {
	                    // Define using browser globals otherwise
	                    // Prevent multiple instantiations if the script is loaded twice
	                    factory(jQuery);
	                }
	            }
	            (/** @lends <global> */function ($) {
	                "use strict";

	                /**
	                 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	                 * flexible tool, based upon the foundations of progressive enhancement,
	                 * which will add advanced interaction controls to any HTML table. For a
	                 * full list of features please refer to
	                 * [DataTables.net](href="http://datatables.net).
	                 *
	                 * Note that the `DataTable` object is not a global variable but is aliased
	                 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	                 * be  accessed.
	                 *
	                 *  @class
	                 *  @param {object} [init={}] Configuration object for DataTables. Options
	                 *    are defined by {@link DataTable.defaults}
	                 *  @requires jQuery 1.7+
	                 *
	                 *  @example
	                 *    // Basic initialisation
	                 *    $(document).ready( function {
	                 *      $('#example').dataTable();
	                 *    } );
	                 *
	                 *  @example
	                 *    // Initialisation with configuration options - in this case, disable
	                 *    // pagination and sorting.
	                 *    $(document).ready( function {
	                 *      $('#example').dataTable( {
	                 *        "paginate": false,
	                 *        "sort": false
	                 *      } );
	                 *    } );
	                 */
	                var DataTable;


	                /*
	                 * It is useful to have variables which are scoped locally so only the
	                 * DataTables functions can access them and they don't leak into global space.
	                 * At the same time these functions are often useful over multiple files in the
	                 * core and API, so we list, or at least document, all variables which are used
	                 * by DataTables as private variables here. This also ensures that there is no
	                 * clashing of variable names and that they can easily referenced for reuse.
	                 */


	                // Defined else where
	                //  _selector_run
	                //  _selector_opts
	                //  _selector_first
	                //  _selector_row_indexes

	                var _ext; // DataTable.ext
	                var _Api; // DataTable.Api
	                var _api_register; // DataTable.Api.register
	                var _api_registerPlural; // DataTable.Api.registerPlural

	                var _re_dic = {};
	                var _re_new_lines = /[\r\n]/g;
	                var _re_html = /<.*?>/g;
	                var _re_date_start = /^[\w\+\-]/;
	                var _re_date_end = /[\w\+\-]$/;

	                // Escape regular expression special characters
	                var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');

	                // http://en.wikipedia.org/wiki/Foreign_exchange_market
	                // - \u20BD - Russian ruble.
	                // - \u20a9 - South Korean Won
	                // - \u20BA - Turkish Lira
	                // - \u20B9 - Indian Rupee
	                // - R - Brazil (R$) and South Africa
	                // - fr - Swiss Franc
	                // - kr - Swedish krona, Norwegian krone and Danish krone
	                // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	                //   standards as thousands separators.
	                var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;


	                var _empty = function (d) {
	                    return !d || d === true || d === '-' ? true : false;
	                };


	                var _intVal = function (s) {
	                    var integer = parseInt(s, 10);
	                    return !isNaN(integer) && isFinite(s) ? integer : null;
	                };

	                // Convert from a formatted number with characters other than `.` as the
	                // decimal place, to a Javascript number
	                var _numToDecimal = function (num, decimalPoint) {
	                    // Cache created regular expressions for speed as this function is called often
	                    if (!_re_dic[decimalPoint]) {
	                        _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
	                    }
	                    return typeof num === 'string' && decimalPoint !== '.' ?
	                        num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') :
	                        num;
	                };


	                var _isNumber = function (d, decimalPoint, formatted) {
	                    var strType = typeof d === 'string';

	                    // If empty return immediately so there must be a number if it is a
	                    // formatted string (this stops the string "k", or "kr", etc being detected
	                    // as a formatted number for currency
	                    if (_empty(d)) {
	                        return true;
	                    }

	                    if (decimalPoint && strType) {
	                        d = _numToDecimal(d, decimalPoint);
	                    }

	                    if (formatted && strType) {
	                        d = d.replace(_re_formatted_numeric, '');
	                    }

	                    return !isNaN(parseFloat(d)) && isFinite(d);
	                };


	                // A string without HTML in it can be considered to be HTML still
	                var _isHtml = function (d) {
	                    return _empty(d) || typeof d === 'string';
	                };


	                var _htmlNumeric = function (d, decimalPoint, formatted) {
	                    if (_empty(d)) {
	                        return true;
	                    }

	                    var html = _isHtml(d);
	                    return !html ?
	                        null :
	                        _isNumber(_stripHtml(d), decimalPoint, formatted) ?
	                            true :
	                            null;
	                };


	                var _pluck = function (a, prop, prop2) {
	                    var out = [];
	                    var i = 0, ien = a.length;

	                    // Could have the test in the loop for slightly smaller code, but speed
	                    // is essential here
	                    if (prop2 !== undefined) {
	                        for (; i < ien ; i++) {
	                            if (a[i] && a[i][prop]) {
	                                out.push(a[i][prop][prop2]);
	                            }
	                        }
	                    }
	                    else {
	                        for (; i < ien ; i++) {
	                            if (a[i]) {
	                                out.push(a[i][prop]);
	                            }
	                        }
	                    }

	                    return out;
	                };


	                // Basically the same as _pluck, but rather than looping over `a` we use `order`
	                // as the indexes to pick from `a`
	                var _pluck_order = function (a, order, prop, prop2) {
	                    var out = [];
	                    var i = 0, ien = order.length;

	                    // Could have the test in the loop for slightly smaller code, but speed
	                    // is essential here
	                    if (prop2 !== undefined) {
	                        for (; i < ien ; i++) {
	                            if (a[order[i]][prop]) {
	                                out.push(a[order[i]][prop][prop2]);
	                            }
	                        }
	                    }
	                    else {
	                        for (; i < ien ; i++) {
	                            out.push(a[order[i]][prop]);
	                        }
	                    }

	                    return out;
	                };


	                var _range = function (len, start) {
	                    var out = [];
	                    var end;

	                    if (start === undefined) {
	                        start = 0;
	                        end = len;
	                    }
	                    else {
	                        end = start;
	                        start = len;
	                    }

	                    for (var i = start ; i < end ; i++) {
	                        out.push(i);
	                    }

	                    return out;
	                };


	                var _removeEmpty = function (a) {
	                    var out = [];

	                    for (var i = 0, ien = a.length ; i < ien ; i++) {
	                        if (a[i]) { // careful - will remove all falsy values!
	                            out.push(a[i]);
	                        }
	                    }

	                    return out;
	                };


	                var _stripHtml = function (d) {
	                    return d.replace(_re_html, '');
	                };


	                /**
	                 * Find the unique elements in a source array.
	                 *
	                 * @param  {array} src Source array
	                 * @return {array} Array of unique items
	                 * @ignore
	                 */
	                var _unique = function (src) {
	                    // A faster unique method is to use object keys to identify used values,
	                    // but this doesn't work with arrays or objects, which we must also
	                    // consider. See jsperf.com/compare-array-unique-versions/4 for more
	                    // information.
	                    var
	                        out = [],
	                        val,
	                        i, ien = src.length,
	                        j, k = 0;

	                    again: for (i = 0 ; i < ien ; i++) {
	                        val = src[i];

	                        for (j = 0 ; j < k ; j++) {
	                            if (out[j] === val) {
	                                continue again;
	                            }
	                        }

	                        out.push(val);
	                        k++;
	                    }

	                    return out;
	                };



	                /**
	                 * Create a mapping object that allows camel case parameters to be looked up
	                 * for their Hungarian counterparts. The mapping is stored in a private
	                 * parameter called `_hungarianMap` which can be accessed on the source object.
	                 *  @param {object} o
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnHungarianMap(o) {
	                    var
	                        hungarian = 'a aa ai ao as b fn i m o s ',
	                        match,
	                        newKey,
	                        map = {};

	                    $.each(o, function (key, val) {
	                        match = key.match(/^([^A-Z]+?)([A-Z])/);

	                        if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
	                            newKey = key.replace(match[0], match[2].toLowerCase());
	                            map[newKey] = key;

	                            if (match[1] === 'o') {
	                                _fnHungarianMap(o[key]);
	                            }
	                        }
	                    });

	                    o._hungarianMap = map;
	                }


	                /**
	                 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	                 * created by _fnHungarianMap.
	                 *  @param {object} src The model object which holds all parameters that can be
	                 *    mapped.
	                 *  @param {object} user The object to convert from camel case to Hungarian.
	                 *  @param {boolean} force When set to `true`, properties which already have a
	                 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	                 *    won't be.
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnCamelToHungarian(src, user, force) {
	                    if (!src._hungarianMap) {
	                        _fnHungarianMap(src);
	                    }

	                    var hungarianKey;

	                    $.each(user, function (key, val) {
	                        hungarianKey = src._hungarianMap[key];

	                        if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
	                            // For objects, we need to buzz down into the object to copy parameters
	                            if (hungarianKey.charAt(0) === 'o') {
	                                // Copy the camelCase options over to the hungarian
	                                if (!user[hungarianKey]) {
	                                    user[hungarianKey] = {};
	                                }
	                                $.extend(true, user[hungarianKey], user[key]);

	                                _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
	                            }
	                            else {
	                                user[hungarianKey] = user[key];
	                            }
	                        }
	                    });
	                }


	                /**
	                 * Language compatibility - when certain options are given, and others aren't, we
	                 * need to duplicate the values over, in order to provide backwards compatibility
	                 * with older language files.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnLanguageCompat(lang) {
	                    var defaults = DataTable.defaults.oLanguage;
	                    var zeroRecords = lang.sZeroRecords;

	                    /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
	                     * sZeroRecords - assuming that is given.
	                     */
	                    if (!lang.sEmptyTable && zeroRecords &&
	                        defaults.sEmptyTable === "No data available in table") {
	                        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
	                    }

	                    /* Likewise with loading records */
	                    if (!lang.sLoadingRecords && zeroRecords &&
	                        defaults.sLoadingRecords === "Loading...") {
	                        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
	                    }

	                    // Old parameter name of the thousands separator mapped onto the new
	                    if (lang.sInfoThousands) {
	                        lang.sThousands = lang.sInfoThousands;
	                    }

	                    var decimal = lang.sDecimal;
	                    if (decimal) {
	                        _addNumericSort(decimal);
	                    }
	                }


	                /**
	                 * Map one parameter onto another
	                 *  @param {object} o Object to map
	                 *  @param {*} knew The new parameter name
	                 *  @param {*} old The old parameter name
	                 */
	                var _fnCompatMap = function (o, knew, old) {
	                    if (o[knew] !== undefined) {
	                        o[old] = o[knew];
	                    }
	                };


	                /**
	                 * Provide backwards compatibility for the main DT options. Note that the new
	                 * options are mapped onto the old parameters, so this is an external interface
	                 * change only.
	                 *  @param {object} init Object to map
	                 */
	                function _fnCompatOpts(init) {
	                    _fnCompatMap(init, 'ordering', 'bSort');
	                    _fnCompatMap(init, 'orderMulti', 'bSortMulti');
	                    _fnCompatMap(init, 'orderClasses', 'bSortClasses');
	                    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
	                    _fnCompatMap(init, 'order', 'aaSorting');
	                    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
	                    _fnCompatMap(init, 'paging', 'bPaginate');
	                    _fnCompatMap(init, 'pagingType', 'sPaginationType');
	                    _fnCompatMap(init, 'pageLength', 'iDisplayLength');
	                    _fnCompatMap(init, 'searching', 'bFilter');

	                    // Column search objects are in an array, so it needs to be converted
	                    // element by element
	                    var searchCols = init.aoSearchCols;

	                    if (searchCols) {
	                        for (var i = 0, ien = searchCols.length ; i < ien ; i++) {
	                            if (searchCols[i]) {
	                                _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
	                            }
	                        }
	                    }
	                }


	                /**
	                 * Provide backwards compatibility for column options. Note that the new options
	                 * are mapped onto the old parameters, so this is an external interface change
	                 * only.
	                 *  @param {object} init Object to map
	                 */
	                function _fnCompatCols(init) {
	                    _fnCompatMap(init, 'orderable', 'bSortable');
	                    _fnCompatMap(init, 'orderData', 'aDataSort');
	                    _fnCompatMap(init, 'orderSequence', 'asSorting');
	                    _fnCompatMap(init, 'orderDataType', 'sortDataType');

	                    // orderData can be given as an integer
	                    var dataSort = init.aDataSort;
	                    if (dataSort && !$.isArray(dataSort)) {
	                        init.aDataSort = [dataSort];
	                    }
	                }


	                /**
	                 * Browser feature detection for capabilities, quirks
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnBrowserDetect(settings) {
	                    var browser = settings.oBrowser;

	                    // Scrolling feature / quirks detection
	                    var n = $('<div/>')
	                        .css({
	                            position: 'absolute',
	                            top: 0,
	                            left: 0,
	                            height: 1,
	                            width: 1,
	                            overflow: 'hidden'
	                        })
	                        .append(
	                            $('<div/>')
	                                .css({
	                                    position: 'absolute',
	                                    top: 1,
	                                    left: 1,
	                                    width: 100,
	                                    overflow: 'scroll'
	                                })
	                                .append(
	                                    $('<div class="test"/>')
	                                        .css({
	                                            width: '100%',
	                                            height: 10
	                                        })
	                                )
	                        )
	                        .appendTo('body');

	                    var test = n.find('.test');

	                    // IE6/7 will oversize a width 100% element inside a scrolling element, to
	                    // include the width of the scrollbar, while other browsers ensure the inner
	                    // element is contained without forcing scrolling
	                    browser.bScrollOversize = test[0].offsetWidth === 100;

	                    // In rtl text layout, some browsers (most, but not all) will place the
	                    // scrollbar on the left, rather than the right.
	                    browser.bScrollbarLeft = Math.round(test.offset().left) !== 1;

	                    n.remove();
	                }


	                /**
	                 * Array.prototype reduce[Right] method, used for browsers which don't support
	                 * JS 1.6. Done this way to reduce code size, since we iterate either way
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnReduce(that, fn, init, start, end, inc) {
	                    var
	                        i = start,
	                        value,
	                        isSet = false;

	                    if (init !== undefined) {
	                        value = init;
	                        isSet = true;
	                    }

	                    while (i !== end) {
	                        if (!that.hasOwnProperty(i)) {
	                            continue;
	                        }

	                        value = isSet ?
	                            fn(value, that[i], i, that) :
	                            that[i];

	                        isSet = true;
	                        i += inc;
	                    }

	                    return value;
	                }

	                /**
	                 * Add a column to the list used for the table with default values
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {node} nTh The th element for this column
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAddColumn(oSettings, nTh) {
	                    // Add column to aoColumns array
	                    var oDefaults = DataTable.defaults.column;
	                    var iCol = oSettings.aoColumns.length;
	                    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
	                        "nTh": nTh ? nTh : document.createElement('th'),
	                        "sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
	                        "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
	                        "mData": oDefaults.mData ? oDefaults.mData : iCol,
	                        idx: iCol
	                    });
	                    oSettings.aoColumns.push(oCol);

	                    // Add search object for column specific search. Note that the `searchCols[ iCol ]`
	                    // passed into extend can be undefined. This allows the user to give a default
	                    // with only some of the parameters defined, and also not give a default
	                    var searchCols = oSettings.aoPreSearchCols;
	                    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

	                    // Use the default column options function to initialise classes etc
	                    _fnColumnOptions(oSettings, iCol, $(nTh).data());
	                }


	                /**
	                 * Apply options for a column
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {int} iCol column index to consider
	                 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnColumnOptions(oSettings, iCol, oOptions) {
	                    var oCol = oSettings.aoColumns[iCol];
	                    var oClasses = oSettings.oClasses;
	                    var th = $(oCol.nTh);

	                    // Try to get width information from the DOM. We can't get it from CSS
	                    // as we'd need to parse the CSS stylesheet. `width` option can override
	                    if (!oCol.sWidthOrig) {
	                        // Width attribute
	                        oCol.sWidthOrig = th.attr('width') || null;

	                        // Style attribute
	                        var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
	                        if (t) {
	                            oCol.sWidthOrig = t[1];
	                        }
	                    }

	                    /* User specified column options */
	                    if (oOptions !== undefined && oOptions !== null) {
	                        // Backwards compatibility
	                        _fnCompatCols(oOptions);

	                        // Map camel case parameters to their Hungarian counterparts
	                        _fnCamelToHungarian(DataTable.defaults.column, oOptions);

	                        /* Backwards compatibility for mDataProp */
	                        if (oOptions.mDataProp !== undefined && !oOptions.mData) {
	                            oOptions.mData = oOptions.mDataProp;
	                        }

	                        if (oOptions.sType) {
	                            oCol._sManualType = oOptions.sType;
	                        }

	                        // `class` is a reserved word in Javascript, so we need to provide
	                        // the ability to use a valid name for the camel case input
	                        if (oOptions.className && !oOptions.sClass) {
	                            oOptions.sClass = oOptions.className;
	                        }

	                        $.extend(oCol, oOptions);
	                        _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

	                        /* iDataSort to be applied (backwards compatibility), but aDataSort will take
	                         * priority if defined
	                         */
	                        if (oOptions.iDataSort !== undefined) {
	                            oCol.aDataSort = [oOptions.iDataSort];
	                        }
	                        _fnMap(oCol, oOptions, "aDataSort");
	                    }

	                    /* Cache the data get and set functions for speed */
	                    var mDataSrc = oCol.mData;
	                    var mData = _fnGetObjectDataFn(mDataSrc);
	                    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

	                    var attrTest = function (src) {
	                        return typeof src === 'string' && src.indexOf('@') !== -1;
	                    };
	                    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (
	                        attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
	                    );

	                    oCol.fnGetData = function (rowData, type, meta) {
	                        var innerData = mData(rowData, type, undefined, meta);

	                        return mRender && type ?
	                            mRender(innerData, type, rowData, meta) :
	                            innerData;
	                    };
	                    oCol.fnSetData = function (rowData, val, meta) {
	                        return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
	                    };

	                    // Indicate if DataTables should read DOM data as an object or array
	                    // Used in _fnGetRowElements
	                    if (typeof mDataSrc !== 'number') {
	                        oSettings._rowReadObject = true;
	                    }

	                    /* Feature sorting overrides column specific when off */
	                    if (!oSettings.oFeatures.bSort) {
	                        oCol.bSortable = false;
	                        th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
	                    }

	                    /* Check that the class assignment is correct for sorting */
	                    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
	                    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
	                    if (!oCol.bSortable || (!bAsc && !bDesc)) {
	                        oCol.sSortingClass = oClasses.sSortableNone;
	                        oCol.sSortingClassJUI = "";
	                    }
	                    else if (bAsc && !bDesc) {
	                        oCol.sSortingClass = oClasses.sSortableAsc;
	                        oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
	                    }
	                    else if (!bAsc && bDesc) {
	                        oCol.sSortingClass = oClasses.sSortableDesc;
	                        oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
	                    }
	                    else {
	                        oCol.sSortingClass = oClasses.sSortable;
	                        oCol.sSortingClassJUI = oClasses.sSortJUI;
	                    }
	                }


	                /**
	                 * Adjust the table column widths for new data. Note: you would probably want to
	                 * do a redraw after calling this function!
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAdjustColumnSizing(settings) {
	                    /* Not interested in doing column width calculation if auto-width is disabled */
	                    if (settings.oFeatures.bAutoWidth !== false) {
	                        var columns = settings.aoColumns;

	                        _fnCalculateColumnWidths(settings);
	                        for (var i = 0, iLen = columns.length ; i < iLen ; i++) {
	                            columns[i].nTh.style.width = columns[i].sWidth;
	                        }
	                    }

	                    var scroll = settings.oScroll;
	                    if (scroll.sY !== '' || scroll.sX !== '') {
	                        _fnScrollDraw(settings);
	                    }

	                    _fnCallbackFire(settings, null, 'column-sizing', [settings]);
	                }


	                /**
	                 * Covert the index of a visible column to the index in the data array (take account
	                 * of hidden columns)
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {int} iMatch Visible column index to lookup
	                 *  @returns {int} i the data index
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnVisibleToColumnIndex(oSettings, iMatch) {
	                    var aiVis = _fnGetColumns(oSettings, 'bVisible');

	                    return typeof aiVis[iMatch] === 'number' ?
	                        aiVis[iMatch] :
	                        null;
	                }


	                /**
	                 * Covert the index of an index in the data array and convert it to the visible
	                 *   column index (take account of hidden columns)
	                 *  @param {int} iMatch Column index to lookup
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns {int} i the data index
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnColumnIndexToVisible(oSettings, iMatch) {
	                    var aiVis = _fnGetColumns(oSettings, 'bVisible');
	                    var iPos = $.inArray(iMatch, aiVis);

	                    return iPos !== -1 ? iPos : null;
	                }


	                /**
	                 * Get the number of visible columns
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns {int} i the number of visible columns
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnVisbleColumns(oSettings) {
	                    return _fnGetColumns(oSettings, 'bVisible').length;
	                }


	                /**
	                 * Get an array of column indexes that match a given property
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {string} sParam Parameter in aoColumns to look for - typically
	                 *    bVisible or bSearchable
	                 *  @returns {array} Array of indexes with matched properties
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetColumns(oSettings, sParam) {
	                    var a = [];

	                    $.map(oSettings.aoColumns, function (val, i) {
	                        if (val[sParam]) {
	                            a.push(i);
	                        }
	                    });

	                    return a;
	                }


	                /**
	                 * Calculate the 'type' of a column
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnColumnTypes(settings) {
	                    var columns = settings.aoColumns;
	                    var data = settings.aoData;
	                    var types = DataTable.ext.type.detect;
	                    var i, ien, j, jen, k, ken;
	                    var col, cell, detectedType, cache;

	                    // For each column, spin over the 
	                    for (i = 0, ien = columns.length ; i < ien ; i++) {
	                        col = columns[i];
	                        cache = [];

	                        if (!col.sType && col._sManualType) {
	                            col.sType = col._sManualType;
	                        }
	                        else if (!col.sType) {
	                            for (j = 0, jen = types.length ; j < jen ; j++) {
	                                for (k = 0, ken = data.length ; k < ken ; k++) {
	                                    // Use a cache array so we only need to get the type data
	                                    // from the formatter once (when using multiple detectors)
	                                    if (cache[k] === undefined) {
	                                        cache[k] = _fnGetCellData(settings, k, i, 'type');
	                                    }

	                                    detectedType = types[j](cache[k], settings);

	                                    // If null, then this type can't apply to this column, so
	                                    // rather than testing all cells, break out. There is an
	                                    // exception for the last type which is `html`. We need to
	                                    // scan all rows since it is possible to mix string and HTML
	                                    // types
	                                    if (!detectedType && j !== types.length - 1) {
	                                        break;
	                                    }

	                                    // Only a single match is needed for html type since it is
	                                    // bottom of the pile and very similar to string
	                                    if (detectedType === 'html') {
	                                        break;
	                                    }
	                                }

	                                // Type is valid for all data points in the column - use this
	                                // type
	                                if (detectedType) {
	                                    col.sType = detectedType;
	                                    break;
	                                }
	                            }

	                            // Fall back - if no type was detected, always use string
	                            if (!col.sType) {
	                                col.sType = 'string';
	                            }
	                        }
	                    }
	                }


	                /**
	                 * Take the column definitions and static columns arrays and calculate how
	                 * they relate to column indexes. The callback function will then apply the
	                 * definition found for a column to a suitable configuration object.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	                 *  @param {array} aoCols The aoColumns array that defines columns individually
	                 *  @param {function} fn Callback function - takes two parameters, the calculated
	                 *    column index and the definition for that column.
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
	                    var i, iLen, j, jLen, k, kLen, def;
	                    var columns = oSettings.aoColumns;

	                    // Column definitions with aTargets
	                    if (aoColDefs) {
	                        /* Loop over the definitions array - loop in reverse so first instance has priority */
	                        for (i = aoColDefs.length - 1 ; i >= 0 ; i--) {
	                            def = aoColDefs[i];

	                            /* Each definition can target multiple columns, as it is an array */
	                            var aTargets = def.targets !== undefined ?
	                                def.targets :
	                                def.aTargets;

	                            if (!$.isArray(aTargets)) {
	                                aTargets = [aTargets];
	                            }

	                            for (j = 0, jLen = aTargets.length ; j < jLen ; j++) {
	                                if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
	                                    /* Add columns that we don't yet know about */
	                                    while (columns.length <= aTargets[j]) {
	                                        _fnAddColumn(oSettings);
	                                    }

	                                    /* Integer, basic index */
	                                    fn(aTargets[j], def);
	                                }
	                                else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
	                                    /* Negative integer, right to left column counting */
	                                    fn(columns.length + aTargets[j], def);
	                                }
	                                else if (typeof aTargets[j] === 'string') {
	                                    /* Class name matching on TH element */
	                                    for (k = 0, kLen = columns.length ; k < kLen ; k++) {
	                                        if (aTargets[j] == "_all" ||
	                                             $(columns[k].nTh).hasClass(aTargets[j])) {
	                                            fn(k, def);
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }

	                    // Statically defined columns array
	                    if (aoCols) {
	                        for (i = 0, iLen = aoCols.length ; i < iLen ; i++) {
	                            fn(i, aoCols[i]);
	                        }
	                    }
	                }

	                /**
	                 * Add a data array to the table, creating DOM node etc. This is the parallel to
	                 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	                 * DOM source.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {array} aData data array to be added
	                 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	                 *    DataTables will create a row automatically
	                 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	                 *    if nTr is.
	                 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAddData(oSettings, aDataIn, nTr, anTds) {
	                    /* Create the object for storing information about this new row */
	                    var iRow = oSettings.aoData.length;
	                    var oData = $.extend(true, {}, DataTable.models.oRow, {
	                        src: nTr ? 'dom' : 'data'
	                    });

	                    oData._aData = aDataIn;
	                    oSettings.aoData.push(oData);

	                    /* Create the cells */
	                    var nTd, sThisType;
	                    var columns = oSettings.aoColumns;
	                    for (var i = 0, iLen = columns.length ; i < iLen ; i++) {
	                        // When working with a row, the data source object must be populated. In
	                        // all other cases, the data source object is already populated, so we
	                        // don't overwrite it, which might break bindings etc
	                        if (nTr) {
	                            _fnSetCellData(oSettings, iRow, i, _fnGetCellData(oSettings, iRow, i));
	                        }
	                        columns[i].sType = null;
	                    }

	                    /* Add to the display array */
	                    oSettings.aiDisplayMaster.push(iRow);

	                    /* Create the DOM information, or register it if already present */
	                    if (nTr || !oSettings.oFeatures.bDeferRender) {
	                        _fnCreateTr(oSettings, iRow, nTr, anTds);
	                    }

	                    return iRow;
	                }


	                /**
	                 * Add one or more TR elements to the table. Generally we'd expect to
	                 * use this for reading data from a DOM sourced table, but it could be
	                 * used for an TR element. Note that if a TR is given, it is used (i.e.
	                 * it is not cloned).
	                 *  @param {object} settings dataTables settings object
	                 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	                 *  @returns {array} Array of indexes for the added rows
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAddTr(settings, trs) {
	                    var row;

	                    // Allow an individual node to be passed in
	                    if (!(trs instanceof $)) {
	                        trs = $(trs);
	                    }

	                    return trs.map(function (i, el) {
	                        row = _fnGetRowElements(settings, el);
	                        return _fnAddData(settings, row.data, el, row.cells);
	                    });
	                }


	                /**
	                 * Take a TR element and convert it to an index in aoData
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {node} n the TR element to find
	                 *  @returns {int} index if the node is found, null if not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnNodeToDataIndex(oSettings, n) {
	                    return (n._DT_RowIndex !== undefined) ? n._DT_RowIndex : null;
	                }


	                /**
	                 * Take a TD element and convert it into a column data index (not the visible index)
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {int} iRow The row number the TD/TH can be found in
	                 *  @param {node} n The TD/TH element to find
	                 *  @returns {int} index if the node is found, -1 if not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnNodeToColumnIndex(oSettings, iRow, n) {
	                    return $.inArray(n, oSettings.aoData[iRow].anCells);
	                }


	                /**
	                 * Get the data for a given cell from the internal cache, taking into account data mapping
	                 *  @param {object} settings dataTables settings object
	                 *  @param {int} rowIdx aoData row id
	                 *  @param {int} colIdx Column index
	                 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	                 *  @returns {*} Cell data
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetCellData(settings, rowIdx, colIdx, type) {
	                    var draw = settings.iDraw;
	                    var col = settings.aoColumns[colIdx];
	                    var rowData = settings.aoData[rowIdx]._aData;
	                    var defaultContent = col.sDefaultContent;
	                    var cellData = col.fnGetData(rowData, type, {
	                        settings: settings,
	                        row: rowIdx,
	                        col: colIdx
	                    });

	                    if (cellData === undefined) {
	                        if (settings.iDrawError != draw && defaultContent === null) {
	                            _fnLog(settings, 0, "Requested unknown parameter " +
	                                (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") +
	                                " for row " + rowIdx, 4);
	                            settings.iDrawError = draw;
	                        }
	                        return defaultContent;
	                    }

	                    /* When the data source is null, we can use default column data */
	                    if ((cellData === rowData || cellData === null) && defaultContent !== null) {
	                        cellData = defaultContent;
	                    }
	                    else if (typeof cellData === 'function') {
	                        // If the data source is a function, then we run it and use the return,
	                        // executing in the scope of the data object (for instances)
	                        return cellData.call(rowData);
	                    }

	                    if (cellData === null && type == 'display') {
	                        return '';
	                    }
	                    return cellData;
	                }


	                /**
	                 * Set the value for a specific cell, into the internal data cache
	                 *  @param {object} settings dataTables settings object
	                 *  @param {int} rowIdx aoData row id
	                 *  @param {int} colIdx Column index
	                 *  @param {*} val Value to set
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSetCellData(settings, rowIdx, colIdx, val) {
	                    var col = settings.aoColumns[colIdx];
	                    var rowData = settings.aoData[rowIdx]._aData;

	                    col.fnSetData(rowData, val, {
	                        settings: settings,
	                        row: rowIdx,
	                        col: colIdx
	                    });
	                }


	                // Private variable that is used to match action syntax in the data property object
	                var __reArray = /\[.*?\]$/;
	                var __reFn = /\(\)$/;

	                /**
	                 * Split string on periods, taking into account escaped periods
	                 * @param  {string} str String to split
	                 * @return {array} Split string
	                 */
	                function _fnSplitObjNotation(str) {
	                    return $.map(str.match(/(\\.|[^\.])+/g), function (s) {
	                        return s.replace(/\\./g, '.');
	                    });
	                }


	                /**
	                 * Return a function that can be used to get data from a source object, taking
	                 * into account the ability to use nested objects as a source
	                 *  @param {string|int|function} mSource The data source for the object
	                 *  @returns {function} Data get function
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetObjectDataFn(mSource) {
	                    if ($.isPlainObject(mSource)) {
	                        /* Build an object of get functions, and wrap them in a single call */
	                        var o = {};
	                        $.each(mSource, function (key, val) {
	                            if (val) {
	                                o[key] = _fnGetObjectDataFn(val);
	                            }
	                        });

	                        return function (data, type, row, meta) {
	                            var t = o[type] || o._;
	                            return t !== undefined ?
	                                t(data, type, row, meta) :
	                                data;
	                        };
	                    }
	                    else if (mSource === null) {
	                        /* Give an empty string for rendering / sorting etc */
	                        return function (data) { // type, row and meta also passed, but not used
	                            return data;
	                        };
	                    }
	                    else if (typeof mSource === 'function') {
	                        return function (data, type, row, meta) {
	                            return mSource(data, type, row, meta);
	                        };
	                    }
	                    else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
	                              mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
	                        /* If there is a . in the source string then the data source is in a
	                         * nested object so we loop over the data for each level to get the next
	                         * level down. On each loop we test for undefined, and if found immediately
	                         * return. This allows entire objects to be missing and sDefaultContent to
	                         * be used if defined, rather than throwing an error
	                         */
	                        var fetchData = function (data, type, src) {
	                            var arrayNotation, funcNotation, out, innerSrc;

	                            if (src !== "") {
	                                var a = _fnSplitObjNotation(src);

	                                for (var i = 0, iLen = a.length ; i < iLen ; i++) {
	                                    // Check if we are dealing with special notation
	                                    arrayNotation = a[i].match(__reArray);
	                                    funcNotation = a[i].match(__reFn);

	                                    if (arrayNotation) {
	                                        // Array notation
	                                        a[i] = a[i].replace(__reArray, '');

	                                        // Condition allows simply [] to be passed in
	                                        if (a[i] !== "") {
	                                            data = data[a[i]];
	                                        }
	                                        out = [];

	                                        // Get the remainder of the nested object to get
	                                        a.splice(0, i + 1);
	                                        innerSrc = a.join('.');

	                                        // Traverse each entry in the array getting the properties requested
	                                        for (var j = 0, jLen = data.length ; j < jLen ; j++) {
	                                            out.push(fetchData(data[j], type, innerSrc));
	                                        }

	                                        // If a string is given in between the array notation indicators, that
	                                        // is used to join the strings together, otherwise an array is returned
	                                        var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
	                                        data = (join === "") ? out : out.join(join);

	                                        // The inner call to fetchData has already traversed through the remainder
	                                        // of the source requested, so we exit from the loop
	                                        break;
	                                    }
	                                    else if (funcNotation) {
	                                        // Function call
	                                        a[i] = a[i].replace(__reFn, '');
	                                        data = data[a[i]]();
	                                        continue;
	                                    }

	                                    if (data === null || data[a[i]] === undefined) {
	                                        return undefined;
	                                    }
	                                    data = data[a[i]];
	                                }
	                            }

	                            return data;
	                        };

	                        return function (data, type) { // row and meta also passed, but not used
	                            return fetchData(data, type, mSource);
	                        };
	                    }
	                    else {
	                        /* Array or flat object mapping */
	                        return function (data, type) { // row and meta also passed, but not used
	                            return data[mSource];
	                        };
	                    }
	                }


	                /**
	                 * Return a function that can be used to set data from a source object, taking
	                 * into account the ability to use nested objects as a source
	                 *  @param {string|int|function} mSource The data source for the object
	                 *  @returns {function} Data set function
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSetObjectDataFn(mSource) {
	                    if ($.isPlainObject(mSource)) {
	                        /* Unlike get, only the underscore (global) option is used for for
	                         * setting data since we don't know the type here. This is why an object
	                         * option is not documented for `mData` (which is read/write), but it is
	                         * for `mRender` which is read only.
	                         */
	                        return _fnSetObjectDataFn(mSource._);
	                    }
	                    else if (mSource === null) {
	                        /* Nothing to do when the data source is null */
	                        return function () { };
	                    }
	                    else if (typeof mSource === 'function') {
	                        return function (data, val, meta) {
	                            mSource(data, 'set', val, meta);
	                        };
	                    }
	                    else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
	                              mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
	                        /* Like the get, we need to get data from a nested object */
	                        var setData = function (data, val, src) {
	                            var a = _fnSplitObjNotation(src), b;
	                            var aLast = a[a.length - 1];
	                            var arrayNotation, funcNotation, o, innerSrc;

	                            for (var i = 0, iLen = a.length - 1 ; i < iLen ; i++) {
	                                // Check if we are dealing with an array notation request
	                                arrayNotation = a[i].match(__reArray);
	                                funcNotation = a[i].match(__reFn);

	                                if (arrayNotation) {
	                                    a[i] = a[i].replace(__reArray, '');
	                                    data[a[i]] = [];

	                                    // Get the remainder of the nested object to set so we can recurse
	                                    b = a.slice();
	                                    b.splice(0, i + 1);
	                                    innerSrc = b.join('.');

	                                    // Traverse each entry in the array setting the properties requested
	                                    for (var j = 0, jLen = val.length ; j < jLen ; j++) {
	                                        o = {};
	                                        setData(o, val[j], innerSrc);
	                                        data[a[i]].push(o);
	                                    }

	                                    // The inner call to setData has already traversed through the remainder
	                                    // of the source and has set the data, thus we can exit here
	                                    return;
	                                }
	                                else if (funcNotation) {
	                                    // Function call
	                                    a[i] = a[i].replace(__reFn, '');
	                                    data = data[a[i]](val);
	                                }

	                                // If the nested object doesn't currently exist - since we are
	                                // trying to set the value - create it
	                                if (data[a[i]] === null || data[a[i]] === undefined) {
	                                    data[a[i]] = {};
	                                }
	                                data = data[a[i]];
	                            }

	                            // Last item in the input - i.e, the actual set
	                            if (aLast.match(__reFn)) {
	                                // Function call
	                                data = data[aLast.replace(__reFn, '')](val);
	                            }
	                            else {
	                                // If array notation is used, we just want to strip it and use the property name
	                                // and assign the value. If it isn't used, then we get the result we want anyway
	                                data[aLast.replace(__reArray, '')] = val;
	                            }
	                        };

	                        return function (data, val) { // meta is also passed in, but not used
	                            return setData(data, val, mSource);
	                        };
	                    }
	                    else {
	                        /* Array or flat object mapping */
	                        return function (data, val) { // meta is also passed in, but not used
	                            data[mSource] = val;
	                        };
	                    }
	                }


	                /**
	                 * Return an array with the full table data
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns array {array} aData Master data array
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetDataMaster(settings) {
	                    return _pluck(settings.aoData, '_aData');
	                }


	                /**
	                 * Nuke the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnClearTable(settings) {
	                    settings.aoData.length = 0;
	                    settings.aiDisplayMaster.length = 0;
	                    settings.aiDisplay.length = 0;
	                }


	                /**
	                * Take an array of integers (index array) and remove a target integer (value - not
	                * the key!)
	                *  @param {array} a Index array to target
	                *  @param {int} iTarget value to find
	                *  @memberof DataTable#oApi
	                */
	                function _fnDeleteIndex(a, iTarget, splice) {
	                    var iTargetIndex = -1;

	                    for (var i = 0, iLen = a.length ; i < iLen ; i++) {
	                        if (a[i] == iTarget) {
	                            iTargetIndex = i;
	                        }
	                        else if (a[i] > iTarget) {
	                            a[i]--;
	                        }
	                    }

	                    if (iTargetIndex != -1 && splice === undefined) {
	                        a.splice(iTargetIndex, 1);
	                    }
	                }


	                /**
	                 * Mark cached data as invalid such that a re-read of the data will occur when
	                 * the cached data is next requested. Also update from the data source object.
	                 *
	                 * @param {object} settings DataTables settings object
	                 * @param {int}    rowIdx   Row index to invalidate
	                 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	                 *     or 'data'
	                 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	                 *     row will be invalidated
	                 * @memberof DataTable#oApi
	                 *
	                 * @todo For the modularisation of v1.11 this will need to become a callback, so
	                 *   the sort and filter methods can subscribe to it. That will required
	                 *   initialisation options for sorting, which is why it is not already baked in
	                 */
	                function _fnInvalidate(settings, rowIdx, src, colIdx) {
	                    var row = settings.aoData[rowIdx];
	                    var i, ien;
	                    var cellWrite = function (cell, col) {
	                        // This is very frustrating, but in IE if you just write directly
	                        // to innerHTML, and elements that are overwritten are GC'ed,
	                        // even if there is a reference to them elsewhere
	                        while (cell.childNodes.length) {
	                            cell.removeChild(cell.firstChild);
	                        }

	                        cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
	                    };

	                    // Are we reading last data from DOM or the data object?
	                    if (src === 'dom' || ((!src || src === 'auto') && row.src === 'dom')) {
	                        // Read the data from the DOM
	                        row._aData = _fnGetRowElements(
	                                settings, row, colIdx, colIdx === undefined ? undefined : row._aData
	                            )
	                            .data;
	                    }
	                    else {
	                        // Reading from data object, update the DOM
	                        var cells = row.anCells;

	                        if (cells) {
	                            if (colIdx !== undefined) {
	                                cellWrite(cells[colIdx], colIdx);
	                            }
	                            else {
	                                for (i = 0, ien = cells.length ; i < ien ; i++) {
	                                    cellWrite(cells[i], i);
	                                }
	                            }
	                        }
	                    }

	                    // For both row and cell invalidation, the cached data for sorting and
	                    // filtering is nulled out
	                    row._aSortData = null;
	                    row._aFilterData = null;

	                    // Invalidate the type for a specific column (if given) or all columns since
	                    // the data might have changed
	                    var cols = settings.aoColumns;
	                    if (colIdx !== undefined) {
	                        cols[colIdx].sType = null;
	                    }
	                    else {
	                        for (i = 0, ien = cols.length ; i < ien ; i++) {
	                            cols[i].sType = null;
	                        }

	                        // Update DataTables special `DT_*` attributes for the row
	                        _fnRowAttributes(row);
	                    }
	                }


	                /**
	                 * Build a data source object from an HTML row, reading the contents of the
	                 * cells that are in the row.
	                 *
	                 * @param {object} settings DataTables settings object
	                 * @param {node|object} TR element from which to read data or existing row
	                 *   object from which to re-read the data from the cells
	                 * @param {int} [colIdx] Optional column index
	                 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	                 *   parameter should also be given and will be used to write the data into.
	                 *   Only the column in question will be written
	                 * @returns {object} Object with two parameters: `data` the data read, in
	                 *   document order, and `cells` and array of nodes (they can be useful to the
	                 *   caller, so rather than needing a second traversal to get them, just return
	                 *   them from here).
	                 * @memberof DataTable#oApi
	                 */
	                function _fnGetRowElements(settings, row, colIdx, d) {
	                    var
	                        tds = [],
	                        td = row.firstChild,
	                        name, col, o, i = 0, contents,
	                        columns = settings.aoColumns,
	                        objectRead = settings._rowReadObject;

	                    // Allow the data object to be passed in, or construct
	                    d = d || objectRead ? {} : [];

	                    var attr = function (str, td) {
	                        if (typeof str === 'string') {
	                            var idx = str.indexOf('@');

	                            if (idx !== -1) {
	                                var attr = str.substring(idx + 1);
	                                var setter = _fnSetObjectDataFn(str);
	                                setter(d, td.getAttribute(attr));
	                            }
	                        }
	                    };

	                    // Read data from a cell and store into the data object
	                    var cellProcess = function (cell) {
	                        if (colIdx === undefined || colIdx === i) {
	                            col = columns[i];
	                            contents = $.trim(cell.innerHTML);

	                            if (col && col._bAttrSrc) {
	                                var setter = _fnSetObjectDataFn(col.mData._);
	                                setter(d, contents);

	                                attr(col.mData.sort, cell);
	                                attr(col.mData.type, cell);
	                                attr(col.mData.filter, cell);
	                            }
	                            else {
	                                // Depending on the `data` option for the columns the data can
	                                // be read to either an object or an array.
	                                if (objectRead) {
	                                    if (!col._setter) {
	                                        // Cache the setter function
	                                        col._setter = _fnSetObjectDataFn(col.mData);
	                                    }
	                                    col._setter(d, contents);
	                                }
	                                else {
	                                    d[i] = contents;
	                                }
	                            }
	                        }

	                        i++;
	                    };

	                    if (td) {
	                        // `tr` element was passed in
	                        while (td) {
	                            name = td.nodeName.toUpperCase();

	                            if (name == "TD" || name == "TH") {
	                                cellProcess(td);
	                                tds.push(td);
	                            }

	                            td = td.nextSibling;
	                        }
	                    }
	                    else {
	                        // Existing row object passed in
	                        tds = row.anCells;

	                        for (var j = 0, jen = tds.length ; j < jen ; j++) {
	                            cellProcess(tds[j]);
	                        }
	                    }

	                    return {
	                        data: d,
	                        cells: tds
	                    };
	                }
	                /**
	                 * Create a new TR element (and it's TD children) for a row
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {int} iRow Row to consider
	                 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	                 *    DataTables will create a row automatically
	                 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	                 *    if nTr is.
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
	                    var
	                        row = oSettings.aoData[iRow],
	                        rowData = row._aData,
	                        cells = [],
	                        nTr, nTd, oCol,
	                        i, iLen;

	                    if (row.nTr === null) {
	                        nTr = nTrIn || document.createElement('tr');

	                        row.nTr = nTr;
	                        row.anCells = cells;

	                        /* Use a private property on the node to allow reserve mapping from the node
	                         * to the aoData array for fast look up
	                         */
	                        nTr._DT_RowIndex = iRow;

	                        /* Special parameters can be given by the data source to be used on the row */
	                        _fnRowAttributes(row);

	                        /* Process each column */
	                        for (i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
	                            oCol = oSettings.aoColumns[i];

	                            nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
	                            cells.push(nTd);

	                            // Need to create the HTML if new, or if a rendering function is defined
	                            if (!nTrIn || oCol.mRender || oCol.mData !== i) {
	                                nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
	                            }

	                            /* Add user defined class */
	                            if (oCol.sClass) {
	                                nTd.className += ' ' + oCol.sClass;
	                            }

	                            // Visibility - add or remove as required
	                            if (oCol.bVisible && !nTrIn) {
	                                nTr.appendChild(nTd);
	                            }
	                            else if (!oCol.bVisible && nTrIn) {
	                                nTd.parentNode.removeChild(nTd);
	                            }

	                            if (oCol.fnCreatedCell) {
	                                oCol.fnCreatedCell.call(oSettings.oInstance,
	                                    nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i
	                                );
	                            }
	                        }

	                        _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
	                    }

	                    // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
	                    // and deployed
	                    row.nTr.setAttribute('role', 'row');
	                }


	                /**
	                 * Add attributes to a row based on the special `DT_*` parameters in a data
	                 * source object.
	                 *  @param {object} DataTables row object for the row to be modified
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnRowAttributes(row) {
	                    var tr = row.nTr;
	                    var data = row._aData;

	                    if (tr) {
	                        if (data.DT_RowId) {
	                            tr.id = data.DT_RowId;
	                        }

	                        if (data.DT_RowClass) {
	                            // Remove any classes added by DT_RowClass before
	                            var a = data.DT_RowClass.split(' ');
	                            row.__rowc = row.__rowc ?
	                                _unique(row.__rowc.concat(a)) :
	                                a;

	                            $(tr)
	                                .removeClass(row.__rowc.join(' '))
	                                .addClass(data.DT_RowClass);
	                        }

	                        if (data.DT_RowAttr) {
	                            $(tr).attr(data.DT_RowAttr);
	                        }

	                        if (data.DT_RowData) {
	                            $(tr).data(data.DT_RowData);
	                        }
	                    }
	                }


	                /**
	                 * Create the HTML header for the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnBuildHead(oSettings) {
	                    var i, ien, cell, row, column;
	                    var thead = oSettings.nTHead;
	                    var tfoot = oSettings.nTFoot;
	                    var createHeader = $('th, td', thead).length === 0;
	                    var classes = oSettings.oClasses;
	                    var columns = oSettings.aoColumns;

	                    if (createHeader) {
	                        row = $('<tr/>').appendTo(thead);
	                    }

	                    for (i = 0, ien = columns.length ; i < ien ; i++) {
	                        column = columns[i];
	                        cell = $(column.nTh).addClass(column.sClass);

	                        if (createHeader) {
	                            cell.appendTo(row);
	                        }

	                        // 1.11 move into sorting
	                        if (oSettings.oFeatures.bSort) {
	                            cell.addClass(column.sSortingClass);

	                            if (column.bSortable !== false) {
	                                cell
	                                    .attr('tabindex', oSettings.iTabIndex)
	                                    .attr('aria-controls', oSettings.sTableId);

	                                _fnSortAttachListener(oSettings, column.nTh, i);
	                            }
	                        }

	                        if (column.sTitle != cell.html()) {
	                            cell.html(column.sTitle);
	                        }

	                        _fnRenderer(oSettings, 'header')(
	                            oSettings, cell, column, classes
	                        );
	                    }

	                    if (createHeader) {
	                        _fnDetectHeader(oSettings.aoHeader, thead);
	                    }

	                    /* ARIA role for the rows */
	                    $(thead).find('>tr').attr('role', 'row');

	                    /* Deal with the footer - add classes if required */
	                    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
	                    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

	                    // Cache the footer cells. Note that we only take the cells from the first
	                    // row in the footer. If there is more than one row the user wants to
	                    // interact with, they need to use the table().foot() method. Note also this
	                    // allows cells to be used for multiple columns using colspan
	                    if (tfoot !== null) {
	                        var cells = oSettings.aoFooter[0];

	                        for (i = 0, ien = cells.length ; i < ien ; i++) {
	                            column = columns[i];
	                            column.nTf = cells[i].cell;

	                            if (column.sClass) {
	                                $(column.nTf).addClass(column.sClass);
	                            }
	                        }
	                    }
	                }


	                /**
	                 * Draw the header (or footer) element based on the column visibility states. The
	                 * methodology here is to use the layout array from _fnDetectHeader, modified for
	                 * the instantaneous column visibility, to construct the new layout. The grid is
	                 * traversed over cell at a time in a rows x columns grid fashion, although each
	                 * cell insert can cover multiple elements in the grid - which is tracks using the
	                 * aApplied array. Cell inserts in the grid will only occur where there isn't
	                 * already a cell in that position.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	                 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
	                    var i, iLen, j, jLen, k, kLen, n, nLocalTr;
	                    var aoLocal = [];
	                    var aApplied = [];
	                    var iColumns = oSettings.aoColumns.length;
	                    var iRowspan, iColspan;

	                    if (!aoSource) {
	                        return;
	                    }

	                    if (bIncludeHidden === undefined) {
	                        bIncludeHidden = false;
	                    }

	                    /* Make a copy of the master layout array, but without the visible columns in it */
	                    for (i = 0, iLen = aoSource.length ; i < iLen ; i++) {
	                        aoLocal[i] = aoSource[i].slice();
	                        aoLocal[i].nTr = aoSource[i].nTr;

	                        /* Remove any columns which are currently hidden */
	                        for (j = iColumns - 1 ; j >= 0 ; j--) {
	                            if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
	                                aoLocal[i].splice(j, 1);
	                            }
	                        }

	                        /* Prep the applied array - it needs an element for each row */
	                        aApplied.push([]);
	                    }

	                    for (i = 0, iLen = aoLocal.length ; i < iLen ; i++) {
	                        nLocalTr = aoLocal[i].nTr;

	                        /* All cells are going to be replaced, so empty out the row */
	                        if (nLocalTr) {
	                            while ((n = nLocalTr.firstChild)) {
	                                nLocalTr.removeChild(n);
	                            }
	                        }

	                        for (j = 0, jLen = aoLocal[i].length ; j < jLen ; j++) {
	                            iRowspan = 1;
	                            iColspan = 1;

	                            /* Check to see if there is already a cell (row/colspan) covering our target
	                             * insert point. If there is, then there is nothing to do.
	                             */
	                            if (aApplied[i][j] === undefined) {
	                                nLocalTr.appendChild(aoLocal[i][j].cell);
	                                aApplied[i][j] = 1;

	                                /* Expand the cell to cover as many rows as needed */
	                                while (aoLocal[i + iRowspan] !== undefined &&
	                                        aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
	                                    aApplied[i + iRowspan][j] = 1;
	                                    iRowspan++;
	                                }

	                                /* Expand the cell to cover as many columns as needed */
	                                while (aoLocal[i][j + iColspan] !== undefined &&
	                                        aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
	                                    /* Must update the applied array over the rows for the columns */
	                                    for (k = 0 ; k < iRowspan ; k++) {
	                                        aApplied[i + k][j + iColspan] = 1;
	                                    }
	                                    iColspan++;
	                                }

	                                /* Do the actual expansion in the DOM */
	                                $(aoLocal[i][j].cell)
	                                    .attr('rowspan', iRowspan)
	                                    .attr('colspan', iColspan);
	                            }
	                        }
	                    }
	                }


	                /**
	                 * Insert the required TR nodes into the table for display
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnDraw(oSettings) {
	                    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
	                    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
	                    if ($.inArray(false, aPreDraw) !== -1) {
	                        _fnProcessingDisplay(oSettings, false);
	                        return;
	                    }

	                    var i, iLen, n;
	                    var anRows = [];
	                    var iRowCount = 0;
	                    var asStripeClasses = oSettings.asStripeClasses;
	                    var iStripes = asStripeClasses.length;
	                    var iOpenRows = oSettings.aoOpenRows.length;
	                    var oLang = oSettings.oLanguage;
	                    var iInitDisplayStart = oSettings.iInitDisplayStart;
	                    var bServerSide = _fnDataSource(oSettings) == 'ssp';
	                    var aiDisplay = oSettings.aiDisplay;

	                    oSettings.bDrawing = true;

	                    /* Check and see if we have an initial draw position from state saving */
	                    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
	                        oSettings._iDisplayStart = bServerSide ?
	                            iInitDisplayStart :
	                            iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
	                                0 :
	                                iInitDisplayStart;

	                        oSettings.iInitDisplayStart = -1;
	                    }

	                    var iDisplayStart = oSettings._iDisplayStart;
	                    var iDisplayEnd = oSettings.fnDisplayEnd();

	                    /* Server-side processing draw intercept */
	                    if (oSettings.bDeferLoading) {
	                        oSettings.bDeferLoading = false;
	                        oSettings.iDraw++;
	                        _fnProcessingDisplay(oSettings, false);
	                    }
	                    else if (!bServerSide) {
	                        oSettings.iDraw++;
	                    }
	                    else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
	                        return;
	                    }

	                    if (aiDisplay.length !== 0) {
	                        var iStart = bServerSide ? 0 : iDisplayStart;
	                        var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

	                        for (var j = iStart ; j < iEnd ; j++) {
	                            var iDataIndex = aiDisplay[j];
	                            var aoData = oSettings.aoData[iDataIndex];
	                            if (aoData.nTr === null) {
	                                _fnCreateTr(oSettings, iDataIndex);
	                            }

	                            var nRow = aoData.nTr;

	                            /* Remove the old striping classes and then add the new one */
	                            if (iStripes !== 0) {
	                                var sStripe = asStripeClasses[iRowCount % iStripes];
	                                if (aoData._sRowStripe != sStripe) {
	                                    $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
	                                    aoData._sRowStripe = sStripe;
	                                }
	                            }

	                            // Row callback functions - might want to manipulate the row
	                            // iRowCount and j are not currently documented. Are they at all
	                            // useful?
	                            _fnCallbackFire(oSettings, 'aoRowCallback', null,
	                                [nRow, aoData._aData, iRowCount, j]);

	                            anRows.push(nRow);
	                            iRowCount++;
	                        }
	                    }
	                    else {
	                        /* Table is empty - create a row with an empty message in it */
	                        var sZero = oLang.sZeroRecords;
	                        if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
	                            sZero = oLang.sLoadingRecords;
	                        }
	                        else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
	                            sZero = oLang.sEmptyTable;
	                        }

	                        anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' })
	                            .append($('<td />', {
	                                'valign': 'top',
	                                'colSpan': _fnVisbleColumns(oSettings),
	                                'class': oSettings.oClasses.sRowEmpty
	                            }).html(sZero))[0];
	                    }

	                    /* Header and footer callbacks */
	                    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0],
	                        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

	                    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0],
	                        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

	                    var body = $(oSettings.nTBody);

	                    body.children().detach();
	                    body.append($(anRows));

	                    /* Call all required callback functions for the end of a draw */
	                    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);

	                    /* Draw is complete, sorting and filtering must be as well */
	                    oSettings.bSorted = false;
	                    oSettings.bFiltered = false;
	                    oSettings.bDrawing = false;
	                }


	                /**
	                 * Redraw the table - taking account of the various features which are enabled
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	                 *    the paging is reset to the first page
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnReDraw(settings, holdPosition) {
	                    var
	                        features = settings.oFeatures,
	                        sort = features.bSort,
	                        filter = features.bFilter;

	                    if (sort) {
	                        _fnSort(settings);
	                    }

	                    if (filter) {
	                        _fnFilterComplete(settings, settings.oPreviousSearch);
	                    }
	                    else {
	                        // No filtering, so we want to just use the display master
	                        settings.aiDisplay = settings.aiDisplayMaster.slice();
	                    }

	                    if (holdPosition !== true) {
	                        settings._iDisplayStart = 0;
	                    }

	                    // Let any modules know about the draw hold position state (used by
	                    // scrolling internally)
	                    settings._drawHold = holdPosition;

	                    _fnDraw(settings);

	                    settings._drawHold = false;
	                }


	                /**
	                 * Add the options to the page HTML for the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAddOptionsHtml(oSettings) {
	                    var classes = oSettings.oClasses;
	                    var table = $(oSettings.nTable);
	                    var holding = $('<div/>').insertBefore(table); // Holding element for speed
	                    var features = oSettings.oFeatures;

	                    // All DataTables are wrapped in a div
	                    var insert = $('<div/>', {
	                        id: oSettings.sTableId + '_wrapper',
	                        'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
	                    });

	                    oSettings.nHolding = holding[0];
	                    oSettings.nTableWrapper = insert[0];
	                    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

	                    /* Loop over the user set positioning and place the elements as needed */
	                    var aDom = oSettings.sDom.split('');
	                    var featureNode, cOption, nNewNode, cNext, sAttr, j;
	                    for (var i = 0 ; i < aDom.length ; i++) {
	                        featureNode = null;
	                        cOption = aDom[i];

	                        if (cOption == '<') {
	                            /* New container div */
	                            nNewNode = $('<div/>')[0];

	                            /* Check to see if we should append an id and/or a class name to the container */
	                            cNext = aDom[i + 1];
	                            if (cNext == "'" || cNext == '"') {
	                                sAttr = "";
	                                j = 2;
	                                while (aDom[i + j] != cNext) {
	                                    sAttr += aDom[i + j];
	                                    j++;
	                                }

	                                /* Replace jQuery UI constants @todo depreciated */
	                                if (sAttr == "H") {
	                                    sAttr = classes.sJUIHeader;
	                                }
	                                else if (sAttr == "F") {
	                                    sAttr = classes.sJUIFooter;
	                                }

	                                /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
	                                 * breaks the string into parts and applies them as needed
	                                 */
	                                if (sAttr.indexOf('.') != -1) {
	                                    var aSplit = sAttr.split('.');
	                                    nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
	                                    nNewNode.className = aSplit[1];
	                                }
	                                else if (sAttr.charAt(0) == "#") {
	                                    nNewNode.id = sAttr.substr(1, sAttr.length - 1);
	                                }
	                                else {
	                                    nNewNode.className = sAttr;
	                                }

	                                i += j; /* Move along the position array */
	                            }

	                            insert.append(nNewNode);
	                            insert = $(nNewNode);
	                        }
	                        else if (cOption == '>') {
	                            /* End container div */
	                            insert = insert.parent();
	                        }
	                            // @todo Move options into their own plugins?
	                        else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
	                            /* Length */
	                            featureNode = _fnFeatureHtmlLength(oSettings);
	                        }
	                        else if (cOption == 'f' && features.bFilter) {
	                            /* Filter */
	                            featureNode = _fnFeatureHtmlFilter(oSettings);
	                        }
	                        else if (cOption == 'r' && features.bProcessing) {
	                            /* pRocessing */
	                            featureNode = _fnFeatureHtmlProcessing(oSettings);
	                        }
	                        else if (cOption == 't') {
	                            /* Table */
	                            featureNode = _fnFeatureHtmlTable(oSettings);
	                        }
	                        else if (cOption == 'i' && features.bInfo) {
	                            /* Info */
	                            featureNode = _fnFeatureHtmlInfo(oSettings);
	                        }
	                        else if (cOption == 'p' && features.bPaginate) {
	                            /* Pagination */
	                            featureNode = _fnFeatureHtmlPaginate(oSettings);
	                        }
	                        else if (DataTable.ext.feature.length !== 0) {
	                            /* Plug-in features */
	                            var aoFeatures = DataTable.ext.feature;
	                            for (var k = 0, kLen = aoFeatures.length ; k < kLen ; k++) {
	                                if (cOption == aoFeatures[k].cFeature) {
	                                    featureNode = aoFeatures[k].fnInit(oSettings);
	                                    break;
	                                }
	                            }
	                        }

	                        /* Add to the 2D features array */
	                        if (featureNode) {
	                            var aanFeatures = oSettings.aanFeatures;

	                            if (!aanFeatures[cOption]) {
	                                aanFeatures[cOption] = [];
	                            }

	                            aanFeatures[cOption].push(featureNode);
	                            insert.append(featureNode);
	                        }
	                    }

	                    /* Built our DOM structure - replace the holding div with what we want */
	                    holding.replaceWith(insert);
	                }


	                /**
	                 * Use the DOM source to create up an array of header cells. The idea here is to
	                 * create a layout grid (array) of rows x columns, which contains a reference
	                 * to the cell that that point in the grid (regardless of col/rowspan), such that
	                 * any column / row could be removed and the new grid constructed
	                 *  @param array {object} aLayout Array to store the calculated layout in
	                 *  @param {node} nThead The header/footer element for the table
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnDetectHeader(aLayout, nThead) {
	                    var nTrs = $(nThead).children('tr');
	                    var nTr, nCell;
	                    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
	                    var bUnique;
	                    var fnShiftCol = function (a, i, j) {
	                        var k = a[i];
	                        while (k[j]) {
	                            j++;
	                        }
	                        return j;
	                    };

	                    aLayout.splice(0, aLayout.length);

	                    /* We know how many rows there are in the layout - so prep it */
	                    for (i = 0, iLen = nTrs.length ; i < iLen ; i++) {
	                        aLayout.push([]);
	                    }

	                    /* Calculate a layout array */
	                    for (i = 0, iLen = nTrs.length ; i < iLen ; i++) {
	                        nTr = nTrs[i];
	                        iColumn = 0;

	                        /* For every cell in the row... */
	                        nCell = nTr.firstChild;
	                        while (nCell) {
	                            if (nCell.nodeName.toUpperCase() == "TD" ||
	                                 nCell.nodeName.toUpperCase() == "TH") {
	                                /* Get the col and rowspan attributes from the DOM and sanitise them */
	                                iColspan = nCell.getAttribute('colspan') * 1;
	                                iRowspan = nCell.getAttribute('rowspan') * 1;
	                                iColspan = (!iColspan || iColspan === 0 || iColspan === 1) ? 1 : iColspan;
	                                iRowspan = (!iRowspan || iRowspan === 0 || iRowspan === 1) ? 1 : iRowspan;

	                                /* There might be colspan cells already in this row, so shift our target
	                                 * accordingly
	                                 */
	                                iColShifted = fnShiftCol(aLayout, i, iColumn);

	                                /* Cache calculation for unique columns */
	                                bUnique = iColspan === 1 ? true : false;

	                                /* If there is col / rowspan, copy the information into the layout grid */
	                                for (l = 0 ; l < iColspan ; l++) {
	                                    for (k = 0 ; k < iRowspan ; k++) {
	                                        aLayout[i + k][iColShifted + l] = {
	                                            "cell": nCell,
	                                            "unique": bUnique
	                                        };
	                                        aLayout[i + k].nTr = nTr;
	                                    }
	                                }
	                            }
	                            nCell = nCell.nextSibling;
	                        }
	                    }
	                }


	                /**
	                 * Get an array of unique th elements, one for each column
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {node} nHeader automatically detect the layout from this node - optional
	                 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	                 *  @returns array {node} aReturn list of unique th's
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
	                    var aReturn = [];
	                    if (!aLayout) {
	                        aLayout = oSettings.aoHeader;
	                        if (nHeader) {
	                            aLayout = [];
	                            _fnDetectHeader(aLayout, nHeader);
	                        }
	                    }

	                    for (var i = 0, iLen = aLayout.length ; i < iLen ; i++) {
	                        for (var j = 0, jLen = aLayout[i].length ; j < jLen ; j++) {
	                            if (aLayout[i][j].unique &&
	                                 (!aReturn[j] || !oSettings.bSortCellsTop)) {
	                                aReturn[j] = aLayout[i][j].cell;
	                            }
	                        }
	                    }

	                    return aReturn;
	                }

	                /**
	                 * Create an Ajax call based on the table's settings, taking into account that
	                 * parameters can have multiple forms, and backwards compatibility.
	                 *
	                 * @param {object} oSettings dataTables settings object
	                 * @param {array} data Data to send to the server, required by
	                 *     DataTables - may be augmented by developer callbacks
	                 * @param {function} fn Callback function to run when data is obtained
	                 */
	                function _fnBuildAjax(oSettings, data, fn) {
	                    // Compatibility with 1.9-, allow fnServerData and event to manipulate
	                    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);

	                    // Convert to object based for 1.10+ if using the old array scheme which can
	                    // come from server-side processing or serverParams
	                    if (data && $.isArray(data)) {
	                        var tmp = {};
	                        var rbracket = /(.*?)\[\]$/;

	                        $.each(data, function (key, val) {
	                            var match = val.name.match(rbracket);

	                            if (match) {
	                                // Support for arrays
	                                var name = match[0];

	                                if (!tmp[name]) {
	                                    tmp[name] = [];
	                                }
	                                tmp[name].push(val.value);
	                            }
	                            else {
	                                tmp[val.name] = val.value;
	                            }
	                        });
	                        data = tmp;
	                    }

	                    var ajaxData;
	                    var ajax = oSettings.ajax;
	                    var instance = oSettings.oInstance;
	                    var callback = function (json) {
	                        _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);
	                        fn(json);
	                    };

	                    if ($.isPlainObject(ajax) && ajax.data) {
	                        ajaxData = ajax.data;

	                        var newData = $.isFunction(ajaxData) ?
	                            ajaxData(data, oSettings) :  // fn can manipulate data or return
	                            ajaxData;                      // an object object or array to merge

	                        // If the function returned something, use that alone
	                        data = $.isFunction(ajaxData) && newData ?
	                            newData :
	                            $.extend(true, data, newData);

	                        // Remove the data property as we've resolved it already and don't want
	                        // jQuery to do it again (it is restored at the end of the function)
	                        delete ajax.data;
	                    }

	                    var baseAjax = {
	                        "data": data,
	                        "success": function (json) {
	                            var error = json.error || json.sError;
	                            if (error) {
	                                _fnLog(oSettings, 0, error);
	                            }

	                            oSettings.json = json;
	                            callback(json);
	                        },
	                        "dataType": "json",
	                        "cache": false,
	                        "type": oSettings.sServerMethod,
	                        "error": function (xhr, error, thrown) {
	                            var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

	                            if ($.inArray(true, ret) === -1) {
	                                if (error == "parsererror") {
	                                    _fnLog(oSettings, 0, 'Invalid JSON response', 1);
	                                }
	                                else if (xhr.readyState === 4) {
	                                    _fnLog(oSettings, 0, 'Ajax error', 7);
	                                }
	                            }

	                            _fnProcessingDisplay(oSettings, false);
	                        }
	                    };

	                    // Store the data submitted for the API
	                    oSettings.oAjaxData = data;

	                    // Allow plug-ins and external processes to modify the data
	                    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

	                    if (oSettings.fnServerData) {
	                        // DataTables 1.9- compatibility
	                        oSettings.fnServerData.call(instance,
	                            oSettings.sAjaxSource,
	                            $.map(data, function (val, key) { // Need to convert back to 1.9 trad format
	                                return { name: key, value: val };
	                            }),
	                            callback,
	                            oSettings
	                        );
	                    }
	                    else if (oSettings.sAjaxSource || typeof ajax === 'string') {
	                        // DataTables 1.9- compatibility
	                        oSettings.jqXHR = $.ajax($.extend(baseAjax, {
	                            url: ajax || oSettings.sAjaxSource
	                        }));
	                    }
	                    else if ($.isFunction(ajax)) {
	                        // Is a function - let the caller define what needs to be done
	                        oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
	                    }
	                    else {
	                        // Object to extend the base settings
	                        oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

	                        // Restore for next time around
	                        ajax.data = ajaxData;
	                    }
	                }


	                /**
	                 * Update the table using an Ajax call
	                 *  @param {object} settings dataTables settings object
	                 *  @returns {boolean} Block the table drawing or not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAjaxUpdate(settings) {
	                    if (settings.bAjaxDataGet) {
	                        settings.iDraw++;
	                        _fnProcessingDisplay(settings, true);

	                        _fnBuildAjax(
	                            settings,
	                            _fnAjaxParameters(settings),
	                            function (json) {
	                                _fnAjaxUpdateDraw(settings, json);
	                            }
	                        );

	                        return false;
	                    }
	                    return true;
	                }


	                /**
	                 * Build up the parameters in an object needed for a server-side processing
	                 * request. Note that this is basically done twice, is different ways - a modern
	                 * method which is used by default in DataTables 1.10 which uses objects and
	                 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	                 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	                 * option is set.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns {bool} block the table drawing or not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAjaxParameters(settings) {
	                    var
	                        columns = settings.aoColumns,
	                        columnCount = columns.length,
	                        features = settings.oFeatures,
	                        preSearch = settings.oPreviousSearch,
	                        preColSearch = settings.aoPreSearchCols,
	                        i, data = [], dataProp, column, columnSearch,
	                        sort = _fnSortFlatten(settings),
	                        displayStart = settings._iDisplayStart,
	                        displayLength = features.bPaginate !== false ?
	                            settings._iDisplayLength :
	                            -1;

	                    var param = function (name, value) {
	                        data.push({ 'name': name, 'value': value });
	                    };

	                    // DataTables 1.9- compatible method
	                    param('sEcho', settings.iDraw);
	                    param('iColumns', columnCount);
	                    param('sColumns', _pluck(columns, 'sName').join(','));
	                    param('iDisplayStart', displayStart);
	                    param('iDisplayLength', displayLength);

	                    // DataTables 1.10+ method
	                    var d = {
	                        draw: settings.iDraw,
	                        columns: [],
	                        order: [],
	                        start: displayStart,
	                        length: displayLength,
	                        search: {
	                            value: preSearch.sSearch,
	                            regex: preSearch.bRegex
	                        }
	                    };

	                    for (i = 0 ; i < columnCount ; i++) {
	                        column = columns[i];
	                        columnSearch = preColSearch[i];
	                        dataProp = typeof column.mData == "function" ? 'function' : column.mData;

	                        d.columns.push({
	                            data: dataProp,
	                            name: column.sName,
	                            searchable: column.bSearchable,
	                            orderable: column.bSortable,
	                            search: {
	                                value: columnSearch.sSearch,
	                                regex: columnSearch.bRegex
	                            }
	                        });

	                        param("mDataProp_" + i, dataProp);

	                        if (features.bFilter) {
	                            param('sSearch_' + i, columnSearch.sSearch);
	                            param('bRegex_' + i, columnSearch.bRegex);
	                            param('bSearchable_' + i, column.bSearchable);
	                        }

	                        if (features.bSort) {
	                            param('bSortable_' + i, column.bSortable);
	                        }
	                    }

	                    if (features.bFilter) {
	                        param('sSearch', preSearch.sSearch);
	                        param('bRegex', preSearch.bRegex);
	                    }

	                    if (features.bSort) {
	                        $.each(sort, function (i, val) {
	                            d.order.push({ column: val.col, dir: val.dir });

	                            param('iSortCol_' + i, val.col);
	                            param('sSortDir_' + i, val.dir);
	                        });

	                        param('iSortingCols', sort.length);
	                    }

	                    // If the legacy.ajax parameter is null, then we automatically decide which
	                    // form to use, based on sAjaxSource
	                    var legacy = DataTable.ext.legacy.ajax;
	                    if (legacy === null) {
	                        return settings.sAjaxSource ? data : d;
	                    }

	                    // Otherwise, if legacy has been specified then we use that to decide on the
	                    // form
	                    return legacy ? data : d;
	                }


	                /**
	                 * Data the data from the server (nuking the old) and redraw the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {object} json json data return from the server.
	                 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	                 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	                 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	                 *  @param {array} json.aaData The data to display on this page
	                 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnAjaxUpdateDraw(settings, json) {
	                    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
	                    // Support both
	                    var compat = function (old, modern) {
	                        return json[old] !== undefined ? json[old] : json[modern];
	                    };

	                    var data = _fnAjaxDataSrc(settings, json);
	                    var draw = compat('sEcho', 'draw');
	                    var recordsTotal = compat('iTotalRecords', 'recordsTotal');
	                    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

	                    if (draw) {
	                        // Protect against out of sequence returns
	                        if (draw * 1 < settings.iDraw) {
	                            return;
	                        }
	                        settings.iDraw = draw * 1;
	                    }

	                    _fnClearTable(settings);
	                    settings._iRecordsTotal = parseInt(recordsTotal, 10);
	                    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

	                    for (var i = 0, ien = data.length ; i < ien ; i++) {
	                        _fnAddData(settings, data[i]);
	                    }
	                    settings.aiDisplay = settings.aiDisplayMaster.slice();

	                    settings.bAjaxDataGet = false;
	                    _fnDraw(settings);

	                    if (!settings._bInitComplete) {
	                        _fnInitComplete(settings, json);
	                    }

	                    settings.bAjaxDataGet = true;
	                    _fnProcessingDisplay(settings, false);
	                }


	                /**
	                 * Get the data from the JSON data source to use for drawing a table. Using
	                 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	                 * source object, or from a processing function.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param  {object} json Data source object / array from the server
	                 *  @return {array} Array of data to use
	                 */
	                function _fnAjaxDataSrc(oSettings, json) {
	                    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ?
	                        oSettings.ajax.dataSrc :
	                        oSettings.sAjaxDataProp; // Compatibility with 1.9-.

	                    // Compatibility with 1.9-. In order to read from aaData, check if the
	                    // default has been changed, if not, check for aaData
	                    if (dataSrc === 'data') {
	                        return json.aaData || json[dataSrc];
	                    }

	                    return dataSrc !== "" ?
	                        _fnGetObjectDataFn(dataSrc)(json) :
	                        json;
	                }

	                /**
	                 * Generate the node required for filtering text
	                 *  @returns {node} Filter control element
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlFilter(settings) {
	                    var classes = settings.oClasses;
	                    var tableId = settings.sTableId;
	                    var language = settings.oLanguage;
	                    var previousSearch = settings.oPreviousSearch;
	                    var features = settings.aanFeatures;
	                    var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

	                    var str = language.sSearch;
	                    str = str.match(/_INPUT_/) ?
	                        str.replace('_INPUT_', input) :
	                        str + input;

	                    var filter = $('<div/>', {
	                        'id': !features.f ? tableId + '_filter' : null,
	                        'class': classes.sFilter
	                    })
	                        .append($('<label/>').append(str));

	                    var searchFn = function () {
	                        /* Update all other filter input elements for the new display */
	                        var n = features.f;
	                        var val = !this.value ? "" : this.value; // mental IE8 fix :-(

	                        /* Now do the filter */
	                        if (val != previousSearch.sSearch) {
	                            _fnFilterComplete(settings, {
	                                "sSearch": val,
	                                "bRegex": previousSearch.bRegex,
	                                "bSmart": previousSearch.bSmart,
	                                "bCaseInsensitive": previousSearch.bCaseInsensitive
	                            });

	                            // Need to redraw, without resorting
	                            settings._iDisplayStart = 0;
	                            _fnDraw(settings);
	                        }
	                    };

	                    var searchDelay = settings.searchDelay !== null ?
	                        settings.searchDelay :
	                        _fnDataSource(settings) === 'ssp' ?
	                            400 :
	                            0;

	                    var jqFilter = $('input', filter)
	                        .val(previousSearch.sSearch)
	                        .attr('placeholder', language.sSearchPlaceholder)
	                        .bind(
	                            'keyup.DT search.DT input.DT paste.DT cut.DT',
	                            searchDelay ?
	                                _fnThrottle(searchFn, searchDelay) :
	                                searchFn
	                        )
	                        .bind('keypress.DT', function (e) {
	                            /* Prevent form submission */
	                            if (e.keyCode == 13) {
	                                return false;
	                            }
	                        })
	                        .attr('aria-controls', tableId);

	                    // Update the input elements whenever the table is filtered
	                    $(settings.nTable).on('search.dt.DT', function (ev, s) {
	                        if (settings === s) {
	                            // IE9 throws an 'unknown error' if document.activeElement is used
	                            // inside an iframe or frame...
	                            try {
	                                if (jqFilter[0] !== document.activeElement) {
	                                    jqFilter.val(previousSearch.sSearch);
	                                }
	                            }
	                            catch (e) { }
	                        }
	                    });

	                    return filter[0];
	                }


	                /**
	                 * Filter the table using both the global filter and column based filtering
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {object} oSearch search information
	                 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFilterComplete(oSettings, oInput, iForce) {
	                    var oPrevSearch = oSettings.oPreviousSearch;
	                    var aoPrevSearch = oSettings.aoPreSearchCols;
	                    var fnSaveFilter = function (oFilter) {
	                        /* Save the filtering values */
	                        oPrevSearch.sSearch = oFilter.sSearch;
	                        oPrevSearch.bRegex = oFilter.bRegex;
	                        oPrevSearch.bSmart = oFilter.bSmart;
	                        oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
	                    };
	                    var fnRegex = function (o) {
	                        // Backwards compatibility with the bEscapeRegex option
	                        return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
	                    };

	                    // Resolve any column types that are unknown due to addition or invalidation
	                    // @todo As per sort - can this be moved into an event handler?
	                    _fnColumnTypes(oSettings);

	                    /* In server-side processing all filtering is done by the server, so no point hanging around here */
	                    if (_fnDataSource(oSettings) != 'ssp') {
	                        /* Global filter */
	                        _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
	                        fnSaveFilter(oInput);

	                        /* Now do the individual column filter */
	                        for (var i = 0 ; i < aoPrevSearch.length ; i++) {
	                            _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
	                                aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
	                        }

	                        /* Custom filtering */
	                        _fnFilterCustom(oSettings);
	                    }
	                    else {
	                        fnSaveFilter(oInput);
	                    }

	                    /* Tell the draw function we have been filtering */
	                    oSettings.bFiltered = true;
	                    _fnCallbackFire(oSettings, null, 'search', [oSettings]);
	                }


	                /**
	                 * Apply custom filtering functions
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFilterCustom(settings) {
	                    var filters = DataTable.ext.search;
	                    var displayRows = settings.aiDisplay;
	                    var row, rowIdx;

	                    for (var i = 0, ien = filters.length ; i < ien ; i++) {
	                        var rows = [];

	                        // Loop over each row and see if it should be included
	                        for (var j = 0, jen = displayRows.length ; j < jen ; j++) {
	                            rowIdx = displayRows[j];
	                            row = settings.aoData[rowIdx];

	                            if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
	                                rows.push(rowIdx);
	                            }
	                        }

	                        // So the array reference doesn't break set the results into the
	                        // existing array
	                        displayRows.length = 0;
	                        displayRows.push.apply(displayRows, rows);
	                    }
	                }


	                /**
	                 * Filter the table on a per-column basis
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {string} sInput string to filter on
	                 *  @param {int} iColumn column to filter
	                 *  @param {bool} bRegex treat search string as a regular expression or not
	                 *  @param {bool} bSmart use smart filtering or not
	                 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
	                    if (searchStr === '') {
	                        return;
	                    }

	                    var data;
	                    var display = settings.aiDisplay;
	                    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

	                    for (var i = display.length - 1 ; i >= 0 ; i--) {
	                        data = settings.aoData[display[i]]._aFilterData[colIdx];

	                        if (!rpSearch.test(data)) {
	                            display.splice(i, 1);
	                        }
	                    }
	                }


	                /**
	                 * Filter the data table based on user input and draw the table
	                 *  @param {object} settings dataTables settings object
	                 *  @param {string} input string to filter on
	                 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	                 *  @param {bool} regex treat as a regular expression or not
	                 *  @param {bool} smart perform smart filtering or not
	                 *  @param {bool} caseInsensitive Do case insenstive matching or not
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
	                    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
	                    var prevSearch = settings.oPreviousSearch.sSearch;
	                    var displayMaster = settings.aiDisplayMaster;
	                    var display, invalidated, i;

	                    // Need to take account of custom filtering functions - always filter
	                    if (DataTable.ext.search.length !== 0) {
	                        force = true;
	                    }

	                    // Check if any of the rows were invalidated
	                    invalidated = _fnFilterData(settings);

	                    // If the input is blank - we just want the full data set
	                    if (input.length <= 0) {
	                        settings.aiDisplay = displayMaster.slice();
	                    }
	                    else {
	                        // New search - start from the master array
	                        if (invalidated ||
	                             force ||
	                             prevSearch.length > input.length ||
	                             input.indexOf(prevSearch) !== 0 ||
	                             settings.bSorted // On resort, the display master needs to be
	                            // re-filtered since indexes will have changed
	                        ) {
	                            settings.aiDisplay = displayMaster.slice();
	                        }

	                        // Search the display array
	                        display = settings.aiDisplay;

	                        for (i = display.length - 1 ; i >= 0 ; i--) {
	                            if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
	                                display.splice(i, 1);
	                            }
	                        }
	                    }
	                }


	                /**
	                 * Build a regular expression object suitable for searching a table
	                 *  @param {string} sSearch string to search for
	                 *  @param {bool} bRegex treat as a regular expression or not
	                 *  @param {bool} bSmart perform smart filtering or not
	                 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	                 *  @returns {RegExp} constructed object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
	                    search = regex ?
	                        search :
	                        _fnEscapeRegex(search);

	                    if (smart) {
	                        /* For smart filtering we want to allow the search to work regardless of
	                         * word order. We also want double quoted text to be preserved, so word
	                         * order is important - a la google. So this is what we want to
	                         * generate:
	                         * 
	                         * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
	                         */
	                        var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
	                            if (word.charAt(0) === '"') {
	                                var m = word.match(/^"(.*)"$/);
	                                word = m ? m[1] : word;
	                            }

	                            return word.replace('"', '');
	                        });

	                        search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
	                    }

	                    return new RegExp(search, caseInsensitive ? 'i' : '');
	                }


	                /**
	                 * Escape a string such that it can be used in a regular expression
	                 *  @param {string} sVal string to escape
	                 *  @returns {string} escaped string
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnEscapeRegex(sVal) {
	                    return sVal.replace(_re_escape_regex, '\\$1');
	                }



	                var __filter_div = $('<div>')[0];
	                var __filter_div_textContent = __filter_div.textContent !== undefined;

	                // Update the filtering data for each row if needed (by invalidation or first run)
	                function _fnFilterData(settings) {
	                    var columns = settings.aoColumns;
	                    var column;
	                    var i, j, ien, jen, filterData, cellData, row;
	                    var fomatters = DataTable.ext.type.search;
	                    var wasInvalidated = false;

	                    for (i = 0, ien = settings.aoData.length ; i < ien ; i++) {
	                        row = settings.aoData[i];

	                        if (!row._aFilterData) {
	                            filterData = [];

	                            for (j = 0, jen = columns.length ; j < jen ; j++) {
	                                column = columns[j];

	                                if (column.bSearchable) {
	                                    cellData = _fnGetCellData(settings, i, j, 'filter');

	                                    if (fomatters[column.sType]) {
	                                        cellData = fomatters[column.sType](cellData);
	                                    }

	                                    // Search in DataTables 1.10 is string based. In 1.11 this
	                                    // should be altered to also allow strict type checking.
	                                    if (cellData === null) {
	                                        cellData = '';
	                                    }

	                                    if (typeof cellData !== 'string' && cellData.toString) {
	                                        cellData = cellData.toString();
	                                    }
	                                }
	                                else {
	                                    cellData = '';
	                                }

	                                // If it looks like there is an HTML entity in the string,
	                                // attempt to decode it so sorting works as expected. Note that
	                                // we could use a single line of jQuery to do this, but the DOM
	                                // method used here is much faster http://jsperf.com/html-decode
	                                if (cellData.indexOf && cellData.indexOf('&') !== -1) {
	                                    __filter_div.innerHTML = cellData;
	                                    cellData = __filter_div_textContent ?
	                                        __filter_div.textContent :
	                                        __filter_div.innerText;
	                                }

	                                if (cellData.replace) {
	                                    cellData = cellData.replace(/[\r\n]/g, '');
	                                }

	                                filterData.push(cellData);
	                            }

	                            row._aFilterData = filterData;
	                            row._sFilterRow = filterData.join('  ');
	                            wasInvalidated = true;
	                        }
	                    }

	                    return wasInvalidated;
	                }


	                /**
	                 * Convert from the internal Hungarian notation to camelCase for external
	                 * interaction
	                 *  @param {object} obj Object to convert
	                 *  @returns {object} Inverted object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSearchToCamel(obj) {
	                    return {
	                        search: obj.sSearch,
	                        smart: obj.bSmart,
	                        regex: obj.bRegex,
	                        caseInsensitive: obj.bCaseInsensitive
	                    };
	                }



	                /**
	                 * Convert from camelCase notation to the internal Hungarian. We could use the
	                 * Hungarian convert function here, but this is cleaner
	                 *  @param {object} obj Object to convert
	                 *  @returns {object} Inverted object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSearchToHung(obj) {
	                    return {
	                        sSearch: obj.search,
	                        bSmart: obj.smart,
	                        bRegex: obj.regex,
	                        bCaseInsensitive: obj.caseInsensitive
	                    };
	                }

	                /**
	                 * Generate the node required for the info display
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns {node} Information element
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlInfo(settings) {
	                    var
	                        tid = settings.sTableId,
	                        nodes = settings.aanFeatures.i,
	                        n = $('<div/>', {
	                            'class': settings.oClasses.sInfo,
	                            'id': !nodes ? tid + '_info' : null
	                        });

	                    if (!nodes) {
	                        // Update display on each draw
	                        settings.aoDrawCallback.push({
	                            "fn": _fnUpdateInfo,
	                            "sName": "information"
	                        });

	                        n
	                            .attr('role', 'status')
	                            .attr('aria-live', 'polite');

	                        // Table is described by our info div
	                        $(settings.nTable).attr('aria-describedby', tid + '_info');
	                    }

	                    return n[0];
	                }


	                /**
	                 * Update the information elements in the display
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnUpdateInfo(settings) {
	                    /* Show information about the table */
	                    var nodes = settings.aanFeatures.i;
	                    if (nodes.length === 0) {
	                        return;
	                    }

	                    var
	                        lang = settings.oLanguage,
	                        start = settings._iDisplayStart + 1,
	                        end = settings.fnDisplayEnd(),
	                        max = settings.fnRecordsTotal(),
	                        total = settings.fnRecordsDisplay(),
	                        out = total ?
	                            lang.sInfo :
	                            lang.sInfoEmpty;

	                    if (total !== max) {
	                        /* Record set after filtering */
	                        out += ' ' + lang.sInfoFiltered;
	                    }

	                    // Convert the macros
	                    out += lang.sInfoPostFix;
	                    out = _fnInfoMacros(settings, out);

	                    var callback = lang.fnInfoCallback;
	                    if (callback !== null) {
	                        out = callback.call(settings.oInstance,
	                            settings, start, end, max, total, out
	                        );
	                    }

	                    $(nodes).html(out);
	                }


	                function _fnInfoMacros(settings, str) {
	                    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
	                    // internally
	                    var
	                        formatter = settings.fnFormatNumber,
	                        start = settings._iDisplayStart + 1,
	                        len = settings._iDisplayLength,
	                        vis = settings.fnRecordsDisplay(),
	                        all = len === -1;

	                    return str.
	                        replace(/_START_/g, formatter.call(settings, start)).
	                        replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).
	                        replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).
	                        replace(/_TOTAL_/g, formatter.call(settings, vis)).
	                        replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).
	                        replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
	                }



	                /**
	                 * Draw the table for the first time, adding all required features
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnInitialise(settings) {
	                    var i, iLen, iAjaxStart = settings.iInitDisplayStart;
	                    var columns = settings.aoColumns, column;
	                    var features = settings.oFeatures;

	                    /* Ensure that the table data is fully initialised */
	                    if (!settings.bInitialised) {
	                        setTimeout(function () { _fnInitialise(settings); }, 200);
	                        return;
	                    }

	                    /* Show the display HTML options */
	                    _fnAddOptionsHtml(settings);

	                    /* Build and draw the header / footer for the table */
	                    _fnBuildHead(settings);
	                    _fnDrawHead(settings, settings.aoHeader);
	                    _fnDrawHead(settings, settings.aoFooter);

	                    /* Okay to show that something is going on now */
	                    _fnProcessingDisplay(settings, true);

	                    /* Calculate sizes for columns */
	                    if (features.bAutoWidth) {
	                        _fnCalculateColumnWidths(settings);
	                    }

	                    for (i = 0, iLen = columns.length ; i < iLen ; i++) {
	                        column = columns[i];

	                        if (column.sWidth) {
	                            column.nTh.style.width = _fnStringToCss(column.sWidth);
	                        }
	                    }

	                    // If there is default sorting required - let's do it. The sort function
	                    // will do the drawing for us. Otherwise we draw the table regardless of the
	                    // Ajax source - this allows the table to look initialised for Ajax sourcing
	                    // data (show 'loading' message possibly)
	                    _fnReDraw(settings);

	                    // Server-side processing init complete is done by _fnAjaxUpdateDraw
	                    var dataSrc = _fnDataSource(settings);
	                    if (dataSrc != 'ssp') {
	                        // if there is an ajax source load the data
	                        if (dataSrc == 'ajax') {
	                            _fnBuildAjax(settings, [], function (json) {
	                                var aData = _fnAjaxDataSrc(settings, json);

	                                // Got the data - add it to the table
	                                for (i = 0 ; i < aData.length ; i++) {
	                                    _fnAddData(settings, aData[i]);
	                                }

	                                // Reset the init display for cookie saving. We've already done
	                                // a filter, and therefore cleared it before. So we need to make
	                                // it appear 'fresh'
	                                settings.iInitDisplayStart = iAjaxStart;

	                                _fnReDraw(settings);

	                                _fnProcessingDisplay(settings, false);
	                                _fnInitComplete(settings, json);
	                            }, settings);
	                        }
	                        else {
	                            _fnProcessingDisplay(settings, false);
	                            _fnInitComplete(settings);
	                        }
	                    }
	                }


	                /**
	                 * Draw the table for the first time, adding all required features
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	                 *    with client-side processing (optional)
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnInitComplete(settings, json) {
	                    settings._bInitComplete = true;

	                    // On an Ajax load we now have data and therefore want to apply the column
	                    // sizing
	                    if (json) {
	                        _fnAdjustColumnSizing(settings);
	                    }

	                    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
	                }


	                function _fnLengthChange(settings, val) {
	                    var len = parseInt(val, 10);
	                    settings._iDisplayLength = len;

	                    _fnLengthOverflow(settings);

	                    // Fire length change event
	                    _fnCallbackFire(settings, null, 'length', [settings, len]);
	                }


	                /**
	                 * Generate the node required for user display length changing
	                 *  @param {object} settings dataTables settings object
	                 *  @returns {node} Display length feature node
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlLength(settings) {
	                    var
	                        classes = settings.oClasses,
	                        tableId = settings.sTableId,
	                        menu = settings.aLengthMenu,
	                        d2 = $.isArray(menu[0]),
	                        lengths = d2 ? menu[0] : menu,
	                        language = d2 ? menu[1] : menu;

	                    var select = $('<select/>', {
	                        'name': tableId + '_length',
	                        'aria-controls': tableId,
	                        'class': classes.sLengthSelect
	                    });

	                    for (var i = 0, ien = lengths.length ; i < ien ; i++) {
	                        select[0][i] = new Option(language[i], lengths[i]);
	                    }

	                    var div = $('<div><label/></div>').addClass(classes.sLength);
	                    if (!settings.aanFeatures.l) {
	                        div[0].id = tableId + '_length';
	                    }

	                    div.children().append(
	                        settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)
	                    );

	                    // Can't use `select` variable as user might provide their own and the
	                    // reference is broken by the use of outerHTML
	                    $('select', div)
	                        .val(settings._iDisplayLength)
	                        .bind('change.DT', function (e) {
	                            _fnLengthChange(settings, $(this).val());
	                            _fnDraw(settings);
	                        });

	                    // Update node value whenever anything changes the table's length
	                    $(settings.nTable).bind('length.dt.DT', function (e, s, len) {
	                        if (settings === s) {
	                            $('select', div).val(len);
	                        }
	                    });

	                    return div[0];
	                }



	                /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	                 * Note that most of the paging logic is done in
	                 * DataTable.ext.pager
	                 */

	                /**
	                 * Generate the node required for default pagination
	                 *  @param {object} oSettings dataTables settings object
	                 *  @returns {node} Pagination feature node
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlPaginate(settings) {
	                    var
	                        type = settings.sPaginationType,
	                        plugin = DataTable.ext.pager[type],
	                        modern = typeof plugin === 'function',
	                        redraw = function (settings) {
	                            _fnDraw(settings);
	                        },
	                        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
	                        features = settings.aanFeatures;

	                    if (!modern) {
	                        plugin.fnInit(settings, node, redraw);
	                    }

	                    /* Add a draw callback for the pagination on first instance, to update the paging display */
	                    if (!features.p) {
	                        node.id = settings.sTableId + '_paginate';

	                        settings.aoDrawCallback.push({
	                            "fn": function (settings) {
	                                if (modern) {
	                                    var
	                                        start = settings._iDisplayStart,
	                                        len = settings._iDisplayLength,
	                                        visRecords = settings.fnRecordsDisplay(),
	                                        all = len === -1,
	                                        page = all ? 0 : Math.ceil(start / len),
	                                        pages = all ? 1 : Math.ceil(visRecords / len),
	                                        buttons = plugin(page, pages),
	                                        i, ien;

	                                    for (i = 0, ien = features.p.length ; i < ien ; i++) {
	                                        _fnRenderer(settings, 'pageButton')(
	                                            settings, features.p[i], i, buttons, page, pages
	                                        );
	                                    }
	                                }
	                                else {
	                                    plugin.fnUpdate(settings, redraw);
	                                }
	                            },
	                            "sName": "pagination"
	                        });
	                    }

	                    return node;
	                }


	                /**
	                 * Alter the display settings to change the page
	                 *  @param {object} settings DataTables settings object
	                 *  @param {string|int} action Paging action to take: "first", "previous",
	                 *    "next" or "last" or page number to jump to (integer)
	                 *  @param [bool] redraw Automatically draw the update or not
	                 *  @returns {bool} true page has changed, false - no change
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnPageChange(settings, action, redraw) {
	                    var
	                        start = settings._iDisplayStart,
	                        len = settings._iDisplayLength,
	                        records = settings.fnRecordsDisplay();

	                    if (records === 0 || len === -1) {
	                        start = 0;
	                    }
	                    else if (typeof action === "number") {
	                        start = action * len;

	                        if (start > records) {
	                            start = 0;
	                        }
	                    }
	                    else if (action == "first") {
	                        start = 0;
	                    }
	                    else if (action == "previous") {
	                        start = len >= 0 ?
	                            start - len :
	                            0;

	                        if (start < 0) {
	                            start = 0;
	                        }
	                    }
	                    else if (action == "next") {
	                        if (start + len < records) {
	                            start += len;
	                        }
	                    }
	                    else if (action == "last") {
	                        start = Math.floor((records - 1) / len) * len;
	                    }
	                    else {
	                        _fnLog(settings, 0, "Unknown paging action: " + action, 5);
	                    }

	                    var changed = settings._iDisplayStart !== start;
	                    settings._iDisplayStart = start;

	                    if (changed) {
	                        _fnCallbackFire(settings, null, 'page', [settings]);

	                        if (redraw) {
	                            _fnDraw(settings);
	                        }
	                    }

	                    return changed;
	                }



	                /**
	                 * Generate the node required for the processing node
	                 *  @param {object} settings dataTables settings object
	                 *  @returns {node} Processing element
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlProcessing(settings) {
	                    return $('<div/>', {
	                        'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
	                        'class': settings.oClasses.sProcessing
	                    })
	                        .html(settings.oLanguage.sProcessing)
	                        .insertBefore(settings.nTable)[0];
	                }


	                /**
	                 * Display or hide the processing indicator
	                 *  @param {object} settings dataTables settings object
	                 *  @param {bool} show Show the processing indicator (true) or not (false)
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnProcessingDisplay(settings, show) {
	                    if (settings.oFeatures.bProcessing) {
	                        $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
	                    }

	                    _fnCallbackFire(settings, null, 'processing', [settings, show]);
	                }

	                /**
	                 * Add any control elements for the table - specifically scrolling
	                 *  @param {object} settings dataTables settings object
	                 *  @returns {node} Node to add to the DOM
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnFeatureHtmlTable(settings) {
	                    var table = $(settings.nTable);

	                    // Add the ARIA grid role to the table
	                    table.attr('role', 'grid');

	                    // Scrolling from here on in
	                    var scroll = settings.oScroll;

	                    if (scroll.sX === '' && scroll.sY === '') {
	                        return settings.nTable;
	                    }

	                    var scrollX = scroll.sX;
	                    var scrollY = scroll.sY;
	                    var classes = settings.oClasses;
	                    var caption = table.children('caption');
	                    var captionSide = caption.length ? caption[0]._captionSide : null;
	                    var headerClone = $(table[0].cloneNode(false));
	                    var footerClone = $(table[0].cloneNode(false));
	                    var footer = table.children('tfoot');
	                    var _div = '<div/>';
	                    var size = function (s) {
	                        return !s ? null : _fnStringToCss(s);
	                    };

	                    // This is fairly messy, but with x scrolling enabled, if the table has a
	                    // width attribute, regardless of any width applied using the column width
	                    // options, the browser will shrink or grow the table as needed to fit into
	                    // that 100%. That would make the width options useless. So we remove it.
	                    // This is okay, under the assumption that width:100% is applied to the
	                    // table in CSS (it is in the default stylesheet) which will set the table
	                    // width as appropriate (the attribute and css behave differently...)
	                    if (scroll.sX && table.attr('width') === '100%') {
	                        table.removeAttr('width');
	                    }

	                    if (!footer.length) {
	                        footer = null;
	                    }

	                    /*
	                     * The HTML structure that we want to generate in this function is:
	                     *  div - scroller
	                     *    div - scroll head
	                     *      div - scroll head inner
	                     *        table - scroll head table
	                     *          thead - thead
	                     *    div - scroll body
	                     *      table - table (master table)
	                     *        thead - thead clone for sizing
	                     *        tbody - tbody
	                     *    div - scroll foot
	                     *      div - scroll foot inner
	                     *        table - scroll foot table
	                     *          tfoot - tfoot
	                     */
	                    var scroller = $(_div, { 'class': classes.sScrollWrapper })
	                        .append(
	                            $(_div, { 'class': classes.sScrollHead })
	                                .css({
	                                    overflow: 'hidden',
	                                    position: 'relative',
	                                    border: 0,
	                                    width: scrollX ? size(scrollX) : '100%'
	                                })
	                                .append(
	                                    $(_div, { 'class': classes.sScrollHeadInner })
	                                        .css({
	                                            'box-sizing': 'content-box',
	                                            width: scroll.sXInner || '100%'
	                                        })
	                                        .append(
	                                            headerClone
	                                                .removeAttr('id')
	                                                .css('margin-left', 0)
	                                                .append(captionSide === 'top' ? caption : null)
	                                                .append(
	                                                    table.children('thead')
	                                                )
	                                        )
	                                )
	                        )
	                        .append(
	                            $(_div, { 'class': classes.sScrollBody })
	                                .css({
	                                    overflow: 'auto',
	                                    height: size(scrollY),
	                                    width: size(scrollX)
	                                })
	                                .append(table)
	                        );

	                    if (footer) {
	                        scroller.append(
	                            $(_div, { 'class': classes.sScrollFoot })
	                                .css({
	                                    overflow: 'hidden',
	                                    border: 0,
	                                    width: scrollX ? size(scrollX) : '100%'
	                                })
	                                .append(
	                                    $(_div, { 'class': classes.sScrollFootInner })
	                                        .append(
	                                            footerClone
	                                                .removeAttr('id')
	                                                .css('margin-left', 0)
	                                                .append(captionSide === 'bottom' ? caption : null)
	                                                .append(
	                                                    table.children('tfoot')
	                                                )
	                                        )
	                                )
	                        );
	                    }

	                    var children = scroller.children();
	                    var scrollHead = children[0];
	                    var scrollBody = children[1];
	                    var scrollFoot = footer ? children[2] : null;

	                    // When the body is scrolled, then we also want to scroll the headers
	                    if (scrollX) {
	                        $(scrollBody).on('scroll.DT', function (e) {
	                            var scrollLeft = this.scrollLeft;

	                            scrollHead.scrollLeft = scrollLeft;

	                            if (footer) {
	                                scrollFoot.scrollLeft = scrollLeft;
	                            }
	                        });
	                    }

	                    settings.nScrollHead = scrollHead;
	                    settings.nScrollBody = scrollBody;
	                    settings.nScrollFoot = scrollFoot;

	                    // On redraw - align columns
	                    settings.aoDrawCallback.push({
	                        "fn": _fnScrollDraw,
	                        "sName": "scrolling"
	                    });

	                    return scroller[0];
	                }



	                /**
	                 * Update the header, footer and body tables for resizing - i.e. column
	                 * alignment.
	                 *
	                 * Welcome to the most horrible function DataTables. The process that this
	                 * function follows is basically:
	                 *   1. Re-create the table inside the scrolling div
	                 *   2. Take live measurements from the DOM
	                 *   3. Apply the measurements to align the columns
	                 *   4. Clean up
	                 *
	                 *  @param {object} settings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnScrollDraw(settings) {
	                    // Given that this is such a monster function, a lot of variables are use
	                    // to try and keep the minimised size as small as possible
	                    var
	                        scroll = settings.oScroll,
	                        scrollX = scroll.sX,
	                        scrollXInner = scroll.sXInner,
	                        scrollY = scroll.sY,
	                        barWidth = scroll.iBarWidth,
	                        divHeader = $(settings.nScrollHead),
	                        divHeaderStyle = divHeader[0].style,
	                        divHeaderInner = divHeader.children('div'),
	                        divHeaderInnerStyle = divHeaderInner[0].style,
	                        divHeaderTable = divHeaderInner.children('table'),
	                        divBodyEl = settings.nScrollBody,
	                        divBody = $(divBodyEl),
	                        divBodyStyle = divBodyEl.style,
	                        divFooter = $(settings.nScrollFoot),
	                        divFooterInner = divFooter.children('div'),
	                        divFooterTable = divFooterInner.children('table'),
	                        header = $(settings.nTHead),
	                        table = $(settings.nTable),
	                        tableEl = table[0],
	                        tableStyle = tableEl.style,
	                        footer = settings.nTFoot ? $(settings.nTFoot) : null,
	                        browser = settings.oBrowser,
	                        ie67 = browser.bScrollOversize,
	                        headerTrgEls, footerTrgEls,
	                        headerSrcEls, footerSrcEls,
	                        headerCopy, footerCopy,
	                        headerWidths = [], footerWidths = [],
	                        headerContent = [],
	                        idx, correction, sanityWidth,
	                        zeroOut = function (nSizer) {
	                            var style = nSizer.style;
	                            style.paddingTop = "0";
	                            style.paddingBottom = "0";
	                            style.borderTopWidth = "0";
	                            style.borderBottomWidth = "0";
	                            style.height = 0;
	                        };

	                    /*
	                     * 1. Re-create the table inside the scrolling div
	                     */

	                    // Remove the old minimised thead and tfoot elements in the inner table
	                    table.children('thead, tfoot').remove();

	                    // Clone the current header and footer elements and then place it into the inner table
	                    headerCopy = header.clone().prependTo(table);
	                    headerTrgEls = header.find('tr'); // original header is in its own table
	                    headerSrcEls = headerCopy.find('tr');
	                    headerCopy.find('th, td').removeAttr('tabindex');

	                    if (footer) {
	                        footerCopy = footer.clone().prependTo(table);
	                        footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
	                        footerSrcEls = footerCopy.find('tr');
	                    }


	                    /*
	                     * 2. Take live measurements from the DOM - do not alter the DOM itself!
	                     */

	                    // Remove old sizing and apply the calculated column widths
	                    // Get the unique column headers in the newly created (cloned) header. We want to apply the
	                    // calculated sizes to this header
	                    if (!scrollX) {
	                        divBodyStyle.width = '100%';
	                        divHeader[0].style.width = '100%';
	                    }

	                    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
	                        idx = _fnVisibleToColumnIndex(settings, i);
	                        el.style.width = settings.aoColumns[idx].sWidth;
	                    });

	                    if (footer) {
	                        _fnApplyToChildren(function (n) {
	                            n.style.width = "";
	                        }, footerSrcEls);
	                    }

	                    // If scroll collapse is enabled, when we put the headers back into the body for sizing, we
	                    // will end up forcing the scrollbar to appear, making our measurements wrong for when we
	                    // then hide it (end of this function), so add the header height to the body scroller.
	                    if (scroll.bCollapse && scrollY !== "") {
	                        divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight) + "px";
	                    }

	                    // Size the table as a whole
	                    sanityWidth = table.outerWidth();
	                    if (scrollX === "") {
	                        // No x scrolling
	                        tableStyle.width = "100%";

	                        // IE7 will make the width of the table when 100% include the scrollbar
	                        // - which is shouldn't. When there is a scrollbar we need to take this
	                        // into account.
	                        if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
	                            divBody.css('overflow-y') == "scroll")
	                        ) {
	                            tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
	                        }
	                    }
	                    else {
	                        // x scrolling
	                        if (scrollXInner !== "") {
	                            // x scroll inner has been given - use it
	                            tableStyle.width = _fnStringToCss(scrollXInner);
	                        }
	                        else if (sanityWidth == divBody.width() && divBody.height() < table.height()) {
	                            // There is y-scrolling - try to take account of the y scroll bar
	                            tableStyle.width = _fnStringToCss(sanityWidth - barWidth);
	                            if (table.outerWidth() > sanityWidth - barWidth) {
	                                // Not possible to take account of it
	                                tableStyle.width = _fnStringToCss(sanityWidth);
	                            }
	                        }
	                        else {
	                            // When all else fails
	                            tableStyle.width = _fnStringToCss(sanityWidth);
	                        }
	                    }

	                    // Recalculate the sanity width - now that we've applied the required width,
	                    // before it was a temporary variable. This is required because the column
	                    // width calculation is done before this table DOM is created.
	                    sanityWidth = table.outerWidth();

	                    // Hidden header should have zero height, so remove padding and borders. Then
	                    // set the width based on the real headers

	                    // Apply all styles in one pass
	                    _fnApplyToChildren(zeroOut, headerSrcEls);

	                    // Read all widths in next pass
	                    _fnApplyToChildren(function (nSizer) {
	                        headerContent.push(nSizer.innerHTML);
	                        headerWidths.push(_fnStringToCss($(nSizer).css('width')));
	                    }, headerSrcEls);

	                    // Apply all widths in final pass
	                    _fnApplyToChildren(function (nToSize, i) {
	                        nToSize.style.width = headerWidths[i];
	                    }, headerTrgEls);

	                    $(headerSrcEls).height(0);

	                    /* Same again with the footer if we have one */
	                    if (footer) {
	                        _fnApplyToChildren(zeroOut, footerSrcEls);

	                        _fnApplyToChildren(function (nSizer) {
	                            footerWidths.push(_fnStringToCss($(nSizer).css('width')));
	                        }, footerSrcEls);

	                        _fnApplyToChildren(function (nToSize, i) {
	                            nToSize.style.width = footerWidths[i];
	                        }, footerTrgEls);

	                        $(footerSrcEls).height(0);
	                    }


	                    /*
	                     * 3. Apply the measurements
	                     */

	                    // "Hide" the header and footer that we used for the sizing. We need to keep
	                    // the content of the cell so that the width applied to the header and body
	                    // both match, but we want to hide it completely. We want to also fix their
	                    // width to what they currently are
	                    _fnApplyToChildren(function (nSizer, i) {
	                        nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
	                        nSizer.style.width = headerWidths[i];
	                    }, headerSrcEls);

	                    if (footer) {
	                        _fnApplyToChildren(function (nSizer, i) {
	                            nSizer.innerHTML = "";
	                            nSizer.style.width = footerWidths[i];
	                        }, footerSrcEls);
	                    }

	                    // Sanity check that the table is of a sensible width. If not then we are going to get
	                    // misalignment - try to prevent this by not allowing the table to shrink below its min width
	                    if (table.outerWidth() < sanityWidth) {
	                        // The min width depends upon if we have a vertical scrollbar visible or not */
	                        correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
	                            divBody.css('overflow-y') == "scroll")) ?
	                                sanityWidth + barWidth :
	                                sanityWidth;

	                        // IE6/7 are a law unto themselves...
	                        if (ie67 && (divBodyEl.scrollHeight >
	                            divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
	                        ) {
	                            tableStyle.width = _fnStringToCss(correction - barWidth);
	                        }

	                        // And give the user a warning that we've stopped the table getting too small
	                        if (scrollX === "" || scrollXInner !== "") {
	                            _fnLog(settings, 1, 'Possible column misalignment', 6);
	                        }
	                    }
	                    else {
	                        correction = '100%';
	                    }

	                    // Apply to the container elements
	                    divBodyStyle.width = _fnStringToCss(correction);
	                    divHeaderStyle.width = _fnStringToCss(correction);

	                    if (footer) {
	                        settings.nScrollFoot.style.width = _fnStringToCss(correction);
	                    }


	                    /*
	                     * 4. Clean up
	                     */
	                    if (!scrollY) {
	                        /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
	                         * the scrollbar height from the visible display, rather than adding it on. We need to
	                         * set the height in order to sort this. Don't want to do it in any other browsers.
	                         */
	                        if (ie67) {
	                            divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
	                        }
	                    }

	                    if (scrollY && scroll.bCollapse) {
	                        divBodyStyle.height = _fnStringToCss(scrollY);

	                        var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?
	                            barWidth :
	                            0;

	                        if (tableEl.offsetHeight < divBodyEl.offsetHeight) {
	                            divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + iExtra);
	                        }
	                    }

	                    /* Finally set the width's of the header and footer tables */
	                    var iOuterWidth = table.outerWidth();
	                    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
	                    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

	                    // Figure out if there are scrollbar present - if so then we need a the header and footer to
	                    // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
	                    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
	                    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
	                    divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

	                    if (footer) {
	                        divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
	                        divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
	                        divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
	                    }

	                    /* Adjust the position of the header in case we loose the y-scrollbar */
	                    divBody.scroll();

	                    // If sorting or filtering has occurred, jump the scrolling back to the top
	                    // only if we aren't holding the position
	                    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
	                        divBodyEl.scrollTop = 0;
	                    }
	                }



	                /**
	                 * Apply a given function to the display child nodes of an element array (typically
	                 * TD children of TR rows
	                 *  @param {function} fn Method to apply to the objects
	                 *  @param array {nodes} an1 List of elements to look through for display children
	                 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnApplyToChildren(fn, an1, an2) {
	                    var index = 0, i = 0, iLen = an1.length;
	                    var nNode1, nNode2;

	                    while (i < iLen) {
	                        nNode1 = an1[i].firstChild;
	                        nNode2 = an2 ? an2[i].firstChild : null;

	                        while (nNode1) {
	                            if (nNode1.nodeType === 1) {
	                                if (an2) {
	                                    fn(nNode1, nNode2, index);
	                                }
	                                else {
	                                    fn(nNode1, index);
	                                }

	                                index++;
	                            }

	                            nNode1 = nNode1.nextSibling;
	                            nNode2 = an2 ? nNode2.nextSibling : null;
	                        }

	                        i++;
	                    }
	                }



	                var __re_html_remove = /<.*?>/g;


	                /**
	                 * Calculate the width of columns for the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnCalculateColumnWidths(oSettings) {
	                    var
	                        table = oSettings.nTable,
	                        columns = oSettings.aoColumns,
	                        scroll = oSettings.oScroll,
	                        scrollY = scroll.sY,
	                        scrollX = scroll.sX,
	                        scrollXInner = scroll.sXInner,
	                        columnCount = columns.length,
	                        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
	                        headerCells = $('th', oSettings.nTHead),
	                        tableWidthAttr = table.getAttribute('width'), // from DOM element
	                        tableContainer = table.parentNode,
	                        userInputs = false,
	                        i, column, columnIdx, width, outerWidth;

	                    var styleWidth = table.style.width;
	                    if (styleWidth && styleWidth.indexOf('%') !== -1) {
	                        tableWidthAttr = styleWidth;
	                    }

	                    /* Convert any user input sizes into pixel sizes */
	                    for (i = 0 ; i < visibleColumns.length ; i++) {
	                        column = columns[visibleColumns[i]];

	                        if (column.sWidth !== null) {
	                            column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

	                            userInputs = true;
	                        }
	                    }

	                    /* If the number of columns in the DOM equals the number that we have to
	                     * process in DataTables, then we can use the offsets that are created by
	                     * the web- browser. No custom sizes can be set in order for this to happen,
	                     * nor scrolling used
	                     */
	                    if (!userInputs && !scrollX && !scrollY &&
	                        columnCount == _fnVisbleColumns(oSettings) &&
	                        columnCount == headerCells.length
	                    ) {
	                        for (i = 0 ; i < columnCount ; i++) {
	                            columns[i].sWidth = _fnStringToCss(headerCells.eq(i).width());
	                        }
	                    }
	                    else {
	                        // Otherwise construct a single row, worst case, table with the widest
	                        // node in the data, assign any user defined widths, then insert it into
	                        // the DOM and allow the browser to do all the hard work of calculating
	                        // table widths
	                        var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
	                            .css('visibility', 'hidden')
	                            .removeAttr('id');

	                        // Clean up the table body
	                        tmpTable.find('tbody tr').remove();
	                        var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

	                        // Remove any assigned widths from the footer (from scrolling)
	                        tmpTable.find('tfoot th, tfoot td').css('width', '');

	                        // Apply custom sizing to the cloned header
	                        headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

	                        for (i = 0 ; i < visibleColumns.length ; i++) {
	                            column = columns[visibleColumns[i]];

	                            headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
	                                _fnStringToCss(column.sWidthOrig) :
	                                '';
	                        }

	                        // Find the widest cell for each column and put it into the table
	                        if (oSettings.aoData.length) {
	                            for (i = 0 ; i < visibleColumns.length ; i++) {
	                                columnIdx = visibleColumns[i];
	                                column = columns[columnIdx];

	                                $(_fnGetWidestNode(oSettings, columnIdx))
	                                    .clone(false)
	                                    .append(column.sContentPadding)
	                                    .appendTo(tr);
	                            }
	                        }

	                        // Table has been built, attach to the document so we can work with it
	                        tmpTable.appendTo(tableContainer);

	                        // When scrolling (X or Y) we want to set the width of the table as 
	                        // appropriate. However, when not scrolling leave the table width as it
	                        // is. This results in slightly different, but I think correct behaviour
	                        if (scrollX && scrollXInner) {
	                            tmpTable.width(scrollXInner);
	                        }
	                        else if (scrollX) {
	                            tmpTable.css('width', 'auto');

	                            if (tmpTable.width() < tableContainer.offsetWidth) {
	                                tmpTable.width(tableContainer.offsetWidth);
	                            }
	                        }
	                        else if (scrollY) {
	                            tmpTable.width(tableContainer.offsetWidth);
	                        }
	                        else if (tableWidthAttr) {
	                            tmpTable.width(tableWidthAttr);
	                        }

	                        // Take into account the y scrollbar
	                        _fnScrollingWidthAdjust(oSettings, tmpTable[0]);

	                        // Browsers need a bit of a hand when a width is assigned to any columns
	                        // when x-scrolling as they tend to collapse the table to the min-width,
	                        // even if we sent the column widths. So we need to keep track of what
	                        // the table width should be by summing the user given values, and the
	                        // automatic values
	                        if (scrollX) {
	                            var total = 0;

	                            for (i = 0 ; i < visibleColumns.length ; i++) {
	                                column = columns[visibleColumns[i]];
	                                outerWidth = $(headerCells[i]).outerWidth();

	                                total += column.sWidthOrig === null ?
	                                    outerWidth :
	                                    parseInt(column.sWidth, 10) + outerWidth - $(headerCells[i]).width();
	                            }

	                            tmpTable.width(_fnStringToCss(total));
	                            table.style.width = _fnStringToCss(total);
	                        }

	                        // Get the width of each column in the constructed table
	                        for (i = 0 ; i < visibleColumns.length ; i++) {
	                            column = columns[visibleColumns[i]];
	                            width = $(headerCells[i]).width();

	                            if (width) {
	                                column.sWidth = _fnStringToCss(width);
	                            }
	                        }

	                        table.style.width = _fnStringToCss(tmpTable.css('width'));

	                        // Finished with the table - ditch it
	                        tmpTable.remove();
	                    }

	                    // If there is a width attr, we want to attach an event listener which
	                    // allows the table sizing to automatically adjust when the window is
	                    // resized. Use the width attr rather than CSS, since we can't know if the
	                    // CSS is a relative value or absolute - DOM read is always px.
	                    if (tableWidthAttr) {
	                        table.style.width = _fnStringToCss(tableWidthAttr);
	                    }

	                    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
	                        var bindResize = function () {
	                            $(window).bind('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
	                                _fnAdjustColumnSizing(oSettings);
	                            }));
	                        };

	                        // IE6/7 will crash if we bind a resize event handler on page load.
	                        // To be removed in 1.11 which drops IE6/7 support
	                        if (oSettings.oBrowser.bScrollOversize) {
	                            setTimeout(bindResize, 1000);
	                        }
	                        else {
	                            bindResize();
	                        }

	                        oSettings._reszEvt = true;
	                    }
	                }


	                /**
	                 * Throttle the calls to a function. Arguments and context are maintained for
	                 * the throttled function
	                 *  @param {function} fn Function to be called
	                 *  @param {int} [freq=200] call frequency in mS
	                 *  @returns {function} wrapped function
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnThrottle(fn, freq) {
	                    var
	                        frequency = freq !== undefined ? freq : 200,
	                        last,
	                        timer;

	                    return function () {
	                        var
	                            that = this,
	                            now = +new Date(),
	                            args = arguments;

	                        if (last && now < last + frequency) {
	                            clearTimeout(timer);

	                            timer = setTimeout(function () {
	                                last = undefined;
	                                fn.apply(that, args);
	                            }, frequency);
	                        }
	                        else {
	                            last = now;
	                            fn.apply(that, args);
	                        }
	                    };
	                }


	                /**
	                 * Convert a CSS unit width to pixels (e.g. 2em)
	                 *  @param {string} width width to be converted
	                 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	                 *  @returns {int} width in pixels
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnConvertToWidth(width, parent) {
	                    if (!width) {
	                        return 0;
	                    }

	                    var n = $('<div/>')
	                        .css('width', _fnStringToCss(width))
	                        .appendTo(parent || document.body);

	                    var val = n[0].offsetWidth;
	                    n.remove();

	                    return val;
	                }


	                /**
	                 * Adjust a table's width to take account of vertical scroll bar
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {node} n table node
	                 *  @memberof DataTable#oApi
	                 */

	                function _fnScrollingWidthAdjust(settings, n) {
	                    var scroll = settings.oScroll;

	                    if (scroll.sX || scroll.sY) {
	                        // When y-scrolling only, we want to remove the width of the scroll bar
	                        // so the table + scroll bar will fit into the area available, otherwise
	                        // we fix the table at its current size with no adjustment
	                        var correction = !scroll.sX ? scroll.iBarWidth : 0;
	                        n.style.width = _fnStringToCss($(n).outerWidth() - correction);
	                    }
	                }


	                /**
	                 * Get the widest node
	                 *  @param {object} settings dataTables settings object
	                 *  @param {int} colIdx column of interest
	                 *  @returns {node} widest table node
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetWidestNode(settings, colIdx) {
	                    var idx = _fnGetMaxLenString(settings, colIdx);
	                    if (idx < 0) {
	                        return null;
	                    }

	                    var data = settings.aoData[idx];
	                    return !data.nTr ? // Might not have been created when deferred rendering
	                        $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] :
	                        data.anCells[colIdx];
	                }


	                /**
	                 * Get the maximum strlen for each data column
	                 *  @param {object} settings dataTables settings object
	                 *  @param {int} colIdx column of interest
	                 *  @returns {string} max string length for each column
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnGetMaxLenString(settings, colIdx) {
	                    var s, max = -1, maxIdx = -1;

	                    for (var i = 0, ien = settings.aoData.length ; i < ien ; i++) {
	                        s = _fnGetCellData(settings, i, colIdx, 'display') + '';
	                        s = s.replace(__re_html_remove, '');

	                        if (s.length > max) {
	                            max = s.length;
	                            maxIdx = i;
	                        }
	                    }

	                    return maxIdx;
	                }


	                /**
	                 * Append a CSS unit (only if required) to a string
	                 *  @param {string} value to css-ify
	                 *  @returns {string} value with css unit
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnStringToCss(s) {
	                    if (s === null) {
	                        return '0px';
	                    }

	                    if (typeof s == 'number') {
	                        return s < 0 ?
	                            '0px' :
	                            s + 'px';
	                    }

	                    // Check it has a unit character already
	                    return s.match(/\d$/) ?
	                        s + 'px' :
	                        s;
	                }


	                /**
	                 * Get the width of a scroll bar in this browser being used
	                 *  @returns {int} width in pixels
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnScrollBarWidth() {
	                    // On first run a static variable is set, since this is only needed once.
	                    // Subsequent runs will just use the previously calculated value
	                    var width = DataTable.__scrollbarWidth;

	                    if (width === undefined) {
	                        var sizer = $('<p/>').css({
	                            position: 'absolute',
	                            top: 0,
	                            left: 0,
	                            width: '100%',
	                            height: 150,
	                            padding: 0,
	                            overflow: 'scroll',
	                            visibility: 'hidden'
	                        })
	                            .appendTo('body');

	                        width = sizer[0].offsetWidth - sizer[0].clientWidth;
	                        DataTable.__scrollbarWidth = width;

	                        sizer.remove();
	                    }

	                    return width;
	                }



	                function _fnSortFlatten(settings) {
	                    var
	                        i, iLen, k, kLen,
	                        aSort = [],
	                        aiOrig = [],
	                        aoColumns = settings.aoColumns,
	                        aDataSort, iCol, sType, srcCol,
	                        fixed = settings.aaSortingFixed,
	                        fixedObj = $.isPlainObject(fixed),
	                        nestedSort = [],
	                        add = function (a) {
	                            if (a.length && !$.isArray(a[0])) {
	                                // 1D array
	                                nestedSort.push(a);
	                            }
	                            else {
	                                // 2D array
	                                nestedSort.push.apply(nestedSort, a);
	                            }
	                        };

	                    // Build the sort array, with pre-fix and post-fix options if they have been
	                    // specified
	                    if ($.isArray(fixed)) {
	                        add(fixed);
	                    }

	                    if (fixedObj && fixed.pre) {
	                        add(fixed.pre);
	                    }

	                    add(settings.aaSorting);

	                    if (fixedObj && fixed.post) {
	                        add(fixed.post);
	                    }

	                    for (i = 0 ; i < nestedSort.length ; i++) {
	                        srcCol = nestedSort[i][0];
	                        aDataSort = aoColumns[srcCol].aDataSort;

	                        for (k = 0, kLen = aDataSort.length ; k < kLen ; k++) {
	                            iCol = aDataSort[k];
	                            sType = aoColumns[iCol].sType || 'string';

	                            if (nestedSort[i]._idx === undefined) {
	                                nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
	                            }

	                            aSort.push({
	                                src: srcCol,
	                                col: iCol,
	                                dir: nestedSort[i][1],
	                                index: nestedSort[i]._idx,
	                                type: sType,
	                                formatter: DataTable.ext.type.order[sType + "-pre"]
	                            });
	                        }
	                    }

	                    return aSort;
	                }

	                /**
	                 * Change the order of the table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 *  @todo This really needs split up!
	                 */
	                function _fnSort(oSettings) {
	                    var
	                        i, ien, iLen, j, jLen, k, kLen,
	                        sDataType, nTh,
	                        aiOrig = [],
	                        oExtSort = DataTable.ext.type.order,
	                        aoData = oSettings.aoData,
	                        aoColumns = oSettings.aoColumns,
	                        aDataSort, data, iCol, sType, oSort,
	                        formatters = 0,
	                        sortCol,
	                        displayMaster = oSettings.aiDisplayMaster,
	                        aSort;

	                    // Resolve any column types that are unknown due to addition or invalidation
	                    // @todo Can this be moved into a 'data-ready' handler which is called when
	                    //   data is going to be used in the table?
	                    _fnColumnTypes(oSettings);

	                    aSort = _fnSortFlatten(oSettings);

	                    for (i = 0, ien = aSort.length ; i < ien ; i++) {
	                        sortCol = aSort[i];

	                        // Track if we can use the fast sort algorithm
	                        if (sortCol.formatter) {
	                            formatters++;
	                        }

	                        // Load the data needed for the sort, for each cell
	                        _fnSortData(oSettings, sortCol.col);
	                    }

	                    /* No sorting required if server-side or no sorting array */
	                    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
	                        // Create a value - key array of the current row positions such that we can use their
	                        // current position during the sort, if values match, in order to perform stable sorting
	                        for (i = 0, iLen = displayMaster.length ; i < iLen ; i++) {
	                            aiOrig[displayMaster[i]] = i;
	                        }

	                        /* Do the sort - here we want multi-column sorting based on a given data source (column)
	                         * and sorting function (from oSort) in a certain direction. It's reasonably complex to
	                         * follow on it's own, but this is what we want (example two column sorting):
	                         *  fnLocalSorting = function(a,b){
	                         *    var iTest;
	                         *    iTest = oSort['string-asc']('data11', 'data12');
	                         *      if (iTest !== 0)
	                         *        return iTest;
	                         *    iTest = oSort['numeric-desc']('data21', 'data22');
	                         *    if (iTest !== 0)
	                         *      return iTest;
	                         *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
	                         *  }
	                         * Basically we have a test for each sorting column, if the data in that column is equal,
	                         * test the next column. If all columns match, then we use a numeric sort on the row
	                         * positions in the original data array to provide a stable sort.
	                         *
	                         * Note - I know it seems excessive to have two sorting methods, but the first is around
	                         * 15% faster, so the second is only maintained for backwards compatibility with sorting
	                         * methods which do not have a pre-sort formatting function.
	                         */
	                        if (formatters === aSort.length) {
	                            // All sort types have formatting functions
	                            displayMaster.sort(function (a, b) {
	                                var
	                                    x, y, k, test, sort,
	                                    len = aSort.length,
	                                    dataA = aoData[a]._aSortData,
	                                    dataB = aoData[b]._aSortData;

	                                for (k = 0 ; k < len ; k++) {
	                                    sort = aSort[k];

	                                    x = dataA[sort.col];
	                                    y = dataB[sort.col];

	                                    test = x < y ? -1 : x > y ? 1 : 0;
	                                    if (test !== 0) {
	                                        return sort.dir === 'asc' ? test : -test;
	                                    }
	                                }

	                                x = aiOrig[a];
	                                y = aiOrig[b];
	                                return x < y ? -1 : x > y ? 1 : 0;
	                            });
	                        }
	                        else {
	                            // Depreciated - remove in 1.11 (providing a plug-in option)
	                            // Not all sort types have formatting methods, so we have to call their sorting
	                            // methods.
	                            displayMaster.sort(function (a, b) {
	                                var
	                                    x, y, k, l, test, sort, fn,
	                                    len = aSort.length,
	                                    dataA = aoData[a]._aSortData,
	                                    dataB = aoData[b]._aSortData;

	                                for (k = 0 ; k < len ; k++) {
	                                    sort = aSort[k];

	                                    x = dataA[sort.col];
	                                    y = dataB[sort.col];

	                                    fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
	                                    test = fn(x, y);
	                                    if (test !== 0) {
	                                        return test;
	                                    }
	                                }

	                                x = aiOrig[a];
	                                y = aiOrig[b];
	                                return x < y ? -1 : x > y ? 1 : 0;
	                            });
	                        }
	                    }

	                    /* Tell the draw function that we have sorted the data */
	                    oSettings.bSorted = true;
	                }


	                function _fnSortAria(settings) {
	                    var label;
	                    var nextSort;
	                    var columns = settings.aoColumns;
	                    var aSort = _fnSortFlatten(settings);
	                    var oAria = settings.oLanguage.oAria;

	                    // ARIA attributes - need to loop all columns, to update all (removing old
	                    // attributes as needed)
	                    for (var i = 0, iLen = columns.length ; i < iLen ; i++) {
	                        var col = columns[i];
	                        var asSorting = col.asSorting;
	                        var sTitle = col.sTitle.replace(/<.*?>/g, "");
	                        var th = col.nTh;

	                        // IE7 is throwing an error when setting these properties with jQuery's
	                        // attr() and removeAttr() methods...
	                        th.removeAttribute('aria-sort');

	                        /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
	                        if (col.bSortable) {
	                            if (aSort.length > 0 && aSort[0].col == i) {
	                                th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
	                                nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
	                            }
	                            else {
	                                nextSort = asSorting[0];
	                            }

	                            label = sTitle + (nextSort === "asc" ?
	                                oAria.sSortAscending :
	                                oAria.sSortDescending
	                            );
	                        }
	                        else {
	                            label = sTitle;
	                        }

	                        th.setAttribute('aria-label', label);
	                    }
	                }


	                /**
	                 * Function to run on user sort request
	                 *  @param {object} settings dataTables settings object
	                 *  @param {node} attachTo node to attach the handler to
	                 *  @param {int} colIdx column sorting index
	                 *  @param {boolean} [append=false] Append the requested sort to the existing
	                 *    sort if true (i.e. multi-column sort)
	                 *  @param {function} [callback] callback function
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSortListener(settings, colIdx, append, callback) {
	                    var col = settings.aoColumns[colIdx];
	                    var sorting = settings.aaSorting;
	                    var asSorting = col.asSorting;
	                    var nextSortIdx;
	                    var next = function (a, overflow) {
	                        var idx = a._idx;
	                        if (idx === undefined) {
	                            idx = $.inArray(a[1], asSorting);
	                        }

	                        return idx + 1 < asSorting.length ?
	                            idx + 1 :
	                            overflow ?
	                                null :
	                                0;
	                    };

	                    // Convert to 2D array if needed
	                    if (typeof sorting[0] === 'number') {
	                        sorting = settings.aaSorting = [sorting];
	                    }

	                    // If appending the sort then we are multi-column sorting
	                    if (append && settings.oFeatures.bSortMulti) {
	                        // Are we already doing some kind of sort on this column?
	                        var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

	                        if (sortIdx !== -1) {
	                            // Yes, modify the sort
	                            nextSortIdx = next(sorting[sortIdx], true);

	                            if (nextSortIdx === null && sorting.length === 1) {
	                                nextSortIdx = 0; // can't remove sorting completely
	                            }

	                            if (nextSortIdx === null) {
	                                sorting.splice(sortIdx, 1);
	                            }
	                            else {
	                                sorting[sortIdx][1] = asSorting[nextSortIdx];
	                                sorting[sortIdx]._idx = nextSortIdx;
	                            }
	                        }
	                        else {
	                            // No sort on this column yet
	                            sorting.push([colIdx, asSorting[0], 0]);
	                            sorting[sorting.length - 1]._idx = 0;
	                        }
	                    }
	                    else if (sorting.length && sorting[0][0] == colIdx) {
	                        // Single column - already sorting on this column, modify the sort
	                        nextSortIdx = next(sorting[0]);

	                        sorting.length = 1;
	                        sorting[0][1] = asSorting[nextSortIdx];
	                        sorting[0]._idx = nextSortIdx;
	                    }
	                    else {
	                        // Single column - sort only on this column
	                        sorting.length = 0;
	                        sorting.push([colIdx, asSorting[0]]);
	                        sorting[0]._idx = 0;
	                    }

	                    // Run the sort by calling a full redraw
	                    _fnReDraw(settings);

	                    // callback used for async user interaction
	                    if (typeof callback == 'function') {
	                        callback(settings);
	                    }
	                }


	                /**
	                 * Attach a sort handler (click) to a node
	                 *  @param {object} settings dataTables settings object
	                 *  @param {node} attachTo node to attach the handler to
	                 *  @param {int} colIdx column sorting index
	                 *  @param {function} [callback] callback function
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
	                    var col = settings.aoColumns[colIdx];

	                    _fnBindAction(attachTo, {}, function (e) {
	                        /* If the column is not sortable - don't to anything */
	                        if (col.bSortable === false) {
	                            return;
	                        }

	                        // If processing is enabled use a timeout to allow the processing
	                        // display to be shown - otherwise to it synchronously
	                        if (settings.oFeatures.bProcessing) {
	                            _fnProcessingDisplay(settings, true);

	                            setTimeout(function () {
	                                _fnSortListener(settings, colIdx, e.shiftKey, callback);

	                                // In server-side processing, the draw callback will remove the
	                                // processing display
	                                if (_fnDataSource(settings) !== 'ssp') {
	                                    _fnProcessingDisplay(settings, false);
	                                }
	                            }, 0);
	                        }
	                        else {
	                            _fnSortListener(settings, colIdx, e.shiftKey, callback);
	                        }
	                    });
	                }


	                /**
	                 * Set the sorting classes on table's body, Note: it is safe to call this function
	                 * when bSort and bSortClasses are false
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSortingClasses(settings) {
	                    var oldSort = settings.aLastSort;
	                    var sortClass = settings.oClasses.sSortColumn;
	                    var sort = _fnSortFlatten(settings);
	                    var features = settings.oFeatures;
	                    var i, ien, colIdx;

	                    if (features.bSort && features.bSortClasses) {
	                        // Remove old sorting classes
	                        for (i = 0, ien = oldSort.length ; i < ien ; i++) {
	                            colIdx = oldSort[i].src;

	                            // Remove column sorting
	                            $(_pluck(settings.aoData, 'anCells', colIdx))
	                                .removeClass(sortClass + (i < 2 ? i + 1 : 3));
	                        }

	                        // Add new column sorting
	                        for (i = 0, ien = sort.length ; i < ien ; i++) {
	                            colIdx = sort[i].src;

	                            $(_pluck(settings.aoData, 'anCells', colIdx))
	                                .addClass(sortClass + (i < 2 ? i + 1 : 3));
	                        }
	                    }

	                    settings.aLastSort = sort;
	                }


	                // Get the data to sort a column, be it from cache, fresh (populating the
	                // cache), or from a sort formatter
	                function _fnSortData(settings, idx) {
	                    // Custom sorting function - provided by the sort data type
	                    var column = settings.aoColumns[idx];
	                    var customSort = DataTable.ext.order[column.sSortDataType];
	                    var customData;

	                    if (customSort) {
	                        customData = customSort.call(settings.oInstance, settings, idx,
	                            _fnColumnIndexToVisible(settings, idx)
	                        );
	                    }

	                    // Use / populate cache
	                    var row, cellData;
	                    var formatter = DataTable.ext.type.order[column.sType + "-pre"];

	                    for (var i = 0, ien = settings.aoData.length ; i < ien ; i++) {
	                        row = settings.aoData[i];

	                        if (!row._aSortData) {
	                            row._aSortData = [];
	                        }

	                        if (!row._aSortData[idx] || customSort) {
	                            cellData = customSort ?
	                                customData[i] : // If there was a custom sort function, use data from there
	                                _fnGetCellData(settings, i, idx, 'sort');

	                            row._aSortData[idx] = formatter ?
	                                formatter(cellData) :
	                                cellData;
	                        }
	                    }
	                }



	                /**
	                 * Save the state of a table
	                 *  @param {object} oSettings dataTables settings object
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSaveState(settings) {
	                    if (!settings.oFeatures.bStateSave || settings.bDestroying) {
	                        return;
	                    }

	                    /* Store the interesting variables */
	                    var state = {
	                        time: +new Date(),
	                        start: settings._iDisplayStart,
	                        length: settings._iDisplayLength,
	                        order: $.extend(true, [], settings.aaSorting),
	                        search: _fnSearchToCamel(settings.oPreviousSearch),
	                        columns: $.map(settings.aoColumns, function (col, i) {
	                            return {
	                                visible: col.bVisible,
	                                search: _fnSearchToCamel(settings.aoPreSearchCols[i])
	                            };
	                        })
	                    };

	                    _fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

	                    settings.oSavedState = state;
	                    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
	                }


	                /**
	                 * Attempt to load a saved table state
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {object} oInit DataTables init object so we can override settings
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnLoadState(settings, oInit) {
	                    var i, ien;
	                    var columns = settings.aoColumns;

	                    if (!settings.oFeatures.bStateSave) {
	                        return;
	                    }

	                    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
	                    if (!state || !state.time) {
	                        return;
	                    }

	                    /* Allow custom and plug-in manipulation functions to alter the saved data set and
	                     * cancelling of loading by returning false
	                     */
	                    var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state]);
	                    if ($.inArray(false, abStateLoad) !== -1) {
	                        return;
	                    }

	                    /* Reject old data */
	                    var duration = settings.iStateDuration;
	                    if (duration > 0 && state.time < +new Date() - (duration * 1000)) {
	                        return;
	                    }

	                    // Number of columns have changed - all bets are off, no restore of settings
	                    if (columns.length !== state.columns.length) {
	                        return;
	                    }

	                    // Store the saved state so it might be accessed at any time
	                    settings.oLoadedState = $.extend(true, {}, state);

	                    // Restore key features - todo - for 1.11 this needs to be done by
	                    // subscribed events
	                    if (state.start !== undefined) {
	                        settings._iDisplayStart = state.start;
	                        settings.iInitDisplayStart = state.start;
	                    }
	                    if (state.length !== undefined) {
	                        settings._iDisplayLength = state.length;
	                    }

	                    // Order
	                    if (state.order !== undefined) {
	                        settings.aaSorting = [];
	                        $.each(state.order, function (i, col) {
	                            settings.aaSorting.push(col[0] >= columns.length ?
	                                [0, col[1]] :
	                                col
	                            );
	                        });
	                    }

	                    // Search
	                    if (state.search !== undefined) {
	                        $.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
	                    }

	                    // Columns
	                    for (i = 0, ien = state.columns.length ; i < ien ; i++) {
	                        var col = state.columns[i];

	                        // Visibility
	                        if (col.visible !== undefined) {
	                            columns[i].bVisible = col.visible;
	                        }

	                        // Search
	                        if (col.search !== undefined) {
	                            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
	                        }
	                    }

	                    _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, state]);
	                }


	                /**
	                 * Return the settings object for a particular table
	                 *  @param {node} table table we are using as a dataTable
	                 *  @returns {object} Settings object - or null if not found
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnSettingsFromNode(table) {
	                    var settings = DataTable.settings;
	                    var idx = $.inArray(table, _pluck(settings, 'nTable'));

	                    return idx !== -1 ?
	                        settings[idx] :
	                        null;
	                }


	                /**
	                 * Log an error message
	                 *  @param {object} settings dataTables settings object
	                 *  @param {int} level log error messages, or display them to the user
	                 *  @param {string} msg error message
	                 *  @param {int} tn Technical note id to get more information about the error.
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnLog(settings, level, msg, tn) {
	                    msg = 'DataTables warning: ' +
	                        (settings !== null ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

	                    if (tn) {
	                        msg += '. For more information about this error, please see ' +
	                        'http://datatables.net/tn/' + tn;
	                    }

	                    if (!level) {
	                        // Backwards compatibility pre 1.10
	                        var ext = DataTable.ext;
	                        var type = ext.sErrMode || ext.errMode;

	                        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);

	                        if (type == 'alert') {
	                            alert(msg);
	                        }
	                        else if (type == 'throw') {
	                            throw new Error(msg);
	                        }
	                        else if (typeof type == 'function') {
	                            type(settings, tn, msg);
	                        }
	                    }
	                    else if (window.console && console.log) {
	                        console.log(msg);
	                    }
	                }


	                /**
	                 * See if a property is defined on one object, if so assign it to the other object
	                 *  @param {object} ret target object
	                 *  @param {object} src source object
	                 *  @param {string} name property
	                 *  @param {string} [mappedName] name to map too - optional, name used if not given
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnMap(ret, src, name, mappedName) {
	                    if ($.isArray(name)) {
	                        $.each(name, function (i, val) {
	                            if ($.isArray(val)) {
	                                _fnMap(ret, src, val[0], val[1]);
	                            }
	                            else {
	                                _fnMap(ret, src, val);
	                            }
	                        });

	                        return;
	                    }

	                    if (mappedName === undefined) {
	                        mappedName = name;
	                    }

	                    if (src[name] !== undefined) {
	                        ret[mappedName] = src[name];
	                    }
	                }


	                /**
	                 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	                 * shallow copy arrays. The reason we need to do this, is that we don't want to
	                 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	                 * able to override them, but we do want to deep copy arrays.
	                 *  @param {object} out Object to extend
	                 *  @param {object} extender Object from which the properties will be applied to
	                 *      out
	                 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	                 *      independent copy with the exception of the `data` or `aaData` parameters
	                 *      if they are present. This is so you can pass in a collection to
	                 *      DataTables and have that used as your data source without breaking the
	                 *      references
	                 *  @returns {object} out Reference, just for convenience - out === the return.
	                 *  @memberof DataTable#oApi
	                 *  @todo This doesn't take account of arrays inside the deep copied objects.
	                 */
	                function _fnExtend(out, extender, breakRefs) {
	                    var val;

	                    for (var prop in extender) {
	                        if (extender.hasOwnProperty(prop)) {
	                            val = extender[prop];

	                            if ($.isPlainObject(val)) {
	                                if (!$.isPlainObject(out[prop])) {
	                                    out[prop] = {};
	                                }
	                                $.extend(true, out[prop], val);
	                            }
	                            else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
	                                out[prop] = val.slice();
	                            }
	                            else {
	                                out[prop] = val;
	                            }
	                        }
	                    }

	                    return out;
	                }


	                /**
	                 * Bind an event handers to allow a click or return key to activate the callback.
	                 * This is good for accessibility since a return on the keyboard will have the
	                 * same effect as a click, if the element has focus.
	                 *  @param {element} n Element to bind the action to
	                 *  @param {object} oData Data object to pass to the triggered function
	                 *  @param {function} fn Callback function for when the event is triggered
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnBindAction(n, oData, fn) {
	                    $(n)
	                        .bind('click.DT', oData, function (e) {
	                            n.blur(); // Remove focus outline for mouse users
	                            fn(e);
	                        })
	                        .bind('keypress.DT', oData, function (e) {
	                            if (e.which === 13) {
	                                e.preventDefault();
	                                fn(e);
	                            }
	                        })
	                        .bind('selectstart.DT', function () {
	                            /* Take the brutal approach to cancelling text selection */
	                            return false;
	                        });
	                }


	                /**
	                 * Register a callback function. Easily allows a callback function to be added to
	                 * an array store of callback functions that can then all be called together.
	                 *  @param {object} oSettings dataTables settings object
	                 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	                 *  @param {function} fn Function to be called back
	                 *  @param {string} sName Identifying name for the callback (i.e. a label)
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnCallbackReg(oSettings, sStore, fn, sName) {
	                    if (fn) {
	                        oSettings[sStore].push({
	                            "fn": fn,
	                            "sName": sName
	                        });
	                    }
	                }


	                /**
	                 * Fire callback functions and trigger events. Note that the loop over the
	                 * callback array store is done backwards! Further note that you do not want to
	                 * fire off triggers in time sensitive applications (for example cell creation)
	                 * as its slow.
	                 *  @param {object} settings dataTables settings object
	                 *  @param {string} callbackArr Name of the array storage for the callbacks in
	                 *      oSettings
	                 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	                 *      null no trigger is fired
	                 *  @param {array} args Array of arguments to pass to the callback function /
	                 *      trigger
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnCallbackFire(settings, callbackArr, eventName, args) {
	                    var ret = [];

	                    if (callbackArr) {
	                        ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
	                            return val.fn.apply(settings.oInstance, args);
	                        });
	                    }

	                    if (eventName !== null) {
	                        var e = $.Event(eventName + '.dt');

	                        $(settings.nTable).trigger(e, args);

	                        ret.push(e.result);
	                    }

	                    return ret;
	                }


	                function _fnLengthOverflow(settings) {
	                    var
	                        start = settings._iDisplayStart,
	                        end = settings.fnDisplayEnd(),
	                        len = settings._iDisplayLength;

	                    /* If we have space to show extra rows (backing up from the end point - then do so */
	                    if (start >= end) {
	                        start = end - len;
	                    }

	                    // Keep the start record on the current page
	                    start -= (start % len);

	                    if (len === -1 || start < 0) {
	                        start = 0;
	                    }

	                    settings._iDisplayStart = start;
	                }


	                function _fnRenderer(settings, type) {
	                    var renderer = settings.renderer;
	                    var host = DataTable.ext.renderer[type];

	                    if ($.isPlainObject(renderer) && renderer[type]) {
	                        // Specific renderer for this type. If available use it, otherwise use
	                        // the default.
	                        return host[renderer[type]] || host._;
	                    }
	                    else if (typeof renderer === 'string') {
	                        // Common renderer - if there is one available for this type use it,
	                        // otherwise use the default
	                        return host[renderer] || host._;
	                    }

	                    // Use the default
	                    return host._;
	                }


	                /**
	                 * Detect the data source being used for the table. Used to simplify the code
	                 * a little (ajax) and to make it compress a little smaller.
	                 *
	                 *  @param {object} settings dataTables settings object
	                 *  @returns {string} Data source
	                 *  @memberof DataTable#oApi
	                 */
	                function _fnDataSource(settings) {
	                    if (settings.oFeatures.bServerSide) {
	                        return 'ssp';
	                    }
	                    else if (settings.ajax || settings.sAjaxSource) {
	                        return 'ajax';
	                    }
	                    return 'dom';
	                }


	                DataTable = function (options) {
	                    /**
	                     * Perform a jQuery selector action on the table's TR elements (from the tbody) and
	                     * return the resulting jQuery object.
	                     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	                     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	                     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
	                     *    criterion ("applied") or all TR elements (i.e. no filter).
	                     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
	                     *    Can be either 'current', whereby the current sorting of the table is used, or
	                     *    'original' whereby the original order the data was read into the table is used.
	                     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	                     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	                     *    'current' and filter is 'applied', regardless of what they might be given as.
	                     *  @returns {object} jQuery object, filtered by the given selector.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Highlight every second row
	                     *      oTable.$('tr:odd').css('backgroundColor', 'blue');
	                     *    } );
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Filter to rows with 'Webkit' in them, add a background colour and then
	                     *      // remove the filter, thus highlighting the 'Webkit' rows only.
	                     *      oTable.fnFilter('Webkit');
	                     *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
	                     *      oTable.fnFilter('');
	                     *    } );
	                     */
	                    this.$ = function (sSelector, oOpts) {
	                        return this.api(true).$(sSelector, oOpts);
	                    };


	                    /**
	                     * Almost identical to $ in operation, but in this case returns the data for the matched
	                     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
	                     * rather than any descendants, so the data can be obtained for the row/cell. If matching
	                     * rows are found, the data returned is the original data array/object that was used to
	                     * create the row (or a generated array if from a DOM source).
	                     *
	                     * This method is often useful in-combination with $ where both functions are given the
	                     * same parameters and the array indexes will match identically.
	                     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	                     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	                     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
	                     *    criterion ("applied") or all elements (i.e. no filter).
	                     *  @param {string} [oOpts.order=current] Order of the data in the processed array.
	                     *    Can be either 'current', whereby the current sorting of the table is used, or
	                     *    'original' whereby the original order the data was read into the table is used.
	                     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	                     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	                     *    'current' and filter is 'applied', regardless of what they might be given as.
	                     *  @returns {array} Data for the matched elements. If any elements, as a result of the
	                     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
	                     *    entry in the array.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Get the data from the first row in the table
	                     *      var data = oTable._('tr:first');
	                     *
	                     *      // Do something useful with the data
	                     *      alert( "First cell is: "+data[0] );
	                     *    } );
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Filter to 'Webkit' and get all data for
	                     *      oTable.fnFilter('Webkit');
	                     *      var data = oTable._('tr', {"search": "applied"});
	                     *
	                     *      // Do something with the data
	                     *      alert( data.length+" rows matched the search" );
	                     *    } );
	                     */
	                    this._ = function (sSelector, oOpts) {
	                        return this.api(true).rows(sSelector, oOpts).data();
	                    };


	                    /**
	                     * Create a DataTables Api instance, with the currently selected tables for
	                     * the Api's context.
	                     * @param {boolean} [traditional=false] Set the API instance's context to be
	                     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
	                     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
	                     *   or if all tables captured in the jQuery object should be used.
	                     * @return {DataTables.Api}
	                     */
	                    this.api = function (traditional) {
	                        return traditional ?
	                            new _Api(
	                                _fnSettingsFromNode(this[_ext.iApiIndex])
	                            ) :
	                            new _Api(this);
	                    };


	                    /**
	                     * Add a single new row or multiple rows of data to the table. Please note
	                     * that this is suitable for client-side processing only - if you are using
	                     * server-side processing (i.e. "bServerSide": true), then to add data, you
	                     * must add it to the data source, i.e. the server-side, through an Ajax call.
	                     *  @param {array|object} data The data to be added to the table. This can be:
	                     *    <ul>
	                     *      <li>1D array of data - add a single row with the data provided</li>
	                     *      <li>2D array of arrays - add multiple rows in a single call</li>
	                     *      <li>object - data object when using <i>mData</i></li>
	                     *      <li>array of objects - multiple data objects when using <i>mData</i></li>
	                     *    </ul>
	                     *  @param {bool} [redraw=true] redraw the table or not
	                     *  @returns {array} An array of integers, representing the list of indexes in
	                     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
	                     *    the table.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    // Global var for counter
	                     *    var giCount = 2;
	                     *
	                     *    $(document).ready(function() {
	                     *      $('#example').dataTable();
	                     *    } );
	                     *
	                     *    function fnClickAddRow() {
	                     *      $('#example').dataTable().fnAddData( [
	                     *        giCount+".1",
	                     *        giCount+".2",
	                     *        giCount+".3",
	                     *        giCount+".4" ]
	                     *      );
	                     *
	                     *      giCount++;
	                     *    }
	                     */
	                    this.fnAddData = function (data, redraw) {
	                        var api = this.api(true);

	                        /* Check if we want to add multiple rows or not */
	                        var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ?
	                            api.rows.add(data) :
	                            api.row.add(data);

	                        if (redraw === undefined || redraw) {
	                            api.draw();
	                        }

	                        return rows.flatten().toArray();
	                    };


	                    /**
	                     * This function will make DataTables recalculate the column sizes, based on the data
	                     * contained in the table and the sizes applied to the columns (in the DOM, CSS or
	                     * through the sWidth parameter). This can be useful when the width of the table's
	                     * parent element changes (for example a window resize).
	                     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable( {
	                     *        "sScrollY": "200px",
	                     *        "bPaginate": false
	                     *      } );
	                     *
	                     *      $(window).bind('resize', function () {
	                     *        oTable.fnAdjustColumnSizing();
	                     *      } );
	                     *    } );
	                     */
	                    this.fnAdjustColumnSizing = function (bRedraw) {
	                        var api = this.api(true).columns.adjust();
	                        var settings = api.settings()[0];
	                        var scroll = settings.oScroll;

	                        if (bRedraw === undefined || bRedraw) {
	                            api.draw(false);
	                        }
	                        else if (scroll.sX !== "" || scroll.sY !== "") {
	                            /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
	                            _fnScrollDraw(settings);
	                        }
	                    };


	                    /**
	                     * Quickly and simply clear a table
	                     *  @param {bool} [bRedraw=true] redraw the table or not
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
	                     *      oTable.fnClearTable();
	                     *    } );
	                     */
	                    this.fnClearTable = function (bRedraw) {
	                        var api = this.api(true).clear();

	                        if (bRedraw === undefined || bRedraw) {
	                            api.draw();
	                        }
	                    };


	                    /**
	                     * The exact opposite of 'opening' a row, this function will close any rows which
	                     * are currently 'open'.
	                     *  @param {node} nTr the table row to 'close'
	                     *  @returns {int} 0 on success, or 1 if failed (can't find the row)
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable;
	                     *
	                     *      // 'open' an information row when a row is clicked on
	                     *      $('#example tbody tr').click( function () {
	                     *        if ( oTable.fnIsOpen(this) ) {
	                     *          oTable.fnClose( this );
	                     *        } else {
	                     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	                     *        }
	                     *      } );
	                     *
	                     *      oTable = $('#example').dataTable();
	                     *    } );
	                     */
	                    this.fnClose = function (nTr) {
	                        this.api(true).row(nTr).child.hide();
	                    };


	                    /**
	                     * Remove a row for the table
	                     *  @param {mixed} target The index of the row from aoData to be deleted, or
	                     *    the TR element you want to delete
	                     *  @param {function|null} [callBack] Callback function
	                     *  @param {bool} [redraw=true] Redraw the table or not
	                     *  @returns {array} The row that was deleted
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Immediately remove the first row
	                     *      oTable.fnDeleteRow( 0 );
	                     *    } );
	                     */
	                    this.fnDeleteRow = function (target, callback, redraw) {
	                        var api = this.api(true);
	                        var rows = api.rows(target);
	                        var settings = rows.settings()[0];
	                        var data = settings.aoData[rows[0][0]];

	                        rows.remove();

	                        if (callback) {
	                            callback.call(this, settings, data);
	                        }

	                        if (redraw === undefined || redraw) {
	                            api.draw();
	                        }

	                        return data;
	                    };


	                    /**
	                     * Restore the table to it's original state in the DOM by removing all of DataTables
	                     * enhancements, alterations to the DOM structure of the table and event listeners.
	                     *  @param {boolean} [remove=false] Completely remove the table from the DOM
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
	                     *      var oTable = $('#example').dataTable();
	                     *      oTable.fnDestroy();
	                     *    } );
	                     */
	                    this.fnDestroy = function (remove) {
	                        this.api(true).destroy(remove);
	                    };


	                    /**
	                     * Redraw the table
	                     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
	                     *      oTable.fnDraw();
	                     *    } );
	                     */
	                    this.fnDraw = function (complete) {
	                        // Note that this isn't an exact match to the old call to _fnDraw - it takes
	                        // into account the new data, but can hold position.
	                        this.api(true).draw(complete);
	                    };


	                    /**
	                     * Filter the input based on data
	                     *  @param {string} sInput String to filter the table on
	                     *  @param {int|null} [iColumn] Column to limit filtering to
	                     *  @param {bool} [bRegex=false] Treat as regular expression or not
	                     *  @param {bool} [bSmart=true] Perform smart filtering or not
	                     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
	                     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Sometime later - filter...
	                     *      oTable.fnFilter( 'test string' );
	                     *    } );
	                     */
	                    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
	                        var api = this.api(true);

	                        if (iColumn === null || iColumn === undefined) {
	                            api.search(sInput, bRegex, bSmart, bCaseInsensitive);
	                        }
	                        else {
	                            api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
	                        }

	                        api.draw();
	                    };


	                    /**
	                     * Get the data for the whole table, an individual row or an individual cell based on the
	                     * provided parameters.
	                     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
	                     *    a TR node then the data source for the whole row will be returned. If given as a
	                     *    TD/TH cell node then iCol will be automatically calculated and the data for the
	                     *    cell returned. If given as an integer, then this is treated as the aoData internal
	                     *    data index for the row (see fnGetPosition) and the data for that row used.
	                     *  @param {int} [col] Optional column index that you want the data of.
	                     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
	                     *    returned. If mRow is defined, just data for that row, and is iCol is
	                     *    defined, only data for the designated cell is returned.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    // Row data
	                     *    $(document).ready(function() {
	                     *      oTable = $('#example').dataTable();
	                     *
	                     *      oTable.$('tr').click( function () {
	                     *        var data = oTable.fnGetData( this );
	                     *        // ... do something with the array / object of data for the row
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Individual cell data
	                     *    $(document).ready(function() {
	                     *      oTable = $('#example').dataTable();
	                     *
	                     *      oTable.$('td').click( function () {
	                     *        var sData = oTable.fnGetData( this );
	                     *        alert( 'The cell clicked on had the value of '+sData );
	                     *      } );
	                     *    } );
	                     */
	                    this.fnGetData = function (src, col) {
	                        var api = this.api(true);

	                        if (src !== undefined) {
	                            var type = src.nodeName ? src.nodeName.toLowerCase() : '';

	                            return col !== undefined || type == 'td' || type == 'th' ?
	                                api.cell(src, col).data() :
	                                api.row(src).data() || null;
	                        }

	                        return api.data().toArray();
	                    };


	                    /**
	                     * Get an array of the TR nodes that are used in the table's body. Note that you will
	                     * typically want to use the '$' API method in preference to this as it is more
	                     * flexible.
	                     *  @param {int} [iRow] Optional row index for the TR element you want
	                     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
	                     *    in the table's body, or iRow is defined, just the TR element requested.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Get the nodes from the table
	                     *      var nNodes = oTable.fnGetNodes( );
	                     *    } );
	                     */
	                    this.fnGetNodes = function (iRow) {
	                        var api = this.api(true);

	                        return iRow !== undefined ?
	                            api.row(iRow).node() :
	                            api.rows().nodes().flatten().toArray();
	                    };


	                    /**
	                     * Get the array indexes of a particular cell from it's DOM element
	                     * and column index including hidden columns
	                     *  @param {node} node this can either be a TR, TD or TH in the table's body
	                     *  @returns {int} If nNode is given as a TR, then a single index is returned, or
	                     *    if given as a cell, an array of [row index, column index (visible),
	                     *    column index (all)] is given.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      $('#example tbody td').click( function () {
	                     *        // Get the position of the current data from the node
	                     *        var aPos = oTable.fnGetPosition( this );
	                     *
	                     *        // Get the data array for this row
	                     *        var aData = oTable.fnGetData( aPos[0] );
	                     *
	                     *        // Update the data array and return the value
	                     *        aData[ aPos[1] ] = 'clicked';
	                     *        this.innerHTML = 'clicked';
	                     *      } );
	                     *
	                     *      // Init DataTables
	                     *      oTable = $('#example').dataTable();
	                     *    } );
	                     */
	                    this.fnGetPosition = function (node) {
	                        var api = this.api(true);
	                        var nodeName = node.nodeName.toUpperCase();

	                        if (nodeName == 'TR') {
	                            return api.row(node).index();
	                        }
	                        else if (nodeName == 'TD' || nodeName == 'TH') {
	                            var cell = api.cell(node).index();

	                            return [
	                                cell.row,
	                                cell.columnVisible,
	                                cell.column
	                            ];
	                        }
	                        return null;
	                    };


	                    /**
	                     * Check to see if a row is 'open' or not.
	                     *  @param {node} nTr the table row to check
	                     *  @returns {boolean} true if the row is currently open, false otherwise
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable;
	                     *
	                     *      // 'open' an information row when a row is clicked on
	                     *      $('#example tbody tr').click( function () {
	                     *        if ( oTable.fnIsOpen(this) ) {
	                     *          oTable.fnClose( this );
	                     *        } else {
	                     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	                     *        }
	                     *      } );
	                     *
	                     *      oTable = $('#example').dataTable();
	                     *    } );
	                     */
	                    this.fnIsOpen = function (nTr) {
	                        return this.api(true).row(nTr).child.isShown();
	                    };


	                    /**
	                     * This function will place a new row directly after a row which is currently
	                     * on display on the page, with the HTML contents that is passed into the
	                     * function. This can be used, for example, to ask for confirmation that a
	                     * particular record should be deleted.
	                     *  @param {node} nTr The table row to 'open'
	                     *  @param {string|node|jQuery} mHtml The HTML to put into the row
	                     *  @param {string} sClass Class to give the new TD cell
	                     *  @returns {node} The row opened. Note that if the table row passed in as the
	                     *    first parameter, is not found in the table, this method will silently
	                     *    return.
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable;
	                     *
	                     *      // 'open' an information row when a row is clicked on
	                     *      $('#example tbody tr').click( function () {
	                     *        if ( oTable.fnIsOpen(this) ) {
	                     *          oTable.fnClose( this );
	                     *        } else {
	                     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	                     *        }
	                     *      } );
	                     *
	                     *      oTable = $('#example').dataTable();
	                     *    } );
	                     */
	                    this.fnOpen = function (nTr, mHtml, sClass) {
	                        return this.api(true)
	                            .row(nTr)
	                            .child(mHtml, sClass)
	                            .show()
	                            .child()[0];
	                    };


	                    /**
	                     * Change the pagination - provides the internal logic for pagination in a simple API
	                     * function. With this function you can have a DataTables table go to the next,
	                     * previous, first or last pages.
	                     *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
	                     *    or page number to jump to (integer), note that page 0 is the first page.
	                     *  @param {bool} [bRedraw=true] Redraw the table or not
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *      oTable.fnPageChange( 'next' );
	                     *    } );
	                     */
	                    this.fnPageChange = function (mAction, bRedraw) {
	                        var api = this.api(true).page(mAction);

	                        if (bRedraw === undefined || bRedraw) {
	                            api.draw(false);
	                        }
	                    };


	                    /**
	                     * Show a particular column
	                     *  @param {int} iCol The column whose display should be changed
	                     *  @param {bool} bShow Show (true) or hide (false) the column
	                     *  @param {bool} [bRedraw=true] Redraw the table or not
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Hide the second column after initialisation
	                     *      oTable.fnSetColumnVis( 1, false );
	                     *    } );
	                     */
	                    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
	                        var api = this.api(true).column(iCol).visible(bShow);

	                        if (bRedraw === undefined || bRedraw) {
	                            api.columns.adjust().draw();
	                        }
	                    };


	                    /**
	                     * Get the settings for a particular table for external manipulation
	                     *  @returns {object} DataTables settings object. See
	                     *    {@link DataTable.models.oSettings}
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *      var oSettings = oTable.fnSettings();
	                     *
	                     *      // Show an example parameter from the settings
	                     *      alert( oSettings._iDisplayStart );
	                     *    } );
	                     */
	                    this.fnSettings = function () {
	                        return _fnSettingsFromNode(this[_ext.iApiIndex]);
	                    };


	                    /**
	                     * Sort the table by a particular column
	                     *  @param {int} iCol the data index to sort on. Note that this will not match the
	                     *    'display index' if you have hidden data entries
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Sort immediately with columns 0 and 1
	                     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
	                     *    } );
	                     */
	                    this.fnSort = function (aaSort) {
	                        this.api(true).order(aaSort).draw();
	                    };


	                    /**
	                     * Attach a sort listener to an element for a given column
	                     *  @param {node} nNode the element to attach the sort listener to
	                     *  @param {int} iColumn the column that a click on this node will sort on
	                     *  @param {function} [fnCallback] callback function when sort is run
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *
	                     *      // Sort on column 1, when 'sorter' is clicked on
	                     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
	                     *    } );
	                     */
	                    this.fnSortListener = function (nNode, iColumn, fnCallback) {
	                        this.api(true).order.listener(nNode, iColumn, fnCallback);
	                    };


	                    /**
	                     * Update a table cell or row - this method will accept either a single value to
	                     * update the cell with, an array of values with one element for each column or
	                     * an object in the same format as the original data source. The function is
	                     * self-referencing in order to make the multi column updates easier.
	                     *  @param {object|array|string} mData Data to update the cell/row with
	                     *  @param {node|int} mRow TR element you want to update or the aoData index
	                     *  @param {int} [iColumn] The column to update, give as null or undefined to
	                     *    update a whole row.
	                     *  @param {bool} [bRedraw=true] Redraw the table or not
	                     *  @param {bool} [bAction=true] Perform pre-draw actions or not
	                     *  @returns {int} 0 on success, 1 on error
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
	                     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
	                     *    } );
	                     */
	                    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
	                        var api = this.api(true);

	                        if (iColumn === undefined || iColumn === null) {
	                            api.row(mRow).data(mData);
	                        }
	                        else {
	                            api.cell(mRow, iColumn).data(mData);
	                        }

	                        if (bAction === undefined || bAction) {
	                            api.columns.adjust();
	                        }

	                        if (bRedraw === undefined || bRedraw) {
	                            api.draw();
	                        }
	                        return 0;
	                    };


	                    /**
	                     * Provide a common method for plug-ins to check the version of DataTables being used, in order
	                     * to ensure compatibility.
	                     *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
	                     *    formats "X" and "X.Y" are also acceptable.
	                     *  @returns {boolean} true if this version of DataTables is greater or equal to the required
	                     *    version, or false if this version of DataTales is not suitable
	                     *  @method
	                     *  @dtopt API
	                     *  @deprecated Since v1.10
	                     *
	                     *  @example
	                     *    $(document).ready(function() {
	                     *      var oTable = $('#example').dataTable();
	                     *      alert( oTable.fnVersionCheck( '1.9.0' ) );
	                     *    } );
	                     */
	                    this.fnVersionCheck = _ext.fnVersionCheck;


	                    var _that = this;
	                    var emptyInit = options === undefined;
	                    var len = this.length;

	                    if (emptyInit) {
	                        options = {};
	                    }

	                    this.oApi = this.internal = _ext.internal;

	                    // Extend with old style plug-in API methods
	                    for (var fn in DataTable.ext.internal) {
	                        if (fn) {
	                            this[fn] = _fnExternApiFunc(fn);
	                        }
	                    }

	                    this.each(function () {
	                        // For each initialisation we want to give it a clean initialisation
	                        // object that can be bashed around
	                        var o = {};
	                        var oInit = len > 1 ? // optimisation for single table case
	                            _fnExtend(o, options, true) :
	                            options;

	                        /*global oInit,_that,emptyInit*/
	                        var i = 0, iLen, j, jLen, k, kLen;
	                        var sId = this.getAttribute('id');
	                        var bInitHandedOff = false;
	                        var defaults = DataTable.defaults;
	                        var $this = $(this);


	                        /* Sanity check */
	                        if (this.nodeName.toLowerCase() != 'table') {
	                            _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
	                            return;
	                        }

	                        /* Backwards compatibility for the defaults */
	                        _fnCompatOpts(defaults);
	                        _fnCompatCols(defaults.column);

	                        /* Convert the camel-case defaults to Hungarian */
	                        _fnCamelToHungarian(defaults, defaults, true);
	                        _fnCamelToHungarian(defaults.column, defaults.column, true);

	                        /* Setting up the initialisation object */
	                        _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));



	                        /* Check to see if we are re-initialising a table */
	                        var allSettings = DataTable.settings;
	                        for (i = 0, iLen = allSettings.length ; i < iLen ; i++) {
	                            var s = allSettings[i];

	                            /* Base check on table node */
	                            if (s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this)) {
	                                var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
	                                var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

	                                if (emptyInit || bRetrieve) {
	                                    return s.oInstance;
	                                }
	                                else if (bDestroy) {
	                                    s.oInstance.fnDestroy();
	                                    break;
	                                }
	                                else {
	                                    _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
	                                    return;
	                                }
	                            }

	                            /* If the element we are initialising has the same ID as a table which was previously
	                             * initialised, but the table nodes don't match (from before) then we destroy the old
	                             * instance by simply deleting it. This is under the assumption that the table has been
	                             * destroyed by other methods. Anyone using non-id selectors will need to do this manually
	                             */
	                            if (s.sTableId == this.id) {
	                                allSettings.splice(i, 1);
	                                break;
	                            }
	                        }

	                        /* Ensure the table has an ID - required for accessibility */
	                        if (sId === null || sId === "") {
	                            sId = "DataTables_Table_" + (DataTable.ext._unique++);
	                            this.id = sId;
	                        }

	                        /* Create the settings object for this table and set some of the default parameters */
	                        var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
	                            "sDestroyWidth": $this[0].style.width,
	                            "sInstance": sId,
	                            "sTableId": sId
	                        });
	                        oSettings.nTable = this;
	                        oSettings.oApi = _that.internal;
	                        oSettings.oInit = oInit;

	                        allSettings.push(oSettings);

	                        // Need to add the instance after the instance after the settings object has been added
	                        // to the settings array, so we can self reference the table instance if more than one
	                        oSettings.oInstance = (_that.length === 1) ? _that : $this.dataTable();

	                        // Backwards compatibility, before we apply all the defaults
	                        _fnCompatOpts(oInit);

	                        if (oInit.oLanguage) {
	                            _fnLanguageCompat(oInit.oLanguage);
	                        }

	                        // If the length menu is given, but the init display length is not, use the length menu
	                        if (oInit.aLengthMenu && !oInit.iDisplayLength) {
	                            oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ?
	                                oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
	                        }

	                        // Apply the defaults and init options to make a single init object will all
	                        // options defined from defaults and instance options.
	                        oInit = _fnExtend($.extend(true, {}, defaults), oInit);


	                        // Map the initialisation options onto the settings object
	                        _fnMap(oSettings.oFeatures, oInit, [
	                            "bPaginate",
	                            "bLengthChange",
	                            "bFilter",
	                            "bSort",
	                            "bSortMulti",
	                            "bInfo",
	                            "bProcessing",
	                            "bAutoWidth",
	                            "bSortClasses",
	                            "bServerSide",
	                            "bDeferRender"
	                        ]);
	                        _fnMap(oSettings, oInit, [
	                            "asStripeClasses",
	                            "ajax",
	                            "fnServerData",
	                            "fnFormatNumber",
	                            "sServerMethod",
	                            "aaSorting",
	                            "aaSortingFixed",
	                            "aLengthMenu",
	                            "sPaginationType",
	                            "sAjaxSource",
	                            "sAjaxDataProp",
	                            "iStateDuration",
	                            "sDom",
	                            "bSortCellsTop",
	                            "iTabIndex",
	                            "fnStateLoadCallback",
	                            "fnStateSaveCallback",
	                            "renderer",
	                            "searchDelay",
	                            ["iCookieDuration", "iStateDuration"], // backwards compat
	                            ["oSearch", "oPreviousSearch"],
	                            ["aoSearchCols", "aoPreSearchCols"],
	                            ["iDisplayLength", "_iDisplayLength"],
	                            ["bJQueryUI", "bJUI"]
	                        ]);
	                        _fnMap(oSettings.oScroll, oInit, [
	                            ["sScrollX", "sX"],
	                            ["sScrollXInner", "sXInner"],
	                            ["sScrollY", "sY"],
	                            ["bScrollCollapse", "bCollapse"]
	                        ]);
	                        _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

	                        /* Callback functions which are array driven */
	                        _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
	                        _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
	                        _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
	                        _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
	                        _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
	                        _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
	                        _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
	                        _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
	                        _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
	                        _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
	                        _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

	                        var oClasses = oSettings.oClasses;

	                        // @todo Remove in 1.11
	                        if (oInit.bJQueryUI) {
	                            /* Use the JUI classes object for display. You could clone the oStdClasses object if
	                             * you want to have multiple tables with multiple independent classes
	                             */
	                            $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);

	                            if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
	                                /* Set the DOM to use a layout suitable for jQuery UI's theming */
	                                oSettings.sDom = '<"H"lfr>t<"F"ip>';
	                            }

	                            if (!oSettings.renderer) {
	                                oSettings.renderer = 'jqueryui';
	                            }
	                            else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
	                                oSettings.renderer.header = 'jqueryui';
	                            }
	                        }
	                        else {
	                            $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
	                        }
	                        $this.addClass(oClasses.sTable);

	                        /* Calculate the scroll bar width and cache it for use later on */
	                        if (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") {
	                            oSettings.oScroll.iBarWidth = _fnScrollBarWidth();
	                        }
	                        if (oSettings.oScroll.sX === true) { // Easy initialisation of x-scrolling
	                            oSettings.oScroll.sX = '100%';
	                        }

	                        if (oSettings.iInitDisplayStart === undefined) {
	                            /* Display start point, taking into account the save saving */
	                            oSettings.iInitDisplayStart = oInit.iDisplayStart;
	                            oSettings._iDisplayStart = oInit.iDisplayStart;
	                        }

	                        if (oInit.iDeferLoading !== null) {
	                            oSettings.bDeferLoading = true;
	                            var tmp = $.isArray(oInit.iDeferLoading);
	                            oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
	                            oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
	                        }

	                        /* Language definitions */
	                        var oLanguage = oSettings.oLanguage;
	                        $.extend(true, oLanguage, oInit.oLanguage);

	                        if (oLanguage.sUrl !== "") {
	                            /* Get the language definitions from a file - because this Ajax call makes the language
	                             * get async to the remainder of this function we use bInitHandedOff to indicate that
	                             * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
	                             */
	                            $.ajax({
	                                dataType: 'json',
	                                url: oLanguage.sUrl,
	                                success: function (json) {
	                                    _fnLanguageCompat(json);
	                                    _fnCamelToHungarian(defaults.oLanguage, json);
	                                    $.extend(true, oLanguage, json);
	                                    _fnInitialise(oSettings);
	                                },
	                                error: function () {
	                                    // Error occurred loading language file, continue on as best we can
	                                    _fnInitialise(oSettings);
	                                }
	                            });
	                            bInitHandedOff = true;
	                        }

	                        /*
	                         * Stripes
	                         */
	                        if (oInit.asStripeClasses === null) {
	                            oSettings.asStripeClasses = [
	                                oClasses.sStripeOdd,
	                                oClasses.sStripeEven
	                            ];
	                        }

	                        /* Remove row stripe classes if they are already on the table row */
	                        var stripeClasses = oSettings.asStripeClasses;
	                        var rowOne = $this.children('tbody').find('tr').eq(0);
	                        if ($.inArray(true, $.map(stripeClasses, function (el, i) {
	                            return rowOne.hasClass(el);
	                        })) !== -1) {
	                            $('tbody tr', this).removeClass(stripeClasses.join(' '));
	                            oSettings.asDestroyStripes = stripeClasses.slice();
	                        }

	                        /*
	                         * Columns
	                         * See if we should load columns automatically or use defined ones
	                         */
	                        var anThs = [];
	                        var aoColumnsInit;
	                        var nThead = this.getElementsByTagName('thead');
	                        if (nThead.length !== 0) {
	                            _fnDetectHeader(oSettings.aoHeader, nThead[0]);
	                            anThs = _fnGetUniqueThs(oSettings);
	                        }

	                        /* If not given a column array, generate one with nulls */
	                        if (oInit.aoColumns === null) {
	                            aoColumnsInit = [];
	                            for (i = 0, iLen = anThs.length ; i < iLen ; i++) {
	                                aoColumnsInit.push(null);
	                            }
	                        }
	                        else {
	                            aoColumnsInit = oInit.aoColumns;
	                        }

	                        /* Add the columns */
	                        for (i = 0, iLen = aoColumnsInit.length ; i < iLen ; i++) {
	                            _fnAddColumn(oSettings, anThs ? anThs[i] : null);
	                        }

	                        /* Apply the column definitions */
	                        _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
	                            _fnColumnOptions(oSettings, iCol, oDef);
	                        });

	                        /* HTML5 attribute detection - build an mData object automatically if the
	                         * attributes are found
	                         */
	                        if (rowOne.length) {
	                            var a = function (cell, name) {
	                                return cell.getAttribute('data-' + name) !== null ? name : null;
	                            };

	                            $.each(_fnGetRowElements(oSettings, rowOne[0]).cells, function (i, cell) {
	                                var col = oSettings.aoColumns[i];

	                                if (col.mData === i) {
	                                    var sort = a(cell, 'sort') || a(cell, 'order');
	                                    var filter = a(cell, 'filter') || a(cell, 'search');

	                                    if (sort !== null || filter !== null) {
	                                        col.mData = {
	                                            _: i + '.display',
	                                            sort: sort !== null ? i + '.@data-' + sort : undefined,
	                                            type: sort !== null ? i + '.@data-' + sort : undefined,
	                                            filter: filter !== null ? i + '.@data-' + filter : undefined
	                                        };

	                                        _fnColumnOptions(oSettings, i);
	                                    }
	                                }
	                            });
	                        }

	                        var features = oSettings.oFeatures;

	                        /* Must be done after everything which can be overridden by the state saving! */
	                        if (oInit.bStateSave) {
	                            features.bStateSave = true;
	                            _fnLoadState(oSettings, oInit);
	                            _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
	                        }


	                        /*
	                         * Sorting
	                         * @todo For modularisation (1.11) this needs to do into a sort start up handler
	                         */

	                        // If aaSorting is not defined, then we use the first indicator in asSorting
	                        // in case that has been altered, so the default sort reflects that option
	                        if (oInit.aaSorting === undefined) {
	                            var sorting = oSettings.aaSorting;
	                            for (i = 0, iLen = sorting.length ; i < iLen ; i++) {
	                                sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
	                            }
	                        }

	                        /* Do a first pass on the sorting classes (allows any size changes to be taken into
	                         * account, and also will apply sorting disabled classes if disabled
	                         */
	                        _fnSortingClasses(oSettings);

	                        if (features.bSort) {
	                            _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
	                                if (oSettings.bSorted) {
	                                    var aSort = _fnSortFlatten(oSettings);
	                                    var sortedColumns = {};

	                                    $.each(aSort, function (i, val) {
	                                        sortedColumns[val.src] = val.dir;
	                                    });

	                                    _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);
	                                    _fnSortAria(oSettings);
	                                }
	                            });
	                        }

	                        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
	                            if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
	                                _fnSortingClasses(oSettings);
	                            }
	                        }, 'sc');


	                        /*
	                         * Final init
	                         * Cache the header, body and footer as required, creating them if needed
	                         */

	                        /* Browser support detection */
	                        _fnBrowserDetect(oSettings);

	                        // Work around for Webkit bug 83867 - store the caption-side before removing from doc
	                        var captions = $this.children('caption').each(function () {
	                            this._captionSide = $this.css('caption-side');
	                        });

	                        var thead = $this.children('thead');
	                        if (thead.length === 0) {
	                            thead = $('<thead/>').appendTo(this);
	                        }
	                        oSettings.nTHead = thead[0];

	                        var tbody = $this.children('tbody');
	                        if (tbody.length === 0) {
	                            tbody = $('<tbody/>').appendTo(this);
	                        }
	                        oSettings.nTBody = tbody[0];

	                        var tfoot = $this.children('tfoot');
	                        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
	                            // If we are a scrolling table, and no footer has been given, then we need to create
	                            // a tfoot element for the caption element to be appended to
	                            tfoot = $('<tfoot/>').appendTo(this);
	                        }

	                        if (tfoot.length === 0 || tfoot.children().length === 0) {
	                            $this.addClass(oClasses.sNoFooter);
	                        }
	                        else if (tfoot.length > 0) {
	                            oSettings.nTFoot = tfoot[0];
	                            _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
	                        }

	                        /* Check if there is data passing into the constructor */
	                        if (oInit.aaData) {
	                            for (i = 0 ; i < oInit.aaData.length ; i++) {
	                                _fnAddData(oSettings, oInit.aaData[i]);
	                            }
	                        }
	                        else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
	                            /* Grab the data from the page - only do this when deferred loading or no Ajax
	                             * source since there is no point in reading the DOM data if we are then going
	                             * to replace it with Ajax data
	                             */
	                            _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
	                        }

	                        /* Copy the data index array */
	                        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

	                        /* Initialisation complete - table can be drawn */
	                        oSettings.bInitialised = true;

	                        /* Check if we need to initialise the table (it might not have been handed off to the
	                         * language processor)
	                         */
	                        if (bInitHandedOff === false) {
	                            _fnInitialise(oSettings);
	                        }
	                    });
	                    _that = null;
	                    return this;
	                };



	                /**
	                 * Computed structure of the DataTables API, defined by the options passed to
	                 * `DataTable.Api.register()` when building the API.
	                 *
	                 * The structure is built in order to speed creation and extension of the Api
	                 * objects since the extensions are effectively pre-parsed.
	                 *
	                 * The array is an array of objects with the following structure, where this
	                 * base array represents the Api prototype base:
	                 *
	                 *     [
	                 *       {
	                 *         name:      'data'                -- string   - Property name
	                 *         val:       function () {},       -- function - Api method (or undefined if just an object
	                 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	                 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	                 *       },
	                 *       {
	                 *         name:     'row'
	                 *         val:       {},
	                 *         methodExt: [ ... ],
	                 *         propExt:   [
	                 *           {
	                 *             name:      'data'
	                 *             val:       function () {},
	                 *             methodExt: [ ... ],
	                 *             propExt:   [ ... ]
	                 *           },
	                 *           ...
	                 *         ]
	                 *       }
	                 *     ]
	                 *
	                 * @type {Array}
	                 * @ignore
	                 */
	                var __apiStruct = [];


	                /**
	                 * `Array.prototype` reference.
	                 *
	                 * @type object
	                 * @ignore
	                 */
	                var __arrayProto = Array.prototype;


	                /**
	                 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	                 * take several different forms for ease of use.
	                 *
	                 * Each of the input parameter types will be converted to a DataTables settings
	                 * object where possible.
	                 *
	                 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	                 *   of:
	                 *
	                 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	                 *     with be found and used.
	                 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	                 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	                 *   * `object` - DataTables settings object
	                 *   * `DataTables.Api` - API instance
	                 * @return {array|null} Matching DataTables settings objects. `null` or
	                 *   `undefined` is returned if no matching DataTable is found.
	                 * @ignore
	                 */
	                var _toSettings = function (mixed) {
	                    var idx, jq;
	                    var settings = DataTable.settings;
	                    var tables = $.map(settings, function (el, i) {
	                        return el.nTable;
	                    });

	                    if (!mixed) {
	                        return [];
	                    }
	                    else if (mixed.nTable && mixed.oApi) {
	                        // DataTables settings object
	                        return [mixed];
	                    }
	                    else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
	                        // Table node
	                        idx = $.inArray(mixed, tables);
	                        return idx !== -1 ? [settings[idx]] : null;
	                    }
	                    else if (mixed && typeof mixed.settings === 'function') {
	                        return mixed.settings().toArray();
	                    }
	                    else if (typeof mixed === 'string') {
	                        // jQuery selector
	                        jq = $(mixed);
	                    }
	                    else if (mixed instanceof $) {
	                        // jQuery object (also DataTables instance)
	                        jq = mixed;
	                    }

	                    if (jq) {
	                        return jq.map(function (i) {
	                            idx = $.inArray(this, tables);
	                            return idx !== -1 ? settings[idx] : null;
	                        }).toArray();
	                    }
	                };


	                /**
	                 * DataTables API class - used to control and interface with  one or more
	                 * DataTables enhanced tables.
	                 *
	                 * The API class is heavily based on jQuery, presenting a chainable interface
	                 * that you can use to interact with tables. Each instance of the API class has
	                 * a "context" - i.e. the tables that it will operate on. This could be a single
	                 * table, all tables on a page or a sub-set thereof.
	                 *
	                 * Additionally the API is designed to allow you to easily work with the data in
	                 * the tables, retrieving and manipulating it as required. This is done by
	                 * presenting the API class as an array like interface. The contents of the
	                 * array depend upon the actions requested by each method (for example
	                 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	                 * return an array of objects or arrays depending upon your table's
	                 * configuration). The API object has a number of array like methods (`push`,
	                 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	                 * `unique` etc) to assist your working with the data held in a table.
	                 *
	                 * Most methods (those which return an Api instance) are chainable, which means
	                 * the return from a method call also has all of the methods available that the
	                 * top level object had. For example, these two calls are equivalent:
	                 *
	                 *     // Not chained
	                 *     api.row.add( {...} );
	                 *     api.draw();
	                 *
	                 *     // Chained
	                 *     api.row.add( {...} ).draw();
	                 *
	                 * @class DataTable.Api
	                 * @param {array|object|string|jQuery} context DataTable identifier. This is
	                 *   used to define which DataTables enhanced tables this API will operate on.
	                 *   Can be one of:
	                 *
	                 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	                 *     with be found and used.
	                 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	                 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	                 *   * `object` - DataTables settings object
	                 * @param {array} [data] Data to initialise the Api instance with.
	                 *
	                 * @example
	                 *   // Direct initialisation during DataTables construction
	                 *   var api = $('#example').DataTable();
	                 *
	                 * @example
	                 *   // Initialisation using a DataTables jQuery object
	                 *   var api = $('#example').dataTable().api();
	                 *
	                 * @example
	                 *   // Initialisation as a constructor
	                 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	                 */
	                _Api = function (context, data) {
	                    if (!(this instanceof _Api)) {
	                        return new _Api(context, data);
	                    }

	                    var settings = [];
	                    var ctxSettings = function (o) {
	                        var a = _toSettings(o);
	                        if (a) {
	                            settings.push.apply(settings, a);
	                        }
	                    };

	                    if ($.isArray(context)) {
	                        for (var i = 0, ien = context.length ; i < ien ; i++) {
	                            ctxSettings(context[i]);
	                        }
	                    }
	                    else {
	                        ctxSettings(context);
	                    }

	                    // Remove duplicates
	                    this.context = _unique(settings);

	                    // Initial data
	                    if (data) {
	                        this.push.apply(this, data.toArray ? data.toArray() : data);
	                    }

	                    // selector
	                    this.selector = {
	                        rows: null,
	                        cols: null,
	                        opts: null
	                    };

	                    _Api.extend(this, this, __apiStruct);
	                };

	                DataTable.Api = _Api;

	                _Api.prototype = /** @lends DataTables.Api */{
	                    any: function () {
	                        return this.flatten().length !== 0;
	                    },


	                    concat: __arrayProto.concat,


	                    context: [], // array of table settings objects


	                    each: function (fn) {
	                        for (var i = 0, ien = this.length ; i < ien; i++) {
	                            fn.call(this, this[i], i, this);
	                        }

	                        return this;
	                    },


	                    eq: function (idx) {
	                        var ctx = this.context;

	                        return ctx.length > idx ?
	                            new _Api(ctx[idx], this[idx]) :
	                            null;
	                    },


	                    filter: function (fn) {
	                        var a = [];

	                        if (__arrayProto.filter) {
	                            a = __arrayProto.filter.call(this, fn, this);
	                        }
	                        else {
	                            // Compatibility for browsers without EMCA-252-5 (JS 1.6)
	                            for (var i = 0, ien = this.length ; i < ien ; i++) {
	                                if (fn.call(this, this[i], i, this)) {
	                                    a.push(this[i]);
	                                }
	                            }
	                        }

	                        return new _Api(this.context, a);
	                    },


	                    flatten: function () {
	                        var a = [];
	                        return new _Api(this.context, a.concat.apply(a, this.toArray()));
	                    },


	                    join: __arrayProto.join,


	                    indexOf: __arrayProto.indexOf || function (obj, start) {
	                        for (var i = (start || 0), ien = this.length ; i < ien ; i++) {
	                            if (this[i] === obj) {
	                                return i;
	                            }
	                        }
	                        return -1;
	                    },

	                    iterator: function (flatten, type, fn, alwaysNew) {
	                        var
	                            a = [], ret,
	                            i, ien, j, jen,
	                            context = this.context,
	                            rows, items, item,
	                            selector = this.selector;

	                        // Argument shifting
	                        if (typeof flatten === 'string') {
	                            alwaysNew = fn;
	                            fn = type;
	                            type = flatten;
	                            flatten = false;
	                        }

	                        for (i = 0, ien = context.length ; i < ien ; i++) {
	                            var apiInst = new _Api(context[i]);

	                            if (type === 'table') {
	                                ret = fn.call(apiInst, context[i], i);

	                                if (ret !== undefined) {
	                                    a.push(ret);
	                                }
	                            }
	                            else if (type === 'columns' || type === 'rows') {
	                                // this has same length as context - one entry for each table
	                                ret = fn.call(apiInst, context[i], this[i], i);

	                                if (ret !== undefined) {
	                                    a.push(ret);
	                                }
	                            }
	                            else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
	                                // columns and rows share the same structure.
	                                // 'this' is an array of column indexes for each context
	                                items = this[i];

	                                if (type === 'column-rows') {
	                                    rows = _selector_row_indexes(context[i], selector.opts);
	                                }

	                                for (j = 0, jen = items.length ; j < jen ; j++) {
	                                    item = items[j];

	                                    if (type === 'cell') {
	                                        ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
	                                    }
	                                    else {
	                                        ret = fn.call(apiInst, context[i], item, i, j, rows);
	                                    }

	                                    if (ret !== undefined) {
	                                        a.push(ret);
	                                    }
	                                }
	                            }
	                        }

	                        if (a.length || alwaysNew) {
	                            var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
	                            var apiSelector = api.selector;
	                            apiSelector.rows = selector.rows;
	                            apiSelector.cols = selector.cols;
	                            apiSelector.opts = selector.opts;
	                            return api;
	                        }
	                        return this;
	                    },


	                    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
	                        // Bit cheeky...
	                        return this.indexOf.apply(this.toArray.reverse(), arguments);
	                    },


	                    length: 0,


	                    map: function (fn) {
	                        var a = [];

	                        if (__arrayProto.map) {
	                            a = __arrayProto.map.call(this, fn, this);
	                        }
	                        else {
	                            // Compatibility for browsers without EMCA-252-5 (JS 1.6)
	                            for (var i = 0, ien = this.length ; i < ien ; i++) {
	                                a.push(fn.call(this, this[i], i));
	                            }
	                        }

	                        return new _Api(this.context, a);
	                    },


	                    pluck: function (prop) {
	                        return this.map(function (el) {
	                            return el[prop];
	                        });
	                    },

	                    pop: __arrayProto.pop,


	                    push: __arrayProto.push,


	                    // Does not return an API instance
	                    reduce: __arrayProto.reduce || function (fn, init) {
	                        return _fnReduce(this, fn, init, 0, this.length, 1);
	                    },


	                    reduceRight: __arrayProto.reduceRight || function (fn, init) {
	                        return _fnReduce(this, fn, init, this.length - 1, -1, -1);
	                    },


	                    reverse: __arrayProto.reverse,


	                    // Object with rows, columns and opts
	                    selector: null,


	                    shift: __arrayProto.shift,


	                    sort: __arrayProto.sort, // ? name - order?


	                    splice: __arrayProto.splice,


	                    toArray: function () {
	                        return __arrayProto.slice.call(this);
	                    },


	                    to$: function () {
	                        return $(this);
	                    },


	                    toJQuery: function () {
	                        return $(this);
	                    },


	                    unique: function () {
	                        return new _Api(this.context, _unique(this));
	                    },


	                    unshift: __arrayProto.unshift
	                };


	                _Api.extend = function (scope, obj, ext) {
	                    // Only extend API instances and static properties of the API
	                    if (!ext.length || !obj || (!(obj instanceof _Api) && !obj.__dt_wrapper)) {
	                        return;
	                    }

	                    var
	                        i, ien,
	                        j, jen,
	                        struct, inner,
	                        methodScoping = function (scope, fn, struc) {
	                            return function () {
	                                var ret = fn.apply(scope, arguments);

	                                // Method extension
	                                _Api.extend(ret, ret, struc.methodExt);
	                                return ret;
	                            };
	                        };

	                    for (i = 0, ien = ext.length ; i < ien ; i++) {
	                        struct = ext[i];

	                        // Value
	                        obj[struct.name] = typeof struct.val === 'function' ?
	                            methodScoping(scope, struct.val, struct) :
	                            $.isPlainObject(struct.val) ?
						{} :
	                                struct.val;

	                        obj[struct.name].__dt_wrapper = true;

	                        // Property extension
	                        _Api.extend(scope, obj[struct.name], struct.propExt);
	                    }
	                };


	                // @todo - Is there need for an augment function?
	                // _Api.augment = function ( inst, name )
	                // {
	                // 	// Find src object in the structure from the name
	                // 	var parts = name.split('.');

	                // 	_Api.extend( inst, obj );
	                // };


	                //     [
	                //       {
	                //         name:      'data'                -- string   - Property name
	                //         val:       function () {},       -- function - Api method (or undefined if just an object
	                //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	                //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	                //       },
	                //       {
	                //         name:     'row'
	                //         val:       {},
	                //         methodExt: [ ... ],
	                //         propExt:   [
	                //           {
	                //             name:      'data'
	                //             val:       function () {},
	                //             methodExt: [ ... ],
	                //             propExt:   [ ... ]
	                //           },
	                //           ...
	                //         ]
	                //       }
	                //     ]

	                _Api.register = _api_register = function (name, val) {
	                    if ($.isArray(name)) {
	                        for (var j = 0, jen = name.length ; j < jen ; j++) {
	                            _Api.register(name[j], val);
	                        }
	                        return;
	                    }

	                    var
	                        i, ien,
	                        heir = name.split('.'),
	                        struct = __apiStruct,
	                        key, method;

	                    var find = function (src, name) {
	                        for (var i = 0, ien = src.length ; i < ien ; i++) {
	                            if (src[i].name === name) {
	                                return src[i];
	                            }
	                        }
	                        return null;
	                    };

	                    for (i = 0, ien = heir.length ; i < ien ; i++) {
	                        method = heir[i].indexOf('()') !== -1;
	                        key = method ?
	                            heir[i].replace('()', '') :
	                            heir[i];

	                        var src = find(struct, key);
	                        if (!src) {
	                            src = {
	                                name: key,
	                                val: {},
	                                methodExt: [],
	                                propExt: []
	                            };
	                            struct.push(src);
	                        }

	                        if (i === ien - 1) {
	                            src.val = val;
	                        }
	                        else {
	                            struct = method ?
	                                src.methodExt :
	                                src.propExt;
	                        }
	                    }
	                };


	                _Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {
	                    _Api.register(pluralName, val);

	                    _Api.register(singularName, function () {
	                        var ret = val.apply(this, arguments);

	                        if (ret === this) {
	                            // Returned item is the API instance that was passed in, return it
	                            return this;
	                        }
	                        else if (ret instanceof _Api) {
	                            // New API instance returned, want the value from the first item
	                            // in the returned array for the singular result.
	                            return ret.length ?
	                                $.isArray(ret[0]) ?
	                                    new _Api(ret.context, ret[0]) : // Array results are 'enhanced'
	                                    ret[0] :
	                                undefined;
	                        }

	                        // Non-API return - just fire it back
	                        return ret;
	                    });
	                };


	                /**
	                 * Selector for HTML tables. Apply the given selector to the give array of
	                 * DataTables settings objects.
	                 *
	                 * @param {string|integer} [selector] jQuery selector string or integer
	                 * @param  {array} Array of DataTables settings objects to be filtered
	                 * @return {array}
	                 * @ignore
	                 */
	                var __table_selector = function (selector, a) {
	                    // Integer is used to pick out a table by index
	                    if (typeof selector === 'number') {
	                        return [a[selector]];
	                    }

	                    // Perform a jQuery selector on the table nodes
	                    var nodes = $.map(a, function (el, i) {
	                        return el.nTable;
	                    });

	                    return $(nodes)
	                        .filter(selector)
	                        .map(function (i) {
	                            // Need to translate back from the table node to the settings
	                            var idx = $.inArray(this, nodes);
	                            return a[idx];
	                        })
	                        .toArray();
	                };



	                /**
	                 * Context selector for the API's context (i.e. the tables the API instance
	                 * refers to.
	                 *
	                 * @name    DataTable.Api#tables
	                 * @param {string|integer} [selector] Selector to pick which tables the iterator
	                 *   should operate on. If not given, all tables in the current context are
	                 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	                 *   select multiple tables or as an integer to select a single table.
	                 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	                 */
	                _api_register('tables()', function (selector) {
	                    // A new instance is created if there was a selector specified
	                    return selector ?
	                        new _Api(__table_selector(selector, this.context)) :
	                        this;
	                });


	                _api_register('table()', function (selector) {
	                    var tables = this.tables(selector);
	                    var ctx = tables.context;

	                    // Truncate to the first matched table
	                    return ctx.length ?
	                        new _Api(ctx[0]) :
	                        tables;
	                });


	                _api_registerPlural('tables().nodes()', 'table().node()', function () {
	                    return this.iterator('table', function (ctx) {
	                        return ctx.nTable;
	                    }, 1);
	                });


	                _api_registerPlural('tables().body()', 'table().body()', function () {
	                    return this.iterator('table', function (ctx) {
	                        return ctx.nTBody;
	                    }, 1);
	                });


	                _api_registerPlural('tables().header()', 'table().header()', function () {
	                    return this.iterator('table', function (ctx) {
	                        return ctx.nTHead;
	                    }, 1);
	                });


	                _api_registerPlural('tables().footer()', 'table().footer()', function () {
	                    return this.iterator('table', function (ctx) {
	                        return ctx.nTFoot;
	                    }, 1);
	                });


	                _api_registerPlural('tables().containers()', 'table().container()', function () {
	                    return this.iterator('table', function (ctx) {
	                        return ctx.nTableWrapper;
	                    }, 1);
	                });



	                /**
	                 * Redraw the tables in the current context.
	                 *
	                 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	                 *   position. A full re-sort and re-filter is performed when this method is
	                 *   called, which is why the pagination reset is the default action.
	                 * @returns {DataTables.Api} this
	                 */
	                _api_register('draw()', function (resetPaging) {
	                    return this.iterator('table', function (settings) {
	                        _fnReDraw(settings, resetPaging === false);
	                    });
	                });



	                /**
	                 * Get the current page index.
	                 *
	                 * @return {integer} Current page index (zero based)
	                 *//**
		 * Set the current page.
		 *
		 * Note that if you attempt to show a page which does not exist, DataTables will
		 * not throw an error, but rather reset the paging.
		 *
		 * @param {integer|string} action The paging action to take. This can be one of:
		 *  * `integer` - The page index to jump to
		 *  * `string` - An action to take:
		 *    * `first` - Jump to first page.
		 *    * `next` - Jump to the next page
		 *    * `previous` - Jump to previous page
		 *    * `last` - Jump to the last page.
		 * @returns {DataTables.Api} this
		 */
	                _api_register('page()', function (action) {
	                    if (action === undefined) {
	                        return this.page.info().page; // not an expensive call
	                    }

	                    // else, have an action to take on all tables
	                    return this.iterator('table', function (settings) {
	                        _fnPageChange(settings, action);
	                    });
	                });


	                /**
	                 * Paging information for the first table in the current context.
	                 *
	                 * If you require paging information for another table, use the `table()` method
	                 * with a suitable selector.
	                 *
	                 * @return {object} Object with the following properties set:
	                 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	                 *  * `pages` - Total number of pages
	                 *  * `start` - Display index for the first record shown on the current page
	                 *  * `end` - Display index for the last record shown on the current page
	                 *  * `length` - Display length (number of records). Note that generally `start
	                 *    + length = end`, but this is not always true, for example if there are
	                 *    only 2 records to show on the final page, with a length of 10.
	                 *  * `recordsTotal` - Full data set length
	                 *  * `recordsDisplay` - Data set length once the current filtering criterion
	                 *    are applied.
	                 */
	                _api_register('page.info()', function (action) {
	                    if (this.context.length === 0) {
	                        return undefined;
	                    }

	                    var
	                        settings = this.context[0],
	                        start = settings._iDisplayStart,
	                        len = settings._iDisplayLength,
	                        visRecords = settings.fnRecordsDisplay(),
	                        all = len === -1;

	                    return {
	                        "page": all ? 0 : Math.floor(start / len),
	                        "pages": all ? 1 : Math.ceil(visRecords / len),
	                        "start": start,
	                        "end": settings.fnDisplayEnd(),
	                        "length": len,
	                        "recordsTotal": settings.fnRecordsTotal(),
	                        "recordsDisplay": visRecords
	                    };
	                });


	                /**
	                 * Get the current page length.
	                 *
	                 * @return {integer} Current page length. Note `-1` indicates that all records
	                 *   are to be shown.
	                 *//**
		 * Set the current page length.
		 *
		 * @param {integer} Page length to set. Use `-1` to show all records.
		 * @returns {DataTables.Api} this
		 */
	                _api_register('page.len()', function (len) {
	                    // Note that we can't call this function 'length()' because `length`
	                    // is a Javascript property of functions which defines how many arguments
	                    // the function expects.
	                    if (len === undefined) {
	                        return this.context.length !== 0 ?
	                            this.context[0]._iDisplayLength :
	                            undefined;
	                    }

	                    // else, set the page length
	                    return this.iterator('table', function (settings) {
	                        _fnLengthChange(settings, len);
	                    });
	                });



	                var __reload = function (settings, holdPosition, callback) {
	                    // Use the draw event to trigger a callback
	                    if (callback) {
	                        var api = new _Api(settings);

	                        api.one('draw', function () {
	                            callback(api.ajax.json());
	                        });
	                    }

	                    if (_fnDataSource(settings) == 'ssp') {
	                        _fnReDraw(settings, holdPosition);
	                    }
	                    else {
	                        // Trigger xhr
	                        _fnProcessingDisplay(settings, true);

	                        _fnBuildAjax(settings, [], function (json) {
	                            _fnClearTable(settings);

	                            var data = _fnAjaxDataSrc(settings, json);
	                            for (var i = 0, ien = data.length ; i < ien ; i++) {
	                                _fnAddData(settings, data[i]);
	                            }

	                            _fnReDraw(settings, holdPosition);
	                            _fnProcessingDisplay(settings, false);
	                        });
	                    }
	                };


	                /**
	                 * Get the JSON response from the last Ajax request that DataTables made to the
	                 * server. Note that this returns the JSON from the first table in the current
	                 * context.
	                 *
	                 * @return {object} JSON received from the server.
	                 */
	                _api_register('ajax.json()', function () {
	                    var ctx = this.context;

	                    if (ctx.length > 0) {
	                        return ctx[0].json;
	                    }

	                    // else return undefined;
	                });


	                /**
	                 * Get the data submitted in the last Ajax request
	                 */
	                _api_register('ajax.params()', function () {
	                    var ctx = this.context;

	                    if (ctx.length > 0) {
	                        return ctx[0].oAjaxData;
	                    }

	                    // else return undefined;
	                });


	                /**
	                 * Reload tables from the Ajax data source. Note that this function will
	                 * automatically re-draw the table when the remote data has been loaded.
	                 *
	                 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	                 *   position. A full re-sort and re-filter is performed when this method is
	                 *   called, which is why the pagination reset is the default action.
	                 * @returns {DataTables.Api} this
	                 */
	                _api_register('ajax.reload()', function (callback, resetPaging) {
	                    return this.iterator('table', function (settings) {
	                        __reload(settings, resetPaging === false, callback);
	                    });
	                });


	                /**
	                 * Get the current Ajax URL. Note that this returns the URL from the first
	                 * table in the current context.
	                 *
	                 * @return {string} Current Ajax source URL
	                 *//**
		 * Set the Ajax URL. Note that this will set the URL for all tables in the
		 * current context.
		 *
		 * @param {string} url URL to set.
		 * @returns {DataTables.Api} this
		 */
	                _api_register('ajax.url()', function (url) {
	                    var ctx = this.context;

	                    if (url === undefined) {
	                        // get
	                        if (ctx.length === 0) {
	                            return undefined;
	                        }
	                        ctx = ctx[0];

	                        return ctx.ajax ?
	                            $.isPlainObject(ctx.ajax) ?
	                                ctx.ajax.url :
	                                ctx.ajax :
	                            ctx.sAjaxSource;
	                    }

	                    // set
	                    return this.iterator('table', function (settings) {
	                        if ($.isPlainObject(settings.ajax)) {
	                            settings.ajax.url = url;
	                        }
	                        else {
	                            settings.ajax = url;
	                        }
	                        // No need to consider sAjaxSource here since DataTables gives priority
	                        // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
	                        // value of `sAjaxSource` redundant.
	                    });
	                });


	                /**
	                 * Load data from the newly set Ajax URL. Note that this method is only
	                 * available when `ajax.url()` is used to set a URL. Additionally, this method
	                 * has the same effect as calling `ajax.reload()` but is provided for
	                 * convenience when setting a new URL. Like `ajax.reload()` it will
	                 * automatically redraw the table once the remote data has been loaded.
	                 *
	                 * @returns {DataTables.Api} this
	                 */
	                _api_register('ajax.url().load()', function (callback, resetPaging) {
	                    // Same as a reload, but makes sense to present it for easy access after a
	                    // url change
	                    return this.iterator('table', function (ctx) {
	                        __reload(ctx, resetPaging === false, callback);
	                    });
	                });




	                var _selector_run = function (type, selector, selectFn, settings, opts) {
	                    var
	                        out = [], res,
	                        a, i, ien, j, jen,
	                        selectorType = typeof selector;

	                    // Can't just check for isArray here, as an API or jQuery instance might be
	                    // given with their array like look
	                    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
	                        selector = [selector];
	                    }

	                    for (i = 0, ien = selector.length ; i < ien ; i++) {
	                        a = selector[i] && selector[i].split ?
	                            selector[i].split(',') :
	                            [selector[i]];

	                        for (j = 0, jen = a.length ; j < jen ; j++) {
	                            res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

	                            if (res && res.length) {
	                                out.push.apply(out, res);
	                            }
	                        }
	                    }

	                    // selector extensions
	                    var ext = _ext.selector[type];
	                    if (ext.length) {
	                        for (i = 0, ien = ext.length ; i < ien ; i++) {
	                            out = ext[i](settings, opts, out);
	                        }
	                    }

	                    return out;
	                };


	                var _selector_opts = function (opts) {
	                    if (!opts) {
	                        opts = {};
	                    }

	                    // Backwards compatibility for 1.9- which used the terminology filter rather
	                    // than search
	                    if (opts.filter && opts.search === undefined) {
	                        opts.search = opts.filter;
	                    }

	                    return $.extend({
	                        search: 'none',
	                        order: 'current',
	                        page: 'all'
	                    }, opts);
	                };


	                var _selector_first = function (inst) {
	                    // Reduce the API instance to the first item found
	                    for (var i = 0, ien = inst.length ; i < ien ; i++) {
	                        if (inst[i].length > 0) {
	                            // Assign the first element to the first item in the instance
	                            // and truncate the instance and context
	                            inst[0] = inst[i];
	                            inst[0].length = 1;
	                            inst.length = 1;
	                            inst.context = [inst.context[i]];

	                            return inst;
	                        }
	                    }

	                    // Not found - return an empty instance
	                    inst.length = 0;
	                    return inst;
	                };


	                var _selector_row_indexes = function (settings, opts) {
	                    var
	                        i, ien, tmp, a = [],
	                        displayFiltered = settings.aiDisplay,
	                        displayMaster = settings.aiDisplayMaster;

	                    var
	                        search = opts.search,  // none, applied, removed
	                        order = opts.order,   // applied, current, index (original - compatibility with 1.9)
	                        page = opts.page;    // all, current

	                    if (_fnDataSource(settings) == 'ssp') {
	                        // In server-side processing mode, most options are irrelevant since
	                        // rows not shown don't exist and the index order is the applied order
	                        // Removed is a special case - for consistency just return an empty
	                        // array
	                        return search === 'removed' ?
	                            [] :
	                            _range(0, displayMaster.length);
	                    }
	                    else if (page == 'current') {
	                        // Current page implies that order=current and fitler=applied, since it is
	                        // fairly senseless otherwise, regardless of what order and search actually
	                        // are
	                        for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd() ; i < ien ; i++) {
	                            a.push(displayFiltered[i]);
	                        }
	                    }
	                    else if (order == 'current' || order == 'applied') {
	                        a = search == 'none' ?
	                            displayMaster.slice() :                      // no search
	                            search == 'applied' ?
	                                displayFiltered.slice() :                // applied search
	                                $.map(displayMaster, function (el, i) { // removed search
	                                    return $.inArray(el, displayFiltered) === -1 ? el : null;
	                                });
	                    }
	                    else if (order == 'index' || order == 'original') {
	                        for (i = 0, ien = settings.aoData.length ; i < ien ; i++) {
	                            if (search == 'none') {
	                                a.push(i);
	                            }
	                            else { // applied | removed
	                                tmp = $.inArray(i, displayFiltered);

	                                if ((tmp === -1 && search == 'removed') ||
	                                    (tmp >= 0 && search == 'applied')) {
	                                    a.push(i);
	                                }
	                            }
	                        }
	                    }

	                    return a;
	                };


	                /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	                 * Rows
	                 *
	                 * {}          - no selector - use all available rows
	                 * {integer}   - row aoData index
	                 * {node}      - TR node
	                 * {string}    - jQuery selector to apply to the TR elements
	                 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	                 *
	                 */


	                var __row_selector = function (settings, selector, opts) {
	                    var run = function (sel) {
	                        var selInt = _intVal(sel);
	                        var i, ien;

	                        // Short cut - selector is a number and no options provided (default is
	                        // all records, so no need to check if the index is in there, since it
	                        // must be - dev error if the index doesn't exist).
	                        if (selInt !== null && !opts) {
	                            return [selInt];
	                        }

	                        var rows = _selector_row_indexes(settings, opts);

	                        if (selInt !== null && $.inArray(selInt, rows) !== -1) {
	                            // Selector - integer
	                            return [selInt];
	                        }
	                        else if (!sel) {
	                            // Selector - none
	                            return rows;
	                        }

	                        // Selector - function
	                        if (typeof sel === 'function') {
	                            return $.map(rows, function (idx) {
	                                var row = settings.aoData[idx];
	                                return sel(idx, row._aData, row.nTr) ? idx : null;
	                            });
	                        }

	                        // Get nodes in the order from the `rows` array with null values removed
	                        var nodes = _removeEmpty(
	                            _pluck_order(settings.aoData, rows, 'nTr')
	                        );

	                        // Selector - node
	                        if (sel.nodeName) {
	                            if ($.inArray(sel, nodes) !== -1) {
	                                return [sel._DT_RowIndex]; // sel is a TR node that is in the table
	                                // and DataTables adds a prop for fast lookup
	                            }
	                        }

	                        // Selector - jQuery selector string, array of nodes or jQuery object/
	                        // As jQuery's .filter() allows jQuery objects to be passed in filter,
	                        // it also allows arrays, so this will cope with all three options
	                        return $(nodes)
	                            .filter(sel)
	                            .map(function () {
	                                return this._DT_RowIndex;
	                            })
	                            .toArray();
	                    };

	                    return _selector_run('row', selector, run, settings, opts);
	                };


	                _api_register('rows()', function (selector, opts) {
	                    // argument shifting
	                    if (selector === undefined) {
	                        selector = '';
	                    }
	                    else if ($.isPlainObject(selector)) {
	                        opts = selector;
	                        selector = '';
	                    }

	                    opts = _selector_opts(opts);

	                    var inst = this.iterator('table', function (settings) {
	                        return __row_selector(settings, selector, opts);
	                    }, 1);

	                    // Want argument shifting here and in __row_selector?
	                    inst.selector.rows = selector;
	                    inst.selector.opts = opts;

	                    return inst;
	                });

	                _api_register('rows().nodes()', function () {
	                    return this.iterator('row', function (settings, row) {
	                        return settings.aoData[row].nTr || undefined;
	                    }, 1);
	                });

	                _api_register('rows().data()', function () {
	                    return this.iterator(true, 'rows', function (settings, rows) {
	                        return _pluck_order(settings.aoData, rows, '_aData');
	                    }, 1);
	                });

	                _api_registerPlural('rows().cache()', 'row().cache()', function (type) {
	                    return this.iterator('row', function (settings, row) {
	                        var r = settings.aoData[row];
	                        return type === 'search' ? r._aFilterData : r._aSortData;
	                    }, 1);
	                });

	                _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
	                    return this.iterator('row', function (settings, row) {
	                        _fnInvalidate(settings, row, src);
	                    });
	                });

	                _api_registerPlural('rows().indexes()', 'row().index()', function () {
	                    return this.iterator('row', function (settings, row) {
	                        return row;
	                    }, 1);
	                });

	                _api_registerPlural('rows().remove()', 'row().remove()', function () {
	                    var that = this;

	                    return this.iterator('row', function (settings, row, thatIdx) {
	                        var data = settings.aoData;

	                        data.splice(row, 1);

	                        // Update the _DT_RowIndex parameter on all rows in the table
	                        for (var i = 0, ien = data.length ; i < ien ; i++) {
	                            if (data[i].nTr !== null) {
	                                data[i].nTr._DT_RowIndex = i;
	                            }
	                        }

	                        // Remove the target row from the search array
	                        var displayIndex = $.inArray(row, settings.aiDisplay);

	                        // Delete from the display arrays
	                        _fnDeleteIndex(settings.aiDisplayMaster, row);
	                        _fnDeleteIndex(settings.aiDisplay, row);
	                        _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

	                        // Check for an 'overflow' they case for displaying the table
	                        _fnLengthOverflow(settings);
	                    });
	                });


	                _api_register('rows.add()', function (rows) {
	                    var newRows = this.iterator('table', function (settings) {
	                        var row, i, ien;
	                        var out = [];

	                        for (i = 0, ien = rows.length ; i < ien ; i++) {
	                            row = rows[i];

	                            if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
	                                out.push(_fnAddTr(settings, row)[0]);
	                            }
	                            else {
	                                out.push(_fnAddData(settings, row));
	                            }
	                        }

	                        return out;
	                    }, 1);

	                    // Return an Api.rows() extended instance, so rows().nodes() etc can be used
	                    var modRows = this.rows(-1);
	                    modRows.pop();
	                    modRows.push.apply(modRows, newRows.toArray());

	                    return modRows;
	                });





	                /**
	                 *
	                 */
	                _api_register('row()', function (selector, opts) {
	                    return _selector_first(this.rows(selector, opts));
	                });


	                _api_register('row().data()', function (data) {
	                    var ctx = this.context;

	                    if (data === undefined) {
	                        // Get
	                        return ctx.length && this.length ?
	                            ctx[0].aoData[this[0]]._aData :
	                            undefined;
	                    }

	                    // Set
	                    ctx[0].aoData[this[0]]._aData = data;

	                    // Automatically invalidate
	                    _fnInvalidate(ctx[0], this[0], 'data');

	                    return this;
	                });


	                _api_register('row().node()', function () {
	                    var ctx = this.context;

	                    return ctx.length && this.length ?
	                        ctx[0].aoData[this[0]].nTr || null :
	                        null;
	                });


	                _api_register('row.add()', function (row) {
	                    // Allow a jQuery object to be passed in - only a single row is added from
	                    // it though - the first element in the set
	                    if (row instanceof $ && row.length) {
	                        row = row[0];
	                    }

	                    var rows = this.iterator('table', function (settings) {
	                        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
	                            return _fnAddTr(settings, row)[0];
	                        }
	                        return _fnAddData(settings, row);
	                    });

	                    // Return an Api.rows() extended instance, with the newly added row selected
	                    return this.row(rows[0]);
	                });



	                var __details_add = function (ctx, row, data, klass) {
	                    // Convert to array of TR elements
	                    var rows = [];
	                    var addRow = function (r, k) {
	                        // Recursion to allow for arrays of jQuery objects
	                        if ($.isArray(r) || r instanceof $) {
	                            for (var i = 0, ien = r.length ; i < ien ; i++) {
	                                addRow(r[i], k);
	                            }
	                            return;
	                        }

	                        // If we get a TR element, then just add it directly - up to the dev
	                        // to add the correct number of columns etc
	                        if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
	                            rows.push(r);
	                        }
	                        else {
	                            // Otherwise create a row with a wrapper
	                            var created = $('<tr><td/></tr>').addClass(k);
	                            $('td', created)
	                                .addClass(k)
	                                .html(r)
	                                [0].colSpan = _fnVisbleColumns(ctx);

	                            rows.push(created[0]);
	                        }
	                    };

	                    addRow(data, klass);

	                    if (row._details) {
	                        row._details.remove();
	                    }

	                    row._details = $(rows);

	                    // If the children were already shown, that state should be retained
	                    if (row._detailsShow) {
	                        row._details.insertAfter(row.nTr);
	                    }
	                };


	                var __details_remove = function (api, idx) {
	                    var ctx = api.context;

	                    if (ctx.length) {
	                        var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

	                        if (row._details) {
	                            row._details.remove();

	                            row._detailsShow = undefined;
	                            row._details = undefined;
	                        }
	                    }
	                };


	                var __details_display = function (api, show) {
	                    var ctx = api.context;

	                    if (ctx.length && api.length) {
	                        var row = ctx[0].aoData[api[0]];

	                        if (row._details) {
	                            row._detailsShow = show;

	                            if (show) {
	                                row._details.insertAfter(row.nTr);
	                            }
	                            else {
	                                row._details.detach();
	                            }

	                            __details_events(ctx[0]);
	                        }
	                    }
	                };


	                var __details_events = function (settings) {
	                    var api = new _Api(settings);
	                    var namespace = '.dt.DT_details';
	                    var drawEvent = 'draw' + namespace;
	                    var colvisEvent = 'column-visibility' + namespace;
	                    var destroyEvent = 'destroy' + namespace;
	                    var data = settings.aoData;

	                    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

	                    if (_pluck(data, '_details').length > 0) {
	                        // On each draw, insert the required elements into the document
	                        api.on(drawEvent, function (e, ctx) {
	                            if (settings !== ctx) {
	                                return;
	                            }

	                            api.rows({ page: 'current' }).eq(0).each(function (idx) {
	                                // Internal data grab
	                                var row = data[idx];

	                                if (row._detailsShow) {
	                                    row._details.insertAfter(row.nTr);
	                                }
	                            });
	                        });

	                        // Column visibility change - update the colspan
	                        api.on(colvisEvent, function (e, ctx, idx, vis) {
	                            if (settings !== ctx) {
	                                return;
	                            }

	                            // Update the colspan for the details rows (note, only if it already has
	                            // a colspan)
	                            var row, visible = _fnVisbleColumns(ctx);

	                            for (var i = 0, ien = data.length ; i < ien ; i++) {
	                                row = data[i];

	                                if (row._details) {
	                                    row._details.children('td[colspan]').attr('colspan', visible);
	                                }
	                            }
	                        });

	                        // Table destroyed - nuke any child rows
	                        api.on(destroyEvent, function (e, ctx) {
	                            if (settings !== ctx) {
	                                return;
	                            }

	                            for (var i = 0, ien = data.length ; i < ien ; i++) {
	                                if (data[i]._details) {
	                                    __details_remove(api, i);
	                                }
	                            }
	                        });
	                    }
	                };

	                // Strings for the method names to help minification
	                var _emp = '';
	                var _child_obj = _emp + 'row().child';
	                var _child_mth = _child_obj + '()';

	                // data can be:
	                //  tr
	                //  string
	                //  jQuery or array of any of the above
	                _api_register(_child_mth, function (data, klass) {
	                    var ctx = this.context;

	                    if (data === undefined) {
	                        // get
	                        return ctx.length && this.length ?
	                            ctx[0].aoData[this[0]]._details :
	                            undefined;
	                    }
	                    else if (data === true) {
	                        // show
	                        this.child.show();
	                    }
	                    else if (data === false) {
	                        // remove
	                        __details_remove(this);
	                    }
	                    else if (ctx.length && this.length) {
	                        // set
	                        __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
	                    }

	                    return this;
	                });


	                _api_register([
	                    _child_obj + '.show()',
	                    _child_mth + '.show()' // only when `child()` was called with parameters (without
	                ], function (show) {   // it returns an object and this method is not executed)
	                    __details_display(this, true);
	                    return this;
	                });


	                _api_register([
	                    _child_obj + '.hide()',
	                    _child_mth + '.hide()' // only when `child()` was called with parameters (without
	                ], function () {         // it returns an object and this method is not executed)
	                    __details_display(this, false);
	                    return this;
	                });


	                _api_register([
	                    _child_obj + '.remove()',
	                    _child_mth + '.remove()' // only when `child()` was called with parameters (without
	                ], function () {           // it returns an object and this method is not executed)
	                    __details_remove(this);
	                    return this;
	                });


	                _api_register(_child_obj + '.isShown()', function () {
	                    var ctx = this.context;

	                    if (ctx.length && this.length) {
	                        // _detailsShown as false or undefined will fall through to return false
	                        return ctx[0].aoData[this[0]]._detailsShow || false;
	                    }
	                    return false;
	                });



	                /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	                 * Columns
	                 *
	                 * {integer}           - column index (>=0 count from left, <0 count from right)
	                 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	                 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	                 * "{string}:name"     - column name
	                 * "{string}"          - jQuery selector on column header nodes
	                 *
	                 */

	                // can be an array of these items, comma separated list, or an array of comma
	                // separated lists

	                var __re_column_selector = /^(.+):(name|visIdx|visible)$/;


	                // r1 and r2 are redundant - but it means that the parameters match for the
	                // iterator callback in columns().data()
	                var __columnData = function (settings, column, r1, r2, rows) {
	                    var a = [];
	                    for (var row = 0, ien = rows.length ; row < ien ; row++) {
	                        a.push(_fnGetCellData(settings, rows[row], column));
	                    }
	                    return a;
	                };


	                var __column_selector = function (settings, selector, opts) {
	                    var
	                        columns = settings.aoColumns,
	                        names = _pluck(columns, 'sName'),
	                        nodes = _pluck(columns, 'nTh');

	                    var run = function (s) {
	                        var selInt = _intVal(s);

	                        // Selector - all
	                        if (s === '') {
	                            return _range(columns.length);
	                        }

	                        // Selector - index
	                        if (selInt !== null) {
	                            return [selInt >= 0 ?
	                                selInt : // Count from left
	                                columns.length + selInt // Count from right (+ because its a negative value)
	                            ];
	                        }

	                        // Selector = function
	                        if (typeof s === 'function') {
	                            var rows = _selector_row_indexes(settings, opts);

	                            return $.map(columns, function (col, idx) {
	                                return s(
	                                        idx,
	                                        __columnData(settings, idx, 0, 0, rows),
	                                        nodes[idx]
	                                    ) ? idx : null;
	                            });
	                        }

	                        // jQuery or string selector
	                        var match = typeof s === 'string' ?
	                            s.match(__re_column_selector) :
	                            '';

	                        if (match) {
	                            switch (match[2]) {
	                                case 'visIdx':
	                                case 'visible':
	                                    var idx = parseInt(match[1], 10);
	                                    // Visible index given, convert to column index
	                                    if (idx < 0) {
	                                        // Counting from the right
	                                        var visColumns = $.map(columns, function (col, i) {
	                                            return col.bVisible ? i : null;
	                                        });
	                                        return [visColumns[visColumns.length + idx]];
	                                    }
	                                    // Counting from the left
	                                    return [_fnVisibleToColumnIndex(settings, idx)];

	                                case 'name':
	                                    // match by name. `names` is column index complete and in order
	                                    return $.map(names, function (name, i) {
	                                        return name === match[1] ? i : null;
	                                    });
	                            }
	                        }
	                        else {
	                            // jQuery selector on the TH elements for the columns
	                            return $(nodes)
	                                .filter(s)
	                                .map(function () {
	                                    return $.inArray(this, nodes); // `nodes` is column index complete and in order
	                                })
	                                .toArray();
	                        }
	                    };

	                    return _selector_run('column', selector, run, settings, opts);
	                };


	                var __setColumnVis = function (settings, column, vis, recalc) {
	                    var
	                        cols = settings.aoColumns,
	                        col = cols[column],
	                        data = settings.aoData,
	                        row, cells, i, ien, tr;

	                    // Get
	                    if (vis === undefined) {
	                        return col.bVisible;
	                    }

	                    // Set
	                    // No change
	                    if (col.bVisible === vis) {
	                        return;
	                    }

	                    if (vis) {
	                        // Insert column
	                        // Need to decide if we should use appendChild or insertBefore
	                        var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

	                        for (i = 0, ien = data.length ; i < ien ; i++) {
	                            tr = data[i].nTr;
	                            cells = data[i].anCells;

	                            if (tr) {
	                                // insertBefore can act like appendChild if 2nd arg is null
	                                tr.insertBefore(cells[column], cells[insertBefore] || null);
	                            }
	                        }
	                    }
	                    else {
	                        // Remove column
	                        $(_pluck(settings.aoData, 'anCells', column)).detach();
	                    }

	                    // Common actions
	                    col.bVisible = vis;
	                    _fnDrawHead(settings, settings.aoHeader);
	                    _fnDrawHead(settings, settings.aoFooter);

	                    if (recalc === undefined || recalc) {
	                        // Automatically adjust column sizing
	                        _fnAdjustColumnSizing(settings);

	                        // Realign columns for scrolling
	                        if (settings.oScroll.sX || settings.oScroll.sY) {
	                            _fnScrollDraw(settings);
	                        }
	                    }

	                    _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis]);

	                    _fnSaveState(settings);
	                };


	                _api_register('columns()', function (selector, opts) {
	                    // argument shifting
	                    if (selector === undefined) {
	                        selector = '';
	                    }
	                    else if ($.isPlainObject(selector)) {
	                        opts = selector;
	                        selector = '';
	                    }

	                    opts = _selector_opts(opts);

	                    var inst = this.iterator('table', function (settings) {
	                        return __column_selector(settings, selector, opts);
	                    }, 1);

	                    // Want argument shifting here and in _row_selector?
	                    inst.selector.cols = selector;
	                    inst.selector.opts = opts;

	                    return inst;
	                });

	                _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
	                    return this.iterator('column', function (settings, column) {
	                        return settings.aoColumns[column].nTh;
	                    }, 1);
	                });

	                _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
	                    return this.iterator('column', function (settings, column) {
	                        return settings.aoColumns[column].nTf;
	                    }, 1);
	                });

	                _api_registerPlural('columns().data()', 'column().data()', function () {
	                    return this.iterator('column-rows', __columnData, 1);
	                });

	                _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
	                    return this.iterator('column', function (settings, column) {
	                        return settings.aoColumns[column].mData;
	                    }, 1);
	                });

	                _api_registerPlural('columns().cache()', 'column().cache()', function (type) {
	                    return this.iterator('column-rows', function (settings, column, i, j, rows) {
	                        return _pluck_order(settings.aoData, rows,
	                            type === 'search' ? '_aFilterData' : '_aSortData', column
	                        );
	                    }, 1);
	                });

	                _api_registerPlural('columns().nodes()', 'column().nodes()', function () {
	                    return this.iterator('column-rows', function (settings, column, i, j, rows) {
	                        return _pluck_order(settings.aoData, rows, 'anCells', column);
	                    }, 1);
	                });

	                _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
	                    return this.iterator('column', function (settings, column) {
	                        if (vis === undefined) {
	                            return settings.aoColumns[column].bVisible;
	                        } // else
	                        __setColumnVis(settings, column, vis, calc);
	                    });
	                });

	                _api_registerPlural('columns().indexes()', 'column().index()', function (type) {
	                    return this.iterator('column', function (settings, column) {
	                        return type === 'visible' ?
	                            _fnColumnIndexToVisible(settings, column) :
	                            column;
	                    }, 1);
	                });

	                _api_register('columns.adjust()', function () {
	                    return this.iterator('table', function (settings) {
	                        _fnAdjustColumnSizing(settings);
	                    }, 1);
	                });

	                _api_register('column.index()', function (type, idx) {
	                    if (this.context.length !== 0) {
	                        var ctx = this.context[0];

	                        if (type === 'fromVisible' || type === 'toData') {
	                            return _fnVisibleToColumnIndex(ctx, idx);
	                        }
	                        else if (type === 'fromData' || type === 'toVisible') {
	                            return _fnColumnIndexToVisible(ctx, idx);
	                        }
	                    }
	                });

	                _api_register('column()', function (selector, opts) {
	                    return _selector_first(this.columns(selector, opts));
	                });




	                var __cell_selector = function (settings, selector, opts) {
	                    var data = settings.aoData;
	                    var rows = _selector_row_indexes(settings, opts);
	                    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
	                    var allCells = $([].concat.apply([], cells));
	                    var row;
	                    var columns = settings.aoColumns.length;
	                    var a, i, ien, j, o, host;

	                    var run = function (s) {
	                        var fnSelector = typeof s === 'function';

	                        if (s === null || s === undefined || fnSelector) {
	                            // All cells and function selectors
	                            a = [];

	                            for (i = 0, ien = rows.length ; i < ien ; i++) {
	                                row = rows[i];

	                                for (j = 0 ; j < columns ; j++) {
	                                    o = {
	                                        row: row,
	                                        column: j
	                                    };

	                                    if (fnSelector) {
	                                        // Selector - function
	                                        host = settings.aoData[row];

	                                        if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
	                                            a.push(o);
	                                        }
	                                    }
	                                    else {
	                                        // Selector - all
	                                        a.push(o);
	                                    }
	                                }
	                            }

	                            return a;
	                        }

	                        // Selector - index
	                        if ($.isPlainObject(s)) {
	                            return [s];
	                        }

	                        // Selector - jQuery filtered cells
	                        return allCells
	                            .filter(s)
	                            .map(function (i, el) {
	                                row = el.parentNode._DT_RowIndex;

	                                return {
	                                    row: row,
	                                    column: $.inArray(el, data[row].anCells)
	                                };
	                            })
	                            .toArray();
	                    };

	                    return _selector_run('cell', selector, run, settings, opts);
	                };




	                _api_register('cells()', function (rowSelector, columnSelector, opts) {
	                    // Argument shifting
	                    if ($.isPlainObject(rowSelector)) {
	                        // Indexes
	                        if (rowSelector.row === undefined) {
	                            // Selector options in first parameter
	                            opts = rowSelector;
	                            rowSelector = null;
	                        }
	                        else {
	                            // Cell index objects in first parameter
	                            opts = columnSelector;
	                            columnSelector = null;
	                        }
	                    }
	                    if ($.isPlainObject(columnSelector)) {
	                        opts = columnSelector;
	                        columnSelector = null;
	                    }

	                    // Cell selector
	                    if (columnSelector === null || columnSelector === undefined) {
	                        return this.iterator('table', function (settings) {
	                            return __cell_selector(settings, rowSelector, _selector_opts(opts));
	                        });
	                    }

	                    // Row + column selector
	                    var columns = this.columns(columnSelector, opts);
	                    var rows = this.rows(rowSelector, opts);
	                    var a, i, ien, j, jen;

	                    var cells = this.iterator('table', function (settings, idx) {
	                        a = [];

	                        for (i = 0, ien = rows[idx].length ; i < ien ; i++) {
	                            for (j = 0, jen = columns[idx].length ; j < jen ; j++) {
	                                a.push({
	                                    row: rows[idx][i],
	                                    column: columns[idx][j]
	                                });
	                            }
	                        }

	                        return a;
	                    }, 1);

	                    $.extend(cells.selector, {
	                        cols: columnSelector,
	                        rows: rowSelector,
	                        opts: opts
	                    });

	                    return cells;
	                });


	                _api_registerPlural('cells().nodes()', 'cell().node()', function () {
	                    return this.iterator('cell', function (settings, row, column) {
	                        var cells = settings.aoData[row].anCells;
	                        return cells ?
	                            cells[column] :
	                            undefined;
	                    }, 1);
	                });


	                _api_register('cells().data()', function () {
	                    return this.iterator('cell', function (settings, row, column) {
	                        return _fnGetCellData(settings, row, column);
	                    }, 1);
	                });


	                _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
	                    type = type === 'search' ? '_aFilterData' : '_aSortData';

	                    return this.iterator('cell', function (settings, row, column) {
	                        return settings.aoData[row][type][column];
	                    }, 1);
	                });


	                _api_registerPlural('cells().render()', 'cell().render()', function (type) {
	                    return this.iterator('cell', function (settings, row, column) {
	                        return _fnGetCellData(settings, row, column, type);
	                    }, 1);
	                });


	                _api_registerPlural('cells().indexes()', 'cell().index()', function () {
	                    return this.iterator('cell', function (settings, row, column) {
	                        return {
	                            row: row,
	                            column: column,
	                            columnVisible: _fnColumnIndexToVisible(settings, column)
	                        };
	                    }, 1);
	                });


	                _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
	                    return this.iterator('cell', function (settings, row, column) {
	                        _fnInvalidate(settings, row, src, column);
	                    });
	                });



	                _api_register('cell()', function (rowSelector, columnSelector, opts) {
	                    return _selector_first(this.cells(rowSelector, columnSelector, opts));
	                });


	                _api_register('cell().data()', function (data) {
	                    var ctx = this.context;
	                    var cell = this[0];

	                    if (data === undefined) {
	                        // Get
	                        return ctx.length && cell.length ?
	                            _fnGetCellData(ctx[0], cell[0].row, cell[0].column) :
	                            undefined;
	                    }

	                    // Set
	                    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
	                    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

	                    return this;
	                });



	                /**
	                 * Get current ordering (sorting) that has been applied to the table.
	                 *
	                 * @returns {array} 2D array containing the sorting information for the first
	                 *   table in the current context. Each element in the parent array represents
	                 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	                 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	                 *   the column index that the sorting condition applies to, the second is the
	                 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	                 *   index of the sorting order from the `column.sorting` initialisation array.
	                 *//**
		 * Set the ordering for the table.
		 *
		 * @param {integer} order Column index to sort upon.
		 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
		 * @returns {DataTables.Api} this
		 *//**
		 * Set the ordering for the table.
		 *
		 * @param {array} order 1D array of sorting information to be applied.
		 * @param {array} [...] Optional additional sorting conditions
		 * @returns {DataTables.Api} this
		 *//**
		 * Set the ordering for the table.
		 *
		 * @param {array} order 2D array of sorting information to be applied.
		 * @returns {DataTables.Api} this
		 */
	                _api_register('order()', function (order, dir) {
	                    var ctx = this.context;

	                    if (order === undefined) {
	                        // get
	                        return ctx.length !== 0 ?
	                            ctx[0].aaSorting :
	                            undefined;
	                    }

	                    // set
	                    if (typeof order === 'number') {
	                        // Simple column / direction passed in
	                        order = [[order, dir]];
	                    }
	                    else if (!$.isArray(order[0])) {
	                        // Arguments passed in (list of 1D arrays)
	                        order = Array.prototype.slice.call(arguments);
	                    }
	                    // otherwise a 2D array was passed in

	                    return this.iterator('table', function (settings) {
	                        settings.aaSorting = order.slice();
	                    });
	                });


	                /**
	                 * Attach a sort listener to an element for a given column
	                 *
	                 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	                 *   listener to. This can take the form of a single DOM node, a jQuery
	                 *   collection of nodes or a jQuery selector which will identify the node(s).
	                 * @param {integer} column the column that a click on this node will sort on
	                 * @param {function} [callback] callback function when sort is run
	                 * @returns {DataTables.Api} this
	                 */
	                _api_register('order.listener()', function (node, column, callback) {
	                    return this.iterator('table', function (settings) {
	                        _fnSortAttachListener(settings, node, column, callback);
	                    });
	                });


	                // Order by the selected column(s)
	                _api_register([
	                    'columns().order()',
	                    'column().order()'
	                ], function (dir) {
	                    var that = this;

	                    return this.iterator('table', function (settings, i) {
	                        var sort = [];

	                        $.each(that[i], function (j, col) {
	                            sort.push([col, dir]);
	                        });

	                        settings.aaSorting = sort;
	                    });
	                });



	                _api_register('search()', function (input, regex, smart, caseInsen) {
	                    var ctx = this.context;

	                    if (input === undefined) {
	                        // get
	                        return ctx.length !== 0 ?
	                            ctx[0].oPreviousSearch.sSearch :
	                            undefined;
	                    }

	                    // set
	                    return this.iterator('table', function (settings) {
	                        if (!settings.oFeatures.bFilter) {
	                            return;
	                        }

	                        _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
	                            "sSearch": input + "",
	                            "bRegex": regex === null ? false : regex,
	                            "bSmart": smart === null ? true : smart,
	                            "bCaseInsensitive": caseInsen === null ? true : caseInsen
	                        }), 1);
	                    });
	                });


	                _api_registerPlural(
	                    'columns().search()',
	                    'column().search()',
	                    function (input, regex, smart, caseInsen) {
	                        return this.iterator('column', function (settings, column) {
	                            var preSearch = settings.aoPreSearchCols;

	                            if (input === undefined) {
	                                // get
	                                return preSearch[column].sSearch;
	                            }

	                            // set
	                            if (!settings.oFeatures.bFilter) {
	                                return;
	                            }

	                            $.extend(preSearch[column], {
	                                "sSearch": input + "",
	                                "bRegex": regex === null ? false : regex,
	                                "bSmart": smart === null ? true : smart,
	                                "bCaseInsensitive": caseInsen === null ? true : caseInsen
	                            });

	                            _fnFilterComplete(settings, settings.oPreviousSearch, 1);
	                        });
	                    }
	                );

	                /*
	                 * State API methods
	                 */

	                _api_register('state()', function () {
	                    return this.context.length ?
	                        this.context[0].oSavedState :
	                        null;
	                });


	                _api_register('state.clear()', function () {
	                    return this.iterator('table', function (settings) {
	                        // Save an empty object
	                        settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
	                    });
	                });


	                _api_register('state.loaded()', function () {
	                    return this.context.length ?
	                        this.context[0].oLoadedState :
	                        null;
	                });


	                _api_register('state.save()', function () {
	                    return this.iterator('table', function (settings) {
	                        _fnSaveState(settings);
	                    });
	                });



	                /**
	                 * Provide a common method for plug-ins to check the version of DataTables being
	                 * used, in order to ensure compatibility.
	                 *
	                 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	                 *    Note that the formats "X" and "X.Y" are also acceptable.
	                 *  @returns {boolean} true if this version of DataTables is greater or equal to
	                 *    the required version, or false if this version of DataTales is not
	                 *    suitable
	                 *  @static
	                 *  @dtopt API-Static
	                 *
	                 *  @example
	                 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	                 */
	                DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
	                    var aThis = DataTable.version.split('.');
	                    var aThat = version.split('.');
	                    var iThis, iThat;

	                    for (var i = 0, iLen = aThat.length ; i < iLen ; i++) {
	                        iThis = parseInt(aThis[i], 10) || 0;
	                        iThat = parseInt(aThat[i], 10) || 0;

	                        // Parts are the same, keep comparing
	                        if (iThis === iThat) {
	                            continue;
	                        }

	                        // Parts are different, return immediately
	                        return iThis > iThat;
	                    }

	                    return true;
	                };


	                /**
	                 * Check if a `<table>` node is a DataTable table already or not.
	                 *
	                 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	                 *      selector for the table to test. Note that if more than more than one
	                 *      table is passed on, only the first will be checked
	                 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	                 *  @static
	                 *  @dtopt API-Static
	                 *
	                 *  @example
	                 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	                 *      $('#example').dataTable();
	                 *    }
	                 */
	                DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
	                    var t = $(table).get(0);
	                    var is = false;

	                    $.each(DataTable.settings, function (i, o) {
	                        var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
	                        var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

	                        if (o.nTable === t || head === t || foot === t) {
	                            is = true;
	                        }
	                    });

	                    return is;
	                };


	                /**
	                 * Get all DataTable tables that have been initialised - optionally you can
	                 * select to get only currently visible tables.
	                 *
	                 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	                 *    or visible tables only.
	                 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	                 *    DataTables
	                 *  @static
	                 *  @dtopt API-Static
	                 *
	                 *  @example
	                 *    $.each( $.fn.dataTable.tables(true), function () {
	                 *      $(table).DataTable().columns.adjust();
	                 *    } );
	                 */
	                DataTable.tables = DataTable.fnTables = function (visible) {
	                    return $.map(DataTable.settings, function (o) {
	                        if (!visible || (visible && $(o.nTable).is(':visible'))) {
	                            return o.nTable;
	                        }
	                    });
	                };


	                /**
	                 * DataTables utility methods
	                 * 
	                 * This namespace provides helper methods that DataTables uses internally to
	                 * create a DataTable, but which are not exclusively used only for DataTables.
	                 * These methods can be used by extension authors to save the duplication of
	                 * code.
	                 *
	                 *  @namespace
	                 */
	                DataTable.util = {
	                    /**
	                     * Throttle the calls to a function. Arguments and context are maintained
	                     * for the throttled function.
	                     *
	                     * @param {function} fn Function to be called
	                     * @param {integer} freq Call frequency in mS
	                     * @return {function} Wrapped function
	                     */
	                    throttle: _fnThrottle,


	                    /**
	                     * Escape a string such that it can be used in a regular expression
	                     *
	                     *  @param {string} sVal string to escape
	                     *  @returns {string} escaped string
	                     */
	                    escapeRegex: _fnEscapeRegex
	                };


	                /**
	                 * Convert from camel case parameters to Hungarian notation. This is made public
	                 * for the extensions to provide the same ability as DataTables core to accept
	                 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	                 * parameters.
	                 *
	                 *  @param {object} src The model object which holds all parameters that can be
	                 *    mapped.
	                 *  @param {object} user The object to convert from camel case to Hungarian.
	                 *  @param {boolean} force When set to `true`, properties which already have a
	                 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	                 *    won't be.
	                 */
	                DataTable.camelToHungarian = _fnCamelToHungarian;



	                /**
	                 *
	                 */
	                _api_register('$()', function (selector, opts) {
	                    var
	                        rows = this.rows(opts).nodes(), // Get all rows
	                        jqRows = $(rows);

	                    return $([].concat(
	                        jqRows.filter(selector).toArray(),
	                        jqRows.find(selector).toArray()
	                    ));
	                });


	                // jQuery functions to operate on the tables
	                $.each(['on', 'one', 'off'], function (i, key) {
	                    _api_register(key + '()', function ( /* event, handler */) {
	                        var args = Array.prototype.slice.call(arguments);

	                        // Add the `dt` namespace automatically if it isn't already present
	                        if (!args[0].match(/\.dt\b/)) {
	                            args[0] += '.dt';
	                        }

	                        var inst = $(this.tables().nodes());
	                        inst[key].apply(inst, args);
	                        return this;
	                    });
	                });


	                _api_register('clear()', function () {
	                    return this.iterator('table', function (settings) {
	                        _fnClearTable(settings);
	                    });
	                });


	                _api_register('settings()', function () {
	                    return new _Api(this.context, this.context);
	                });


	                _api_register('init()', function () {
	                    var ctx = this.context;
	                    return ctx.length ? ctx[0].oInit : null;
	                });


	                _api_register('data()', function () {
	                    return this.iterator('table', function (settings) {
	                        return _pluck(settings.aoData, '_aData');
	                    }).flatten();
	                });


	                _api_register('destroy()', function (remove) {
	                    remove = remove || false;

	                    return this.iterator('table', function (settings) {
	                        var orig = settings.nTableWrapper.parentNode;
	                        var classes = settings.oClasses;
	                        var table = settings.nTable;
	                        var tbody = settings.nTBody;
	                        var thead = settings.nTHead;
	                        var tfoot = settings.nTFoot;
	                        var jqTable = $(table);
	                        var jqTbody = $(tbody);
	                        var jqWrapper = $(settings.nTableWrapper);
	                        var rows = $.map(settings.aoData, function (r) { return r.nTr; });
	                        var i, ien;

	                        // Flag to note that the table is currently being destroyed - no action
	                        // should be taken
	                        settings.bDestroying = true;

	                        // Fire off the destroy callbacks for plug-ins etc
	                        _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

	                        // If not being removed from the document, make all columns visible
	                        if (!remove) {
	                            new _Api(settings).columns().visible(true);
	                        }

	                        // Blitz all `DT` namespaced events (these are internal events, the
	                        // lowercase, `dt` events are user subscribed and they are responsible
	                        // for removing them
	                        jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
	                        $(window).unbind('.DT-' + settings.sInstance);

	                        // When scrolling we had to break the table up - restore it
	                        if (table != thead.parentNode) {
	                            jqTable.children('thead').detach();
	                            jqTable.append(thead);
	                        }

	                        if (tfoot && table != tfoot.parentNode) {
	                            jqTable.children('tfoot').detach();
	                            jqTable.append(tfoot);
	                        }

	                        // Remove the DataTables generated nodes, events and classes
	                        jqTable.detach();
	                        jqWrapper.detach();

	                        settings.aaSorting = [];
	                        settings.aaSortingFixed = [];
	                        _fnSortingClasses(settings);

	                        $(rows).removeClass(settings.asStripeClasses.join(' '));

	                        $('th, td', thead).removeClass(classes.sSortable + ' ' +
	                            classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone
	                        );

	                        if (settings.bJUI) {
	                            $('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
	                            $('th, td', thead).each(function () {
	                                var wrapper = $('div.' + classes.sSortJUIWrapper, this);
	                                $(this).append(wrapper.contents());
	                                wrapper.detach();
	                            });
	                        }

	                        if (!remove && orig) {
	                            // insertBefore acts like appendChild if !arg[1]
	                            orig.insertBefore(table, settings.nTableReinsertBefore);
	                        }

	                        // Add the TR elements back into the table in their original order
	                        jqTbody.children().detach();
	                        jqTbody.append(rows);

	                        // Restore the width of the original table - was read from the style property,
	                        // so we can restore directly to that
	                        jqTable
	                            .css('width', settings.sDestroyWidth)
	                            .removeClass(classes.sTable);

	                        // If the were originally stripe classes - then we add them back here.
	                        // Note this is not fool proof (for example if not all rows had stripe
	                        // classes - but it's a good effort without getting carried away
	                        ien = settings.asDestroyStripes.length;

	                        if (ien) {
	                            jqTbody.children().each(function (i) {
	                                $(this).addClass(settings.asDestroyStripes[i % ien]);
	                            });
	                        }

	                        /* Remove the settings object from the settings array */
	                        var idx = $.inArray(settings, DataTable.settings);
	                        if (idx !== -1) {
	                            DataTable.settings.splice(idx, 1);
	                        }
	                    });
	                });


	                // Add the `every()` method for rows, columns and cells in a compact form
	                $.each(['column', 'row', 'cell'], function (i, type) {
	                    _api_register(type + 's().every()', function (fn) {
	                        return this.iterator(type, function (settings, idx, idx2) {
	                            // idx2 is undefined for rows and columns.
	                            fn.call(new _Api(settings)[type](idx, idx2));
	                        });
	                    });
	                });


	                // i18n method for extensions to be able to use the language object from the
	                // DataTable
	                _api_register('i18n()', function (token, def, plural) {
	                    var ctx = this.context[0];
	                    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

	                    if (resolved === undefined) {
	                        resolved = def;
	                    }

	                    if (plural !== undefined && $.isPlainObject(resolved)) {
	                        resolved = resolved[plural] !== undefined ?
	                            resolved[plural] :
	                            resolved._;
	                    }

	                    return resolved.replace('%d', plural); // nb: plural might be undefined,
	                });

	                /**
	                 * Version string for plug-ins to check compatibility. Allowed format is
	                 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	                 * only for non-release builds. See http://semver.org/ for more information.
	                 *  @member
	                 *  @type string
	                 *  @default Version number
	                 */
	                DataTable.version = "1.10.7";

	                /**
	                 * Private data store, containing all of the settings objects that are
	                 * created for the tables on a given page.
	                 *
	                 * Note that the `DataTable.settings` object is aliased to
	                 * `jQuery.fn.dataTableExt` through which it may be accessed and
	                 * manipulated, or `jQuery.fn.dataTable.settings`.
	                 *  @member
	                 *  @type array
	                 *  @default []
	                 *  @private
	                 */
	                DataTable.settings = [];

	                /**
	                 * Object models container, for the various models that DataTables has
	                 * available to it. These models define the objects that are used to hold
	                 * the active state and configuration of the table.
	                 *  @namespace
	                 */
	                DataTable.models = {};



	                /**
	                 * Template object for the way in which DataTables holds information about
	                 * search information for the global filter and individual column filters.
	                 *  @namespace
	                 */
	                DataTable.models.oSearch = {
	                    /**
	                     * Flag to indicate if the filtering should be case insensitive or not
	                     *  @type boolean
	                     *  @default true
	                     */
	                    "bCaseInsensitive": true,

	                    /**
	                     * Applied search term
	                     *  @type string
	                     *  @default <i>Empty string</i>
	                     */
	                    "sSearch": "",

	                    /**
	                     * Flag to indicate if the search term should be interpreted as a
	                     * regular expression (true) or not (false) and therefore and special
	                     * regex characters escaped.
	                     *  @type boolean
	                     *  @default false
	                     */
	                    "bRegex": false,

	                    /**
	                     * Flag to indicate if DataTables is to use its smart filtering or not.
	                     *  @type boolean
	                     *  @default true
	                     */
	                    "bSmart": true
	                };




	                /**
	                 * Template object for the way in which DataTables holds information about
	                 * each individual row. This is the object format used for the settings
	                 * aoData array.
	                 *  @namespace
	                 */
	                DataTable.models.oRow = {
	                    /**
	                     * TR element for the row
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTr": null,

	                    /**
	                     * Array of TD elements for each row. This is null until the row has been
	                     * created.
	                     *  @type array nodes
	                     *  @default []
	                     */
	                    "anCells": null,

	                    /**
	                     * Data object from the original data source for the row. This is either
	                     * an array if using the traditional form of DataTables, or an object if
	                     * using mData options. The exact type will depend on the passed in
	                     * data from the data source, or will be an array if using DOM a data
	                     * source.
	                     *  @type array|object
	                     *  @default []
	                     */
	                    "_aData": [],

	                    /**
	                     * Sorting data cache - this array is ostensibly the same length as the
	                     * number of columns (although each index is generated only as it is
	                     * needed), and holds the data that is used for sorting each column in the
	                     * row. We do this cache generation at the start of the sort in order that
	                     * the formatting of the sort data need be done only once for each cell
	                     * per sort. This array should not be read from or written to by anything
	                     * other than the master sorting methods.
	                     *  @type array
	                     *  @default null
	                     *  @private
	                     */
	                    "_aSortData": null,

	                    /**
	                     * Per cell filtering data cache. As per the sort data cache, used to
	                     * increase the performance of the filtering in DataTables
	                     *  @type array
	                     *  @default null
	                     *  @private
	                     */
	                    "_aFilterData": null,

	                    /**
	                     * Filtering data cache. This is the same as the cell filtering cache, but
	                     * in this case a string rather than an array. This is easily computed with
	                     * a join on `_aFilterData`, but is provided as a cache so the join isn't
	                     * needed on every search (memory traded for performance)
	                     *  @type array
	                     *  @default null
	                     *  @private
	                     */
	                    "_sFilterRow": null,

	                    /**
	                     * Cache of the class name that DataTables has applied to the row, so we
	                     * can quickly look at this variable rather than needing to do a DOM check
	                     * on className for the nTr property.
	                     *  @type string
	                     *  @default <i>Empty string</i>
	                     *  @private
	                     */
	                    "_sRowStripe": "",

	                    /**
	                     * Denote if the original data source was from the DOM, or the data source
	                     * object. This is used for invalidating data, so DataTables can
	                     * automatically read data from the original source, unless uninstructed
	                     * otherwise.
	                     *  @type string
	                     *  @default null
	                     *  @private
	                     */
	                    "src": null
	                };


	                /**
	                 * Template object for the column information object in DataTables. This object
	                 * is held in the settings aoColumns array and contains all the information that
	                 * DataTables needs about each individual column.
	                 *
	                 * Note that this object is related to {@link DataTable.defaults.column}
	                 * but this one is the internal data store for DataTables's cache of columns.
	                 * It should NOT be manipulated outside of DataTables. Any configuration should
	                 * be done through the initialisation options.
	                 *  @namespace
	                 */
	                DataTable.models.oColumn = {
	                    /**
	                     * Column index. This could be worked out on-the-fly with $.inArray, but it
	                     * is faster to just hold it as a variable
	                     *  @type integer
	                     *  @default null
	                     */
	                    "idx": null,

	                    /**
	                     * A list of the columns that sorting should occur on when this column
	                     * is sorted. That this property is an array allows multi-column sorting
	                     * to be defined for a column (for example first name / last name columns
	                     * would benefit from this). The values are integers pointing to the
	                     * columns to be sorted on (typically it will be a single integer pointing
	                     * at itself, but that doesn't need to be the case).
	                     *  @type array
	                     */
	                    "aDataSort": null,

	                    /**
	                     * Define the sorting directions that are applied to the column, in sequence
	                     * as the column is repeatedly sorted upon - i.e. the first value is used
	                     * as the sorting direction when the column if first sorted (clicked on).
	                     * Sort it again (click again) and it will move on to the next index.
	                     * Repeat until loop.
	                     *  @type array
	                     */
	                    "asSorting": null,

	                    /**
	                     * Flag to indicate if the column is searchable, and thus should be included
	                     * in the filtering or not.
	                     *  @type boolean
	                     */
	                    "bSearchable": null,

	                    /**
	                     * Flag to indicate if the column is sortable or not.
	                     *  @type boolean
	                     */
	                    "bSortable": null,

	                    /**
	                     * Flag to indicate if the column is currently visible in the table or not
	                     *  @type boolean
	                     */
	                    "bVisible": null,

	                    /**
	                     * Store for manual type assignment using the `column.type` option. This
	                     * is held in store so we can manipulate the column's `sType` property.
	                     *  @type string
	                     *  @default null
	                     *  @private
	                     */
	                    "_sManualType": null,

	                    /**
	                     * Flag to indicate if HTML5 data attributes should be used as the data
	                     * source for filtering or sorting. True is either are.
	                     *  @type boolean
	                     *  @default false
	                     *  @private
	                     */
	                    "_bAttrSrc": false,

	                    /**
	                     * Developer definable function that is called whenever a cell is created (Ajax source,
	                     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	                     * allowing you to modify the DOM element (add background colour for example) when the
	                     * element is available.
	                     *  @type function
	                     *  @param {element} nTd The TD node that has been created
	                     *  @param {*} sData The Data for the cell
	                     *  @param {array|object} oData The data for the whole row
	                     *  @param {int} iRow The row index for the aoData data store
	                     *  @default null
	                     */
	                    "fnCreatedCell": null,

	                    /**
	                     * Function to get data from a cell in a column. You should <b>never</b>
	                     * access data directly through _aData internally in DataTables - always use
	                     * the method attached to this property. It allows mData to function as
	                     * required. This function is automatically assigned by the column
	                     * initialisation method
	                     *  @type function
	                     *  @param {array|object} oData The data array/object for the array
	                     *    (i.e. aoData[]._aData)
	                     *  @param {string} sSpecific The specific data type you want to get -
	                     *    'display', 'type' 'filter' 'sort'
	                     *  @returns {*} The data for the cell from the given row's data
	                     *  @default null
	                     */
	                    "fnGetData": null,

	                    /**
	                     * Function to set data for a cell in the column. You should <b>never</b>
	                     * set the data directly to _aData internally in DataTables - always use
	                     * this method. It allows mData to function as required. This function
	                     * is automatically assigned by the column initialisation method
	                     *  @type function
	                     *  @param {array|object} oData The data array/object for the array
	                     *    (i.e. aoData[]._aData)
	                     *  @param {*} sValue Value to set
	                     *  @default null
	                     */
	                    "fnSetData": null,

	                    /**
	                     * Property to read the value for the cells in the column from the data
	                     * source array / object. If null, then the default content is used, if a
	                     * function is given then the return from the function is used.
	                     *  @type function|int|string|null
	                     *  @default null
	                     */
	                    "mData": null,

	                    /**
	                     * Partner property to mData which is used (only when defined) to get
	                     * the data - i.e. it is basically the same as mData, but without the
	                     * 'set' option, and also the data fed to it is the result from mData.
	                     * This is the rendering method to match the data method of mData.
	                     *  @type function|int|string|null
	                     *  @default null
	                     */
	                    "mRender": null,

	                    /**
	                     * Unique header TH/TD element for this column - this is what the sorting
	                     * listener is attached to (if sorting is enabled.)
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTh": null,

	                    /**
	                     * Unique footer TH/TD element for this column (if there is one). Not used
	                     * in DataTables as such, but can be used for plug-ins to reference the
	                     * footer for each column.
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTf": null,

	                    /**
	                     * The class to apply to all TD elements in the table's TBODY for the column
	                     *  @type string
	                     *  @default null
	                     */
	                    "sClass": null,

	                    /**
	                     * When DataTables calculates the column widths to assign to each column,
	                     * it finds the longest string in each column and then constructs a
	                     * temporary table and reads the widths from that. The problem with this
	                     * is that "mmm" is much wider then "iiii", but the latter is a longer
	                     * string - thus the calculation can go wrong (doing it properly and putting
	                     * it into an DOM object and measuring that is horribly(!) slow). Thus as
	                     * a "work around" we provide this option. It will append its value to the
	                     * text that is found to be the longest string for the column - i.e. padding.
	                     *  @type string
	                     */
	                    "sContentPadding": null,

	                    /**
	                     * Allows a default value to be given for a column's data, and will be used
	                     * whenever a null data source is encountered (this can be because mData
	                     * is set to null, or because the data source itself is null).
	                     *  @type string
	                     *  @default null
	                     */
	                    "sDefaultContent": null,

	                    /**
	                     * Name for the column, allowing reference to the column by name as well as
	                     * by index (needs a lookup to work by name).
	                     *  @type string
	                     */
	                    "sName": null,

	                    /**
	                     * Custom sorting data type - defines which of the available plug-ins in
	                     * afnSortData the custom sorting will use - if any is defined.
	                     *  @type string
	                     *  @default std
	                     */
	                    "sSortDataType": 'std',

	                    /**
	                     * Class to be applied to the header element when sorting on this column
	                     *  @type string
	                     *  @default null
	                     */
	                    "sSortingClass": null,

	                    /**
	                     * Class to be applied to the header element when sorting on this column -
	                     * when jQuery UI theming is used.
	                     *  @type string
	                     *  @default null
	                     */
	                    "sSortingClassJUI": null,

	                    /**
	                     * Title of the column - what is seen in the TH element (nTh).
	                     *  @type string
	                     */
	                    "sTitle": null,

	                    /**
	                     * Column sorting and filtering type
	                     *  @type string
	                     *  @default null
	                     */
	                    "sType": null,

	                    /**
	                     * Width of the column
	                     *  @type string
	                     *  @default null
	                     */
	                    "sWidth": null,

	                    /**
	                     * Width of the column when it was first "encountered"
	                     *  @type string
	                     *  @default null
	                     */
	                    "sWidthOrig": null
	                };


	                /*
	                 * Developer note: The properties of the object below are given in Hungarian
	                 * notation, that was used as the interface for DataTables prior to v1.10, however
	                 * from v1.10 onwards the primary interface is camel case. In order to avoid
	                 * breaking backwards compatibility utterly with this change, the Hungarian
	                 * version is still, internally the primary interface, but is is not documented
	                 * - hence the @name tags in each doc comment. This allows a Javascript function
	                 * to create a map from Hungarian notation to camel case (going the other direction
	                 * would require each property to be listed, which would at around 3K to the size
	                 * of DataTables, while this method is about a 0.5K hit.
	                 *
	                 * Ultimately this does pave the way for Hungarian notation to be dropped
	                 * completely, but that is a massive amount of work and will break current
	                 * installs (therefore is on-hold until v2).
	                 */

	                /**
	                 * Initialisation options that can be given to DataTables at initialisation
	                 * time.
	                 *  @namespace
	                 */
	                DataTable.defaults = {
	                    /**
	                     * An array of data to use for the table, passed in at initialisation which
	                     * will be used in preference to any data which is already in the DOM. This is
	                     * particularly useful for constructing tables purely in Javascript, for
	                     * example with a custom Ajax call.
	                     *  @type array
	                     *  @default null
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.data
	                     *
	                     *  @example
	                     *    // Using a 2D array data source
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "data": [
	                     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
	                     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
	                     *        ],
	                     *        "columns": [
	                     *          { "title": "Engine" },
	                     *          { "title": "Browser" },
	                     *          { "title": "Platform" },
	                     *          { "title": "Version" },
	                     *          { "title": "Grade" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using an array of objects as a data source (`data`)
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "data": [
	                     *          {
	                     *            "engine":   "Trident",
	                     *            "browser":  "Internet Explorer 4.0",
	                     *            "platform": "Win 95+",
	                     *            "version":  4,
	                     *            "grade":    "X"
	                     *          },
	                     *          {
	                     *            "engine":   "Trident",
	                     *            "browser":  "Internet Explorer 5.0",
	                     *            "platform": "Win 95+",
	                     *            "version":  5,
	                     *            "grade":    "C"
	                     *          }
	                     *        ],
	                     *        "columns": [
	                     *          { "title": "Engine",   "data": "engine" },
	                     *          { "title": "Browser",  "data": "browser" },
	                     *          { "title": "Platform", "data": "platform" },
	                     *          { "title": "Version",  "data": "version" },
	                     *          { "title": "Grade",    "data": "grade" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "aaData": null,


	                    /**
	                     * If ordering is enabled, then DataTables will perform a first pass sort on
	                     * initialisation. You can define which column(s) the sort is performed
	                     * upon, and the sorting direction, with this variable. The `sorting` array
	                     * should contain an array for each column to be sorted initially containing
	                     * the column's index and a direction string ('asc' or 'desc').
	                     *  @type array
	                     *  @default [[0,'asc']]
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.order
	                     *
	                     *  @example
	                     *    // Sort by 3rd column first, and then 4th column
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "order": [[2,'asc'], [3,'desc']]
	                     *      } );
	                     *    } );
	                     *
	                     *    // No initial sorting
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "order": []
	                     *      } );
	                     *    } );
	                     */
	                    "aaSorting": [[0, 'asc']],


	                    /**
	                     * This parameter is basically identical to the `sorting` parameter, but
	                     * cannot be overridden by user interaction with the table. What this means
	                     * is that you could have a column (visible or hidden) which the sorting
	                     * will always be forced on first - any sorting after that (from the user)
	                     * will then be performed as required. This can be useful for grouping rows
	                     * together.
	                     *  @type array
	                     *  @default null
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.orderFixed
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "orderFixed": [[0,'asc']]
	                     *      } );
	                     *    } )
	                     */
	                    "aaSortingFixed": [],


	                    /**
	                     * DataTables can be instructed to load data to display in the table from a
	                     * Ajax source. This option defines how that Ajax call is made and where to.
	                     *
	                     * The `ajax` property has three different modes of operation, depending on
	                     * how it is defined. These are:
	                     *
	                     * * `string` - Set the URL from where the data should be loaded from.
	                     * * `object` - Define properties for `jQuery.ajax`.
	                     * * `function` - Custom data get function
	                     *
	                     * `string`
	                     * --------
	                     *
	                     * As a string, the `ajax` property simply defines the URL from which
	                     * DataTables will load data.
	                     *
	                     * `object`
	                     * --------
	                     *
	                     * As an object, the parameters in the object are passed to
	                     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
	                     * of the Ajax request. DataTables has a number of default parameters which
	                     * you can override using this option. Please refer to the jQuery
	                     * documentation for a full description of the options available, although
	                     * the following parameters provide additional options in DataTables or
	                     * require special consideration:
	                     *
	                     * * `data` - As with jQuery, `data` can be provided as an object, but it
	                     *   can also be used as a function to manipulate the data DataTables sends
	                     *   to the server. The function takes a single parameter, an object of
	                     *   parameters with the values that DataTables has readied for sending. An
	                     *   object may be returned which will be merged into the DataTables
	                     *   defaults, or you can add the items to the object that was passed in and
	                     *   not return anything from the function. This supersedes `fnServerParams`
	                     *   from DataTables 1.9-.
	                     *
	                     * * `dataSrc` - By default DataTables will look for the property `data` (or
	                     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
	                     *   from an Ajax source or for server-side processing - this parameter
	                     *   allows that property to be changed. You can use Javascript dotted
	                     *   object notation to get a data source for multiple levels of nesting, or
	                     *   it my be used as a function. As a function it takes a single parameter,
	                     *   the JSON returned from the server, which can be manipulated as
	                     *   required, with the returned value being that used by DataTables as the
	                     *   data source for the table. This supersedes `sAjaxDataProp` from
	                     *   DataTables 1.9-.
	                     *
	                     * * `success` - Should not be overridden it is used internally in
	                     *   DataTables. To manipulate / transform the data returned by the server
	                     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
	                     *
	                     * `function`
	                     * ----------
	                     *
	                     * As a function, making the Ajax call is left up to yourself allowing
	                     * complete control of the Ajax request. Indeed, if desired, a method other
	                     * than Ajax could be used to obtain the required data, such as Web storage
	                     * or an AIR database.
	                     *
	                     * The function is given four parameters and no return is required. The
	                     * parameters are:
	                     *
	                     * 1. _object_ - Data to send to the server
	                     * 2. _function_ - Callback function that must be executed when the required
	                     *    data has been obtained. That data should be passed into the callback
	                     *    as the only parameter
	                     * 3. _object_ - DataTables settings object for the table
	                     *
	                     * Note that this supersedes `fnServerData` from DataTables 1.9-.
	                     *
	                     *  @type string|object|function
	                     *  @default null
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.ajax
	                     *  @since 1.10.0
	                     *
	                     * @example
	                     *   // Get JSON data from a file via Ajax.
	                     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
	                     *   $('#example').dataTable( {
	                     *     "ajax": "data.json"
	                     *   } );
	                     *
	                     * @example
	                     *   // Get JSON data from a file via Ajax, using `dataSrc` to change
	                     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
	                     *   $('#example').dataTable( {
	                     *     "ajax": {
	                     *       "url": "data.json",
	                     *       "dataSrc": "tableData"
	                     *     }
	                     *   } );
	                     *
	                     * @example
	                     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
	                     *   // from a plain array rather than an array in an object
	                     *   $('#example').dataTable( {
	                     *     "ajax": {
	                     *       "url": "data.json",
	                     *       "dataSrc": ""
	                     *     }
	                     *   } );
	                     *
	                     * @example
	                     *   // Manipulate the data returned from the server - add a link to data
	                     *   // (note this can, should, be done using `render` for the column - this
	                     *   // is just a simple example of how the data can be manipulated).
	                     *   $('#example').dataTable( {
	                     *     "ajax": {
	                     *       "url": "data.json",
	                     *       "dataSrc": function ( json ) {
	                     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
	                     *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
	                     *         }
	                     *         return json;
	                     *       }
	                     *     }
	                     *   } );
	                     *
	                     * @example
	                     *   // Add data to the request
	                     *   $('#example').dataTable( {
	                     *     "ajax": {
	                     *       "url": "data.json",
	                     *       "data": function ( d ) {
	                     *         return {
	                     *           "extra_search": $('#extra').val()
	                     *         };
	                     *       }
	                     *     }
	                     *   } );
	                     *
	                     * @example
	                     *   // Send request as POST
	                     *   $('#example').dataTable( {
	                     *     "ajax": {
	                     *       "url": "data.json",
	                     *       "type": "POST"
	                     *     }
	                     *   } );
	                     *
	                     * @example
	                     *   // Get the data from localStorage (could interface with a form for
	                     *   // adding, editing and removing rows).
	                     *   $('#example').dataTable( {
	                     *     "ajax": function (data, callback, settings) {
	                     *       callback(
	                     *         JSON.parse( localStorage.getItem('dataTablesData') )
	                     *       );
	                     *     }
	                     *   } );
	                     */
	                    "ajax": null,


	                    /**
	                     * This parameter allows you to readily specify the entries in the length drop
	                     * down menu that DataTables shows when pagination is enabled. It can be
	                     * either a 1D array of options which will be used for both the displayed
	                     * option and the value, or a 2D array which will use the array in the first
	                     * position as the value, and the array in the second position as the
	                     * displayed options (useful for language strings such as 'All').
	                     *
	                     * Note that the `pageLength` property will be automatically set to the
	                     * first value given in this array, unless `pageLength` is also provided.
	                     *  @type array
	                     *  @default [ 10, 25, 50, 100 ]
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.lengthMenu
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
	                     *      } );
	                     *    } );
	                     */
	                    "aLengthMenu": [10, 25, 50, 100],


	                    /**
	                     * The `columns` option in the initialisation parameter allows you to define
	                     * details about the way individual columns behave. For a full list of
	                     * column options that can be set, please see
	                     * {@link DataTable.defaults.column}. Note that if you use `columns` to
	                     * define your columns, you must have an entry in the array for every single
	                     * column that you have in your table (these can be null if you don't which
	                     * to specify any options).
	                     *  @member
	                     *
	                     *  @name DataTable.defaults.column
	                     */
	                    "aoColumns": null,

	                    /**
	                     * Very similar to `columns`, `columnDefs` allows you to target a specific
	                     * column, multiple columns, or all columns, using the `targets` property of
	                     * each object in the array. This allows great flexibility when creating
	                     * tables, as the `columnDefs` arrays can be of any length, targeting the
	                     * columns you specifically want. `columnDefs` may use any of the column
	                     * options available: {@link DataTable.defaults.column}, but it _must_
	                     * have `targets` defined in each object in the array. Values in the `targets`
	                     * array may be:
	                     *   <ul>
	                     *     <li>a string - class name will be matched on the TH for the column</li>
	                     *     <li>0 or a positive integer - column index counting from the left</li>
	                     *     <li>a negative integer - column index counting from the right</li>
	                     *     <li>the string "_all" - all columns (i.e. assign a default)</li>
	                     *   </ul>
	                     *  @member
	                     *
	                     *  @name DataTable.defaults.columnDefs
	                     */
	                    "aoColumnDefs": null,


	                    /**
	                     * Basically the same as `search`, this parameter defines the individual column
	                     * filtering state at initialisation time. The array must be of the same size
	                     * as the number of columns, and each element be an object with the parameters
	                     * `search` and `escapeRegex` (the latter is optional). 'null' is also
	                     * accepted and the default will be used.
	                     *  @type array
	                     *  @default []
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.searchCols
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "searchCols": [
	                     *          null,
	                     *          { "search": "My filter" },
	                     *          null,
	                     *          { "search": "^[0-9]", "escapeRegex": false }
	                     *        ]
	                     *      } );
	                     *    } )
	                     */
	                    "aoSearchCols": [],


	                    /**
	                     * An array of CSS classes that should be applied to displayed rows. This
	                     * array may be of any length, and DataTables will apply each class
	                     * sequentially, looping when required.
	                     *  @type array
	                     *  @default null <i>Will take the values determined by the `oClasses.stripe*`
	                     *    options</i>
	                     *
	                     *  @dtopt Option
	                     *  @name DataTable.defaults.stripeClasses
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
	                     *      } );
	                     *    } )
	                     */
	                    "asStripeClasses": null,


	                    /**
	                     * Enable or disable automatic column width calculation. This can be disabled
	                     * as an optimisation (it takes some time to calculate the widths) if the
	                     * tables widths are passed in using `columns`.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.autoWidth
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "autoWidth": false
	                     *      } );
	                     *    } );
	                     */
	                    "bAutoWidth": true,


	                    /**
	                     * Deferred rendering can provide DataTables with a huge speed boost when you
	                     * are using an Ajax or JS data source for the table. This option, when set to
	                     * true, will cause DataTables to defer the creation of the table elements for
	                     * each row until they are needed for a draw - saving a significant amount of
	                     * time.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.deferRender
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "ajax": "sources/arrays.txt",
	                     *        "deferRender": true
	                     *      } );
	                     *    } );
	                     */
	                    "bDeferRender": false,


	                    /**
	                     * Replace a DataTable which matches the given selector and replace it with
	                     * one which has the properties of the new initialisation object passed. If no
	                     * table matches the selector, then the new DataTable will be constructed as
	                     * per normal.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.destroy
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "srollY": "200px",
	                     *        "paginate": false
	                     *      } );
	                     *
	                     *      // Some time later....
	                     *      $('#example').dataTable( {
	                     *        "filter": false,
	                     *        "destroy": true
	                     *      } );
	                     *    } );
	                     */
	                    "bDestroy": false,


	                    /**
	                     * Enable or disable filtering of data. Filtering in DataTables is "smart" in
	                     * that it allows the end user to input multiple words (space separated) and
	                     * will match a row containing those words, even if not in the order that was
	                     * specified (this allow matching across multiple columns). Note that if you
	                     * wish to use filtering in DataTables this must remain 'true' - to remove the
	                     * default filtering input box and retain filtering abilities, please use
	                     * {@link DataTable.defaults.dom}.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.searching
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "searching": false
	                     *      } );
	                     *    } );
	                     */
	                    "bFilter": true,


	                    /**
	                     * Enable or disable the table information display. This shows information
	                     * about the data that is currently visible on the page, including information
	                     * about filtered data if that action is being performed.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.info
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "info": false
	                     *      } );
	                     *    } );
	                     */
	                    "bInfo": true,


	                    /**
	                     * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
	                     * slightly different and additional mark-up from what DataTables has
	                     * traditionally used).
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.jQueryUI
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "jQueryUI": true
	                     *      } );
	                     *    } );
	                     */
	                    "bJQueryUI": false,


	                    /**
	                     * Allows the end user to select the size of a formatted page from a select
	                     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.lengthChange
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "lengthChange": false
	                     *      } );
	                     *    } );
	                     */
	                    "bLengthChange": true,


	                    /**
	                     * Enable or disable pagination.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.paging
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "paging": false
	                     *      } );
	                     *    } );
	                     */
	                    "bPaginate": true,


	                    /**
	                     * Enable or disable the display of a 'processing' indicator when the table is
	                     * being processed (e.g. a sort). This is particularly useful for tables with
	                     * large amounts of data where it can take a noticeable amount of time to sort
	                     * the entries.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.processing
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "processing": true
	                     *      } );
	                     *    } );
	                     */
	                    "bProcessing": false,


	                    /**
	                     * Retrieve the DataTables object for the given selector. Note that if the
	                     * table has already been initialised, this parameter will cause DataTables
	                     * to simply return the object that has already been set up - it will not take
	                     * account of any changes you might have made to the initialisation object
	                     * passed to DataTables (setting this parameter to true is an acknowledgement
	                     * that you understand this). `destroy` can be used to reinitialise a table if
	                     * you need.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.retrieve
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      initTable();
	                     *      tableActions();
	                     *    } );
	                     *
	                     *    function initTable ()
	                     *    {
	                     *      return $('#example').dataTable( {
	                     *        "scrollY": "200px",
	                     *        "paginate": false,
	                     *        "retrieve": true
	                     *      } );
	                     *    }
	                     *
	                     *    function tableActions ()
	                     *    {
	                     *      var table = initTable();
	                     *      // perform API operations with oTable
	                     *    }
	                     */
	                    "bRetrieve": false,


	                    /**
	                     * When vertical (y) scrolling is enabled, DataTables will force the height of
	                     * the table's viewport to the given height at all times (useful for layout).
	                     * However, this can look odd when filtering data down to a small data set,
	                     * and the footer is left "floating" further down. This parameter (when
	                     * enabled) will cause DataTables to collapse the table's viewport down when
	                     * the result set will fit within the given Y height.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.scrollCollapse
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "scrollY": "200",
	                     *        "scrollCollapse": true
	                     *      } );
	                     *    } );
	                     */
	                    "bScrollCollapse": false,


	                    /**
	                     * Configure DataTables to use server-side processing. Note that the
	                     * `ajax` parameter must also be given in order to give DataTables a
	                     * source to obtain the required data for each draw.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Features
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.serverSide
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "serverSide": true,
	                     *        "ajax": "xhr.php"
	                     *      } );
	                     *    } );
	                     */
	                    "bServerSide": false,


	                    /**
	                     * Enable or disable sorting of columns. Sorting of individual columns can be
	                     * disabled by the `sortable` option for each column.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.ordering
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "ordering": false
	                     *      } );
	                     *    } );
	                     */
	                    "bSort": true,


	                    /**
	                     * Enable or display DataTables' ability to sort multiple columns at the
	                     * same time (activated by shift-click by the user).
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.orderMulti
	                     *
	                     *  @example
	                     *    // Disable multiple column sorting ability
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "orderMulti": false
	                     *      } );
	                     *    } );
	                     */
	                    "bSortMulti": true,


	                    /**
	                     * Allows control over whether DataTables should use the top (true) unique
	                     * cell that is found for a single column, or the bottom (false - default).
	                     * This is useful when using complex headers.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.orderCellsTop
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "orderCellsTop": true
	                     *      } );
	                     *    } );
	                     */
	                    "bSortCellsTop": false,


	                    /**
	                     * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
	                     * `sorting\_3` to the columns which are currently being sorted on. This is
	                     * presented as a feature switch as it can increase processing time (while
	                     * classes are removed and added) so for large data sets you might want to
	                     * turn this off.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.orderClasses
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "orderClasses": false
	                     *      } );
	                     *    } );
	                     */
	                    "bSortClasses": true,


	                    /**
	                     * Enable or disable state saving. When enabled HTML5 `localStorage` will be
	                     * used to save table display information such as pagination information,
	                     * display length, filtering and sorting. As such when the end user reloads
	                     * the page the display display will match what thy had previously set up.
	                     *
	                     * Due to the use of `localStorage` the default state saving is not supported
	                     * in IE6 or 7. If state saving is required in those browsers, use
	                     * `stateSaveCallback` to provide a storage solution such as cookies.
	                     *  @type boolean
	                     *  @default false
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.stateSave
	                     *
	                     *  @example
	                     *    $(document).ready( function () {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true
	                     *      } );
	                     *    } );
	                     */
	                    "bStateSave": false,


	                    /**
	                     * This function is called when a TR element is created (and all TD child
	                     * elements have been inserted), or registered if using a DOM source, allowing
	                     * manipulation of the TR element (adding classes etc).
	                     *  @type function
	                     *  @param {node} row "TR" element for the current row
	                     *  @param {array} data Raw data array for this row
	                     *  @param {int} dataIndex The index of this row in the internal aoData array
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.createdRow
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "createdRow": function( row, data, dataIndex ) {
	                     *          // Bold the grade for all 'A' grade browsers
	                     *          if ( data[4] == "A" )
	                     *          {
	                     *            $('td:eq(4)', row).html( '<b>A</b>' );
	                     *          }
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnCreatedRow": null,


	                    /**
	                     * This function is called on every 'draw' event, and allows you to
	                     * dynamically modify any aspect you want about the created DOM.
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.drawCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "drawCallback": function( settings ) {
	                     *          alert( 'DataTables has redrawn the table' );
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnDrawCallback": null,


	                    /**
	                     * Identical to fnHeaderCallback() but for the table footer this function
	                     * allows you to modify the table footer on every 'draw' event.
	                     *  @type function
	                     *  @param {node} foot "TR" element for the footer
	                     *  @param {array} data Full table data (as derived from the original HTML)
	                     *  @param {int} start Index for the current display starting point in the
	                     *    display array
	                     *  @param {int} end Index for the current display ending point in the
	                     *    display array
	                     *  @param {array int} display Index array to translate the visual position
	                     *    to the full data array
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.footerCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "footerCallback": function( tfoot, data, start, end, display ) {
	                     *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
	                     *        }
	                     *      } );
	                     *    } )
	                     */
	                    "fnFooterCallback": null,


	                    /**
	                     * When rendering large numbers in the information element for the table
	                     * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
	                     * to have a comma separator for the 'thousands' units (e.g. 1 million is
	                     * rendered as "1,000,000") to help readability for the end user. This
	                     * function will override the default method DataTables uses.
	                     *  @type function
	                     *  @member
	                     *  @param {int} toFormat number to be formatted
	                     *  @returns {string} formatted string for DataTables to show the number
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.formatNumber
	                     *
	                     *  @example
	                     *    // Format a number using a single quote for the separator (note that
	                     *    // this can also be done with the language.thousands option)
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "formatNumber": function ( toFormat ) {
	                     *          return toFormat.toString().replace(
	                     *            /\B(?=(\d{3})+(?!\d))/g, "'"
	                     *          );
	                     *        };
	                     *      } );
	                     *    } );
	                     */
	                    "fnFormatNumber": function (toFormat) {
	                        return toFormat.toString().replace(
	                            /\B(?=(\d{3})+(?!\d))/g,
	                            this.oLanguage.sThousands
	                        );
	                    },


	                    /**
	                     * This function is called on every 'draw' event, and allows you to
	                     * dynamically modify the header row. This can be used to calculate and
	                     * display useful information about the table.
	                     *  @type function
	                     *  @param {node} head "TR" element for the header
	                     *  @param {array} data Full table data (as derived from the original HTML)
	                     *  @param {int} start Index for the current display starting point in the
	                     *    display array
	                     *  @param {int} end Index for the current display ending point in the
	                     *    display array
	                     *  @param {array int} display Index array to translate the visual position
	                     *    to the full data array
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.headerCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "fheaderCallback": function( head, data, start, end, display ) {
	                     *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
	                     *        }
	                     *      } );
	                     *    } )
	                     */
	                    "fnHeaderCallback": null,


	                    /**
	                     * The information element can be used to convey information about the current
	                     * state of the table. Although the internationalisation options presented by
	                     * DataTables are quite capable of dealing with most customisations, there may
	                     * be times where you wish to customise the string further. This callback
	                     * allows you to do exactly that.
	                     *  @type function
	                     *  @param {object} oSettings DataTables settings object
	                     *  @param {int} start Starting position in data for the draw
	                     *  @param {int} end End position in data for the draw
	                     *  @param {int} max Total number of rows in the table (regardless of
	                     *    filtering)
	                     *  @param {int} total Total number of rows in the data set, after filtering
	                     *  @param {string} pre The string that DataTables has formatted using it's
	                     *    own rules
	                     *  @returns {string} The string to be displayed in the information element.
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.infoCallback
	                     *
	                     *  @example
	                     *    $('#example').dataTable( {
	                     *      "infoCallback": function( settings, start, end, max, total, pre ) {
	                     *        return start +" to "+ end;
	                     *      }
	                     *    } );
	                     */
	                    "fnInfoCallback": null,


	                    /**
	                     * Called when the table has been initialised. Normally DataTables will
	                     * initialise sequentially and there will be no need for this function,
	                     * however, this does not hold true when using external language information
	                     * since that is obtained using an async XHR call.
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *  @param {object} json The JSON object request from the server - only
	                     *    present if client-side Ajax sourced data is used
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.initComplete
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "initComplete": function(settings, json) {
	                     *          alert( 'DataTables has finished its initialisation.' );
	                     *        }
	                     *      } );
	                     *    } )
	                     */
	                    "fnInitComplete": null,


	                    /**
	                     * Called at the very start of each table draw and can be used to cancel the
	                     * draw by returning false, any other return (including undefined) results in
	                     * the full draw occurring).
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *  @returns {boolean} False will cancel the draw, anything else (including no
	                     *    return) will allow it to complete.
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.preDrawCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "preDrawCallback": function( settings ) {
	                     *          if ( $('#test').val() == 1 ) {
	                     *            return false;
	                     *          }
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnPreDrawCallback": null,


	                    /**
	                     * This function allows you to 'post process' each row after it have been
	                     * generated for each table draw, but before it is rendered on screen. This
	                     * function might be used for setting the row class name etc.
	                     *  @type function
	                     *  @param {node} row "TR" element for the current row
	                     *  @param {array} data Raw data array for this row
	                     *  @param {int} displayIndex The display index for the current table draw
	                     *  @param {int} displayIndexFull The index of the data in the full list of
	                     *    rows (after filtering)
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.rowCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
	                     *          // Bold the grade for all 'A' grade browsers
	                     *          if ( data[4] == "A" ) {
	                     *            $('td:eq(4)', row).html( '<b>A</b>' );
	                     *          }
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnRowCallback": null,


	                    /**
	                     * __Deprecated__ The functionality provided by this parameter has now been
	                     * superseded by that provided through `ajax`, which should be used instead.
	                     *
	                     * This parameter allows you to override the default function which obtains
	                     * the data from the server so something more suitable for your application.
	                     * For example you could use POST data, or pull information from a Gears or
	                     * AIR database.
	                     *  @type function
	                     *  @member
	                     *  @param {string} source HTTP source to obtain the data from (`ajax`)
	                     *  @param {array} data A key/value pair object containing the data to send
	                     *    to the server
	                     *  @param {function} callback to be called on completion of the data get
	                     *    process that will draw the data on the page.
	                     *  @param {object} settings DataTables settings object
	                     *
	                     *  @dtopt Callbacks
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.serverData
	                     *
	                     *  @deprecated 1.10. Please use `ajax` for this functionality now.
	                     */
	                    "fnServerData": null,


	                    /**
	                     * __Deprecated__ The functionality provided by this parameter has now been
	                     * superseded by that provided through `ajax`, which should be used instead.
	                     *
	                     *  It is often useful to send extra data to the server when making an Ajax
	                     * request - for example custom filtering information, and this callback
	                     * function makes it trivial to send extra information to the server. The
	                     * passed in parameter is the data set that has been constructed by
	                     * DataTables, and you can add to this or modify it as you require.
	                     *  @type function
	                     *  @param {array} data Data array (array of objects which are name/value
	                     *    pairs) that has been constructed by DataTables and will be sent to the
	                     *    server. In the case of Ajax sourced data with server-side processing
	                     *    this will be an empty array, for server-side processing there will be a
	                     *    significant number of parameters!
	                     *  @returns {undefined} Ensure that you modify the data array passed in,
	                     *    as this is passed by reference.
	                     *
	                     *  @dtopt Callbacks
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.serverParams
	                     *
	                     *  @deprecated 1.10. Please use `ajax` for this functionality now.
	                     */
	                    "fnServerParams": null,


	                    /**
	                     * Load the table state. With this function you can define from where, and how, the
	                     * state of a table is loaded. By default DataTables will load from `localStorage`
	                     * but you might wish to use a server-side database or cookies.
	                     *  @type function
	                     *  @member
	                     *  @param {object} settings DataTables settings object
	                     *  @return {object} The DataTables state object to be loaded
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.stateLoadCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateLoadCallback": function (settings) {
	                     *          var o;
	                     *
	                     *          // Send an Ajax request to the server to get the data. Note that
	                     *          // this is a synchronous request.
	                     *          $.ajax( {
	                     *            "url": "/state_load",
	                     *            "async": false,
	                     *            "dataType": "json",
	                     *            "success": function (json) {
	                     *              o = json;
	                     *            }
	                     *          } );
	                     *
	                     *          return o;
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnStateLoadCallback": function (settings) {
	                        try {
	                            return JSON.parse(
	                                (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
	                                    'DataTables_' + settings.sInstance + '_' + location.pathname
	                                )
	                            );
	                        } catch (e) { }
	                    },


	                    /**
	                     * Callback which allows modification of the saved state prior to loading that state.
	                     * This callback is called when the table is loading state from the stored data, but
	                     * prior to the settings object being modified by the saved state. Note that for
	                     * plug-in authors, you should use the `stateLoadParams` event to load parameters for
	                     * a plug-in.
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *  @param {object} data The state object that is to be loaded
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.stateLoadParams
	                     *
	                     *  @example
	                     *    // Remove a saved filter, so filtering is never loaded
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateLoadParams": function (settings, data) {
	                     *          data.oSearch.sSearch = "";
	                     *        }
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Disallow state loading by returning false
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateLoadParams": function (settings, data) {
	                     *          return false;
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnStateLoadParams": null,


	                    /**
	                     * Callback that is called when the state has been loaded from the state saving method
	                     * and the DataTables settings object has been modified as a result of the loaded state.
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *  @param {object} data The state object that was loaded
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.stateLoaded
	                     *
	                     *  @example
	                     *    // Show an alert with the filtering value that was saved
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateLoaded": function (settings, data) {
	                     *          alert( 'Saved filter was: '+data.oSearch.sSearch );
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnStateLoaded": null,


	                    /**
	                     * Save the table state. This function allows you to define where and how the state
	                     * information for the table is stored By default DataTables will use `localStorage`
	                     * but you might wish to use a server-side database or cookies.
	                     *  @type function
	                     *  @member
	                     *  @param {object} settings DataTables settings object
	                     *  @param {object} data The state object to be saved
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.stateSaveCallback
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateSaveCallback": function (settings, data) {
	                     *          // Send an Ajax request to the server with the state object
	                     *          $.ajax( {
	                     *            "url": "/state_save",
	                     *            "data": data,
	                     *            "dataType": "json",
	                     *            "method": "POST"
	                     *            "success": function () {}
	                     *          } );
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnStateSaveCallback": function (settings, data) {
	                        try {
	                            (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
	                                'DataTables_' + settings.sInstance + '_' + location.pathname,
	                                JSON.stringify(data)
	                            );
	                        } catch (e) { }
	                    },


	                    /**
	                     * Callback which allows modification of the state to be saved. Called when the table
	                     * has changed state a new state save is required. This method allows modification of
	                     * the state saving object prior to actually doing the save, including addition or
	                     * other state properties or modification. Note that for plug-in authors, you should
	                     * use the `stateSaveParams` event to save parameters for a plug-in.
	                     *  @type function
	                     *  @param {object} settings DataTables settings object
	                     *  @param {object} data The state object to be saved
	                     *
	                     *  @dtopt Callbacks
	                     *  @name DataTable.defaults.stateSaveParams
	                     *
	                     *  @example
	                     *    // Remove a saved filter, so filtering is never saved
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateSave": true,
	                     *        "stateSaveParams": function (settings, data) {
	                     *          data.oSearch.sSearch = "";
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "fnStateSaveParams": null,


	                    /**
	                     * Duration for which the saved state information is considered valid. After this period
	                     * has elapsed the state will be returned to the default.
	                     * Value is given in seconds.
	                     *  @type int
	                     *  @default 7200 <i>(2 hours)</i>
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.stateDuration
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "stateDuration": 60*60*24; // 1 day
	                     *      } );
	                     *    } )
	                     */
	                    "iStateDuration": 7200,


	                    /**
	                     * When enabled DataTables will not make a request to the server for the first
	                     * page draw - rather it will use the data already on the page (no sorting etc
	                     * will be applied to it), thus saving on an XHR at load time. `deferLoading`
	                     * is used to indicate that deferred loading is required, but it is also used
	                     * to tell DataTables how many records there are in the full table (allowing
	                     * the information element and pagination to be displayed correctly). In the case
	                     * where a filtering is applied to the table on initial load, this can be
	                     * indicated by giving the parameter as an array, where the first element is
	                     * the number of records available after filtering and the second element is the
	                     * number of records without filtering (allowing the table information element
	                     * to be shown correctly).
	                     *  @type int | array
	                     *  @default null
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.deferLoading
	                     *
	                     *  @example
	                     *    // 57 records available in the table, no filtering applied
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "serverSide": true,
	                     *        "ajax": "scripts/server_processing.php",
	                     *        "deferLoading": 57
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // 57 records after filtering, 100 without filtering (an initial filter applied)
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "serverSide": true,
	                     *        "ajax": "scripts/server_processing.php",
	                     *        "deferLoading": [ 57, 100 ],
	                     *        "search": {
	                     *          "search": "my_filter"
	                     *        }
	                     *      } );
	                     *    } );
	                     */
	                    "iDeferLoading": null,


	                    /**
	                     * Number of rows to display on a single page when using pagination. If
	                     * feature enabled (`lengthChange`) then the end user will be able to override
	                     * this to a custom setting using a pop-up menu.
	                     *  @type int
	                     *  @default 10
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.pageLength
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "pageLength": 50
	                     *      } );
	                     *    } )
	                     */
	                    "iDisplayLength": 10,


	                    /**
	                     * Define the starting point for data display when using DataTables with
	                     * pagination. Note that this parameter is the number of records, rather than
	                     * the page number, so if you have 10 records per page and want to start on
	                     * the third page, it should be "20".
	                     *  @type int
	                     *  @default 0
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.displayStart
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "displayStart": 20
	                     *      } );
	                     *    } )
	                     */
	                    "iDisplayStart": 0,


	                    /**
	                     * By default DataTables allows keyboard navigation of the table (sorting, paging,
	                     * and filtering) by adding a `tabindex` attribute to the required elements. This
	                     * allows you to tab through the controls and press the enter key to activate them.
	                     * The tabindex is default 0, meaning that the tab follows the flow of the document.
	                     * You can overrule this using this parameter if you wish. Use a value of -1 to
	                     * disable built-in keyboard navigation.
	                     *  @type int
	                     *  @default 0
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.tabIndex
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "tabIndex": 1
	                     *      } );
	                     *    } );
	                     */
	                    "iTabIndex": 0,


	                    /**
	                     * Classes that DataTables assigns to the various components and features
	                     * that it adds to the HTML table. This allows classes to be configured
	                     * during initialisation in addition to through the static
	                     * {@link DataTable.ext.oStdClasses} object).
	                     *  @namespace
	                     *  @name DataTable.defaults.classes
	                     */
	                    "oClasses": {},


	                    /**
	                     * All strings that DataTables uses in the user interface that it creates
	                     * are defined in this object, allowing you to modified them individually or
	                     * completely replace them all as required.
	                     *  @namespace
	                     *  @name DataTable.defaults.language
	                     */
	                    "oLanguage": {
	                        /**
	                         * Strings that are used for WAI-ARIA labels and controls only (these are not
	                         * actually visible on the page, but will be read by screenreaders, and thus
	                         * must be internationalised as well).
	                         *  @namespace
	                         *  @name DataTable.defaults.language.aria
	                         */
	                        "oAria": {
	                            /**
	                             * ARIA label that is added to the table headers when the column may be
	                             * sorted ascending by activing the column (click or return when focused).
	                             * Note that the column header is prefixed to this string.
	                             *  @type string
	                             *  @default : activate to sort column ascending
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.aria.sortAscending
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "aria": {
	                             *            "sortAscending": " - click/return to sort ascending"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sSortAscending": ": activate to sort column ascending",

	                            /**
	                             * ARIA label that is added to the table headers when the column may be
	                             * sorted descending by activing the column (click or return when focused).
	                             * Note that the column header is prefixed to this string.
	                             *  @type string
	                             *  @default : activate to sort column ascending
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.aria.sortDescending
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "aria": {
	                             *            "sortDescending": " - click/return to sort descending"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sSortDescending": ": activate to sort column descending"
	                        },

	                        /**
	                         * Pagination string used by DataTables for the built-in pagination
	                         * control types.
	                         *  @namespace
	                         *  @name DataTable.defaults.language.paginate
	                         */
	                        "oPaginate": {
	                            /**
	                             * Text to use when using the 'full_numbers' type of pagination for the
	                             * button to take the user to the first page.
	                             *  @type string
	                             *  @default First
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.paginate.first
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "paginate": {
	                             *            "first": "First page"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sFirst": "First",


	                            /**
	                             * Text to use when using the 'full_numbers' type of pagination for the
	                             * button to take the user to the last page.
	                             *  @type string
	                             *  @default Last
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.paginate.last
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "paginate": {
	                             *            "last": "Last page"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sLast": "Last",


	                            /**
	                             * Text to use for the 'next' pagination button (to take the user to the
	                             * next page).
	                             *  @type string
	                             *  @default Next
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.paginate.next
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "paginate": {
	                             *            "next": "Next page"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sNext": "Next",


	                            /**
	                             * Text to use for the 'previous' pagination button (to take the user to
	                             * the previous page).
	                             *  @type string
	                             *  @default Previous
	                             *
	                             *  @dtopt Language
	                             *  @name DataTable.defaults.language.paginate.previous
	                             *
	                             *  @example
	                             *    $(document).ready( function() {
	                             *      $('#example').dataTable( {
	                             *        "language": {
	                             *          "paginate": {
	                             *            "previous": "Previous page"
	                             *          }
	                             *        }
	                             *      } );
	                             *    } );
	                             */
	                            "sPrevious": "Previous"
	                        },

	                        /**
	                         * This string is shown in preference to `zeroRecords` when the table is
	                         * empty of data (regardless of filtering). Note that this is an optional
	                         * parameter - if it is not given, the value of `zeroRecords` will be used
	                         * instead (either the default or given value).
	                         *  @type string
	                         *  @default No data available in table
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.emptyTable
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "emptyTable": "No data available in table"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sEmptyTable": "No data available in table",


	                        /**
	                         * This string gives information to the end user about the information
	                         * that is current on display on the page. The following tokens can be
	                         * used in the string and will be dynamically replaced as the table
	                         * display updates. This tokens can be placed anywhere in the string, or
	                         * removed as needed by the language requires:
	                         *
	                         * * `\_START\_` - Display index of the first record on the current page
	                         * * `\_END\_` - Display index of the last record on the current page
	                         * * `\_TOTAL\_` - Number of records in the table after filtering
	                         * * `\_MAX\_` - Number of records in the table without filtering
	                         * * `\_PAGE\_` - Current page number
	                         * * `\_PAGES\_` - Total number of pages of data in the table
	                         *
	                         *  @type string
	                         *  @default Showing _START_ to _END_ of _TOTAL_ entries
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.info
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "info": "Showing page _PAGE_ of _PAGES_"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",


	                        /**
	                         * Display information string for when the table is empty. Typically the
	                         * format of this string should match `info`.
	                         *  @type string
	                         *  @default Showing 0 to 0 of 0 entries
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.infoEmpty
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "infoEmpty": "No entries to show"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",


	                        /**
	                         * When a user filters the information in a table, this string is appended
	                         * to the information (`info`) to give an idea of how strong the filtering
	                         * is. The variable _MAX_ is dynamically updated.
	                         *  @type string
	                         *  @default (filtered from _MAX_ total entries)
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.infoFiltered
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "infoFiltered": " - filtering from _MAX_ records"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sInfoFiltered": "(filtered from _MAX_ total entries)",


	                        /**
	                         * If can be useful to append extra information to the info string at times,
	                         * and this variable does exactly that. This information will be appended to
	                         * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
	                         * being used) at all times.
	                         *  @type string
	                         *  @default <i>Empty string</i>
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.infoPostFix
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "infoPostFix": "All records shown are derived from real information."
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sInfoPostFix": "",


	                        /**
	                         * This decimal place operator is a little different from the other
	                         * language options since DataTables doesn't output floating point
	                         * numbers, so it won't ever use this for display of a number. Rather,
	                         * what this parameter does is modify the sort methods of the table so
	                         * that numbers which are in a format which has a character other than
	                         * a period (`.`) as a decimal place will be sorted numerically.
	                         *
	                         * Note that numbers with different decimal places cannot be shown in
	                         * the same table and still be sortable, the table must be consistent.
	                         * However, multiple different tables on the page can use different
	                         * decimal place characters.
	                         *  @type string
	                         *  @default 
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.decimal
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "decimal": ","
	                         *          "thousands": "."
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sDecimal": "",


	                        /**
	                         * DataTables has a build in number formatter (`formatNumber`) which is
	                         * used to format large numbers that are used in the table information.
	                         * By default a comma is used, but this can be trivially changed to any
	                         * character you wish with this parameter.
	                         *  @type string
	                         *  @default ,
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.thousands
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "thousands": "'"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sThousands": ",",


	                        /**
	                         * Detail the action that will be taken when the drop down menu for the
	                         * pagination length option is changed. The '_MENU_' variable is replaced
	                         * with a default select list of 10, 25, 50 and 100, and can be replaced
	                         * with a custom select box if required.
	                         *  @type string
	                         *  @default Show _MENU_ entries
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.lengthMenu
	                         *
	                         *  @example
	                         *    // Language change only
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "lengthMenu": "Display _MENU_ records"
	                         *        }
	                         *      } );
	                         *    } );
	                         *
	                         *  @example
	                         *    // Language and options change
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "lengthMenu": 'Display <select>'+
	                         *            '<option value="10">10</option>'+
	                         *            '<option value="20">20</option>'+
	                         *            '<option value="30">30</option>'+
	                         *            '<option value="40">40</option>'+
	                         *            '<option value="50">50</option>'+
	                         *            '<option value="-1">All</option>'+
	                         *            '</select> records'
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sLengthMenu": "Show _MENU_ entries",


	                        /**
	                         * When using Ajax sourced data and during the first draw when DataTables is
	                         * gathering the data, this message is shown in an empty row in the table to
	                         * indicate to the end user the the data is being loaded. Note that this
	                         * parameter is not used when loading data by server-side processing, just
	                         * Ajax sourced data with client-side processing.
	                         *  @type string
	                         *  @default Loading...
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.loadingRecords
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "loadingRecords": "Please wait - loading..."
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sLoadingRecords": "Loading...",


	                        /**
	                         * Text which is displayed when the table is processing a user action
	                         * (usually a sort command or similar).
	                         *  @type string
	                         *  @default Processing...
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.processing
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "processing": "DataTables is currently busy"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sProcessing": "Processing...",


	                        /**
	                         * Details the actions that will be taken when the user types into the
	                         * filtering input text box. The variable "_INPUT_", if used in the string,
	                         * is replaced with the HTML text box for the filtering input allowing
	                         * control over where it appears in the string. If "_INPUT_" is not given
	                         * then the input box is appended to the string automatically.
	                         *  @type string
	                         *  @default Search:
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.search
	                         *
	                         *  @example
	                         *    // Input text box will be appended at the end automatically
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "search": "Filter records:"
	                         *        }
	                         *      } );
	                         *    } );
	                         *
	                         *  @example
	                         *    // Specify where the filter should appear
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "search": "Apply filter _INPUT_ to table"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sSearch": "Search:",


	                        /**
	                         * Assign a `placeholder` attribute to the search `input` element
	                         *  @type string
	                         *  @default 
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.searchPlaceholder
	                         */
	                        "sSearchPlaceholder": "",


	                        /**
	                         * All of the language information can be stored in a file on the
	                         * server-side, which DataTables will look up if this parameter is passed.
	                         * It must store the URL of the language file, which is in a JSON format,
	                         * and the object has the same properties as the oLanguage object in the
	                         * initialiser object (i.e. the above parameters). Please refer to one of
	                         * the example language files to see how this works in action.
	                         *  @type string
	                         *  @default <i>Empty string - i.e. disabled</i>
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.url
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sUrl": "",


	                        /**
	                         * Text shown inside the table records when the is no information to be
	                         * displayed after filtering. `emptyTable` is shown when there is simply no
	                         * information in the table at all (regardless of filtering).
	                         *  @type string
	                         *  @default No matching records found
	                         *
	                         *  @dtopt Language
	                         *  @name DataTable.defaults.language.zeroRecords
	                         *
	                         *  @example
	                         *    $(document).ready( function() {
	                         *      $('#example').dataTable( {
	                         *        "language": {
	                         *          "zeroRecords": "No records to display"
	                         *        }
	                         *      } );
	                         *    } );
	                         */
	                        "sZeroRecords": "No matching records found"
	                    },


	                    /**
	                     * This parameter allows you to have define the global filtering state at
	                     * initialisation time. As an object the `search` parameter must be
	                     * defined, but all other parameters are optional. When `regex` is true,
	                     * the search string will be treated as a regular expression, when false
	                     * (default) it will be treated as a straight string. When `smart`
	                     * DataTables will use it's smart filtering methods (to word match at
	                     * any point in the data), when false this will not be done.
	                     *  @namespace
	                     *  @extends DataTable.models.oSearch
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.search
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "search": {"search": "Initial search"}
	                     *      } );
	                     *    } )
	                     */
	                    "oSearch": $.extend({}, DataTable.models.oSearch),


	                    /**
	                     * __Deprecated__ The functionality provided by this parameter has now been
	                     * superseded by that provided through `ajax`, which should be used instead.
	                     *
	                     * By default DataTables will look for the property `data` (or `aaData` for
	                     * compatibility with DataTables 1.9-) when obtaining data from an Ajax
	                     * source or for server-side processing - this parameter allows that
	                     * property to be changed. You can use Javascript dotted object notation to
	                     * get a data source for multiple levels of nesting.
	                     *  @type string
	                     *  @default data
	                     *
	                     *  @dtopt Options
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.ajaxDataProp
	                     *
	                     *  @deprecated 1.10. Please use `ajax` for this functionality now.
	                     */
	                    "sAjaxDataProp": "data",


	                    /**
	                     * __Deprecated__ The functionality provided by this parameter has now been
	                     * superseded by that provided through `ajax`, which should be used instead.
	                     *
	                     * You can instruct DataTables to load data from an external
	                     * source using this parameter (use aData if you want to pass data in you
	                     * already have). Simply provide a url a JSON object can be obtained from.
	                     *  @type string
	                     *  @default null
	                     *
	                     *  @dtopt Options
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.ajaxSource
	                     *
	                     *  @deprecated 1.10. Please use `ajax` for this functionality now.
	                     */
	                    "sAjaxSource": null,


	                    /**
	                     * This initialisation variable allows you to specify exactly where in the
	                     * DOM you want DataTables to inject the various controls it adds to the page
	                     * (for example you might want the pagination controls at the top of the
	                     * table). DIV elements (with or without a custom class) can also be added to
	                     * aid styling. The follow syntax is used:
	                     *   <ul>
	                     *     <li>The following options are allowed:
	                     *       <ul>
	                     *         <li>'l' - Length changing</li>
	                     *         <li>'f' - Filtering input</li>
	                     *         <li>'t' - The table!</li>
	                     *         <li>'i' - Information</li>
	                     *         <li>'p' - Pagination</li>
	                     *         <li>'r' - pRocessing</li>
	                     *       </ul>
	                     *     </li>
	                     *     <li>The following constants are allowed:
	                     *       <ul>
	                     *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
	                     *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
	                     *       </ul>
	                     *     </li>
	                     *     <li>The following syntax is expected:
	                     *       <ul>
	                     *         <li>'&lt;' and '&gt;' - div elements</li>
	                     *         <li>'&lt;"class" and '&gt;' - div with a class</li>
	                     *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
	                     *       </ul>
	                     *     </li>
	                     *     <li>Examples:
	                     *       <ul>
	                     *         <li>'&lt;"wrapper"flipt&gt;'</li>
	                     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
	                     *       </ul>
	                     *     </li>
	                     *   </ul>
	                     *  @type string
	                     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
	                     *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.dom
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
	                     *      } );
	                     *    } );
	                     */
	                    "sDom": "lfrtip",


	                    /**
	                     * Search delay option. This will throttle full table searches that use the
	                     * DataTables provided search input element (it does not effect calls to
	                     * `dt-api search()`, providing a delay before the search is made.
	                     *  @type integer
	                     *  @default 0
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.searchDelay
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "searchDelay": 200
	                     *      } );
	                     *    } )
	                     */
	                    "searchDelay": null,


	                    /**
	                     * DataTables features four different built-in options for the buttons to
	                     * display for pagination control:
	                     *
	                     * * `simple` - 'Previous' and 'Next' buttons only
	                     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
	                     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
	                     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
	                     *   page numbers
	                     *  
	                     * Further methods can be added using {@link DataTable.ext.oPagination}.
	                     *  @type string
	                     *  @default simple_numbers
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.pagingType
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "pagingType": "full_numbers"
	                     *      } );
	                     *    } )
	                     */
	                    "sPaginationType": "simple_numbers",


	                    /**
	                     * Enable horizontal scrolling. When a table is too wide to fit into a
	                     * certain layout, or you have a large number of columns in the table, you
	                     * can enable x-scrolling to show the table in a viewport, which can be
	                     * scrolled. This property can be `true` which will allow the table to
	                     * scroll horizontally when needed, or any CSS unit, or a number (in which
	                     * case it will be treated as a pixel measurement). Setting as simply `true`
	                     * is recommended.
	                     *  @type boolean|string
	                     *  @default <i>blank string - i.e. disabled</i>
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.scrollX
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "scrollX": true,
	                     *        "scrollCollapse": true
	                     *      } );
	                     *    } );
	                     */
	                    "sScrollX": "",


	                    /**
	                     * This property can be used to force a DataTable to use more width than it
	                     * might otherwise do when x-scrolling is enabled. For example if you have a
	                     * table which requires to be well spaced, this parameter is useful for
	                     * "over-sizing" the table, and thus forcing scrolling. This property can by
	                     * any CSS unit, or a number (in which case it will be treated as a pixel
	                     * measurement).
	                     *  @type string
	                     *  @default <i>blank string - i.e. disabled</i>
	                     *
	                     *  @dtopt Options
	                     *  @name DataTable.defaults.scrollXInner
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "scrollX": "100%",
	                     *        "scrollXInner": "110%"
	                     *      } );
	                     *    } );
	                     */
	                    "sScrollXInner": "",


	                    /**
	                     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
	                     * to the given height, and enable scrolling for any data which overflows the
	                     * current viewport. This can be used as an alternative to paging to display
	                     * a lot of data in a small area (although paging and scrolling can both be
	                     * enabled at the same time). This property can be any CSS unit, or a number
	                     * (in which case it will be treated as a pixel measurement).
	                     *  @type string
	                     *  @default <i>blank string - i.e. disabled</i>
	                     *
	                     *  @dtopt Features
	                     *  @name DataTable.defaults.scrollY
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "scrollY": "200px",
	                     *        "paginate": false
	                     *      } );
	                     *    } );
	                     */
	                    "sScrollY": "",


	                    /**
	                     * __Deprecated__ The functionality provided by this parameter has now been
	                     * superseded by that provided through `ajax`, which should be used instead.
	                     *
	                     * Set the HTTP method that is used to make the Ajax call for server-side
	                     * processing or Ajax sourced data.
	                     *  @type string
	                     *  @default GET
	                     *
	                     *  @dtopt Options
	                     *  @dtopt Server-side
	                     *  @name DataTable.defaults.serverMethod
	                     *
	                     *  @deprecated 1.10. Please use `ajax` for this functionality now.
	                     */
	                    "sServerMethod": "GET",


	                    /**
	                     * DataTables makes use of renderers when displaying HTML elements for
	                     * a table. These renderers can be added or modified by plug-ins to
	                     * generate suitable mark-up for a site. For example the Bootstrap
	                     * integration plug-in for DataTables uses a paging button renderer to
	                     * display pagination buttons in the mark-up required by Bootstrap.
	                     *
	                     * For further information about the renderers available see
	                     * DataTable.ext.renderer
	                     *  @type string|object
	                     *  @default null
	                     *
	                     *  @name DataTable.defaults.renderer
	                     *
	                     */
	                    "renderer": null
	                };

	                _fnHungarianMap(DataTable.defaults);



	                /*
	                 * Developer note - See note in model.defaults.js about the use of Hungarian
	                 * notation and camel case.
	                 */

	                /**
	                 * Column options that can be given to DataTables at initialisation time.
	                 *  @namespace
	                 */
	                DataTable.defaults.column = {
	                    /**
	                     * Define which column(s) an order will occur on for this column. This
	                     * allows a column's ordering to take multiple columns into account when
	                     * doing a sort or use the data from a different column. For example first
	                     * name / last name columns make sense to do a multi-column sort over the
	                     * two columns.
	                     *  @type array|int
	                     *  @default null <i>Takes the value of the column index automatically</i>
	                     *
	                     *  @name DataTable.defaults.column.orderData
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
	                     *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
	                     *          { "orderData": 2, "targets": [ 2 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "orderData": [ 0, 1 ] },
	                     *          { "orderData": [ 1, 0 ] },
	                     *          { "orderData": 2 },
	                     *          null,
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "aDataSort": null,
	                    "iDataSort": -1,


	                    /**
	                     * You can control the default ordering direction, and even alter the
	                     * behaviour of the sort handler (i.e. only allow ascending ordering etc)
	                     * using this parameter.
	                     *  @type array
	                     *  @default [ 'asc', 'desc' ]
	                     *
	                     *  @name DataTable.defaults.column.orderSequence
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
	                     *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
	                     *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          null,
	                     *          { "orderSequence": [ "asc" ] },
	                     *          { "orderSequence": [ "desc", "asc", "asc" ] },
	                     *          { "orderSequence": [ "desc" ] },
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "asSorting": ['asc', 'desc'],


	                    /**
	                     * Enable or disable filtering on the data in this column.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @name DataTable.defaults.column.searchable
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "searchable": false, "targets": [ 0 ] }
	                     *        ] } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "searchable": false },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ] } );
	                     *    } );
	                     */
	                    "bSearchable": true,


	                    /**
	                     * Enable or disable ordering on this column.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @name DataTable.defaults.column.orderable
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "orderable": false, "targets": [ 0 ] }
	                     *        ] } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "orderable": false },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ] } );
	                     *    } );
	                     */
	                    "bSortable": true,


	                    /**
	                     * Enable or disable the display of this column.
	                     *  @type boolean
	                     *  @default true
	                     *
	                     *  @name DataTable.defaults.column.visible
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "visible": false, "targets": [ 0 ] }
	                     *        ] } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "visible": false },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ] } );
	                     *    } );
	                     */
	                    "bVisible": true,


	                    /**
	                     * Developer definable function that is called whenever a cell is created (Ajax source,
	                     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	                     * allowing you to modify the DOM element (add background colour for example) when the
	                     * element is available.
	                     *  @type function
	                     *  @param {element} td The TD node that has been created
	                     *  @param {*} cellData The Data for the cell
	                     *  @param {array|object} rowData The data for the whole row
	                     *  @param {int} row The row index for the aoData data store
	                     *  @param {int} col The column index for aoColumns
	                     *
	                     *  @name DataTable.defaults.column.createdCell
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [3],
	                     *          "createdCell": function (td, cellData, rowData, row, col) {
	                     *            if ( cellData == "1.7" ) {
	                     *              $(td).css('color', 'blue')
	                     *            }
	                     *          }
	                     *        } ]
	                     *      });
	                     *    } );
	                     */
	                    "fnCreatedCell": null,


	                    /**
	                     * This parameter has been replaced by `data` in DataTables to ensure naming
	                     * consistency. `dataProp` can still be used, as there is backwards
	                     * compatibility in DataTables for this option, but it is strongly
	                     * recommended that you use `data` in preference to `dataProp`.
	                     *  @name DataTable.defaults.column.dataProp
	                     */


	                    /**
	                     * This property can be used to read data from any data source property,
	                     * including deeply nested objects / properties. `data` can be given in a
	                     * number of different ways which effect its behaviour:
	                     *
	                     * * `integer` - treated as an array index for the data source. This is the
	                     *   default that DataTables uses (incrementally increased for each column).
	                     * * `string` - read an object property from the data source. There are
	                     *   three 'special' options that can be used in the string to alter how
	                     *   DataTables reads the data from the source object:
	                     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	                     *      Javascript to read from nested objects, so to can the options
	                     *      specified in `data`. For example: `browser.version` or
	                     *      `browser.name`. If your object parameter name contains a period, use
	                     *      `\\` to escape it - i.e. `first\\.name`.
	                     *    * `[]` - Array notation. DataTables can automatically combine data
	                     *      from and array source, joining the data with the characters provided
	                     *      between the two brackets. For example: `name[, ]` would provide a
	                     *      comma-space separated list from the source array. If no characters
	                     *      are provided between the brackets, the original array source is
	                     *      returned.
	                     *    * `()` - Function notation. Adding `()` to the end of a parameter will
	                     *      execute a function of the name given. For example: `browser()` for a
	                     *      simple function on the data source, `browser.version()` for a
	                     *      function in a nested property or even `browser().version` to get an
	                     *      object property if the function called returns an object. Note that
	                     *      function notation is recommended for use in `render` rather than
	                     *      `data` as it is much simpler to use as a renderer.
	                     * * `null` - use the original data source for the row rather than plucking
	                     *   data directly from it. This action has effects on two other
	                     *   initialisation options:
	                     *    * `defaultContent` - When null is given as the `data` option and
	                     *      `defaultContent` is specified for the column, the value defined by
	                     *      `defaultContent` will be used for the cell.
	                     *    * `render` - When null is used for the `data` option and the `render`
	                     *      option is specified for the column, the whole data source for the
	                     *      row is used for the renderer.
	                     * * `function` - the function given will be executed whenever DataTables
	                     *   needs to set or get the data for a cell in the column. The function
	                     *   takes three parameters:
	                     *    * Parameters:
	                     *      * `{array|object}` The data source for the row
	                     *      * `{string}` The type call data requested - this will be 'set' when
	                     *        setting data or 'filter', 'display', 'type', 'sort' or undefined
	                     *        when gathering data. Note that when `undefined` is given for the
	                     *        type DataTables expects to get the raw data for the object back<
	                     *      * `{*}` Data to set when the second parameter is 'set'.
	                     *    * Return:
	                     *      * The return value from the function is not required when 'set' is
	                     *        the type of call, but otherwise the return is what will be used
	                     *        for the data requested.
	                     *
	                     * Note that `data` is a getter and setter option. If you just require
	                     * formatting of data for output, you will likely want to use `render` which
	                     * is simply a getter and thus simpler to use.
	                     *
	                     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
	                     * name change reflects the flexibility of this property and is consistent
	                     * with the naming of mRender. If 'mDataProp' is given, then it will still
	                     * be used by DataTables, as it automatically maps the old name to the new
	                     * if required.
	                     *
	                     *  @type string|int|function|null
	                     *  @default null <i>Use automatically calculated column index</i>
	                     *
	                     *  @name DataTable.defaults.column.data
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Read table data from objects
	                     *    // JSON structure for each row:
	                     *    //   {
	                     *    //      "engine": {value},
	                     *    //      "browser": {value},
	                     *    //      "platform": {value},
	                     *    //      "version": {value},
	                     *    //      "grade": {value}
	                     *    //   }
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "ajaxSource": "sources/objects.txt",
	                     *        "columns": [
	                     *          { "data": "engine" },
	                     *          { "data": "browser" },
	                     *          { "data": "platform" },
	                     *          { "data": "version" },
	                     *          { "data": "grade" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Read information from deeply nested objects
	                     *    // JSON structure for each row:
	                     *    //   {
	                     *    //      "engine": {value},
	                     *    //      "browser": {value},
	                     *    //      "platform": {
	                     *    //         "inner": {value}
	                     *    //      },
	                     *    //      "details": [
	                     *    //         {value}, {value}
	                     *    //      ]
	                     *    //   }
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "ajaxSource": "sources/deep.txt",
	                     *        "columns": [
	                     *          { "data": "engine" },
	                     *          { "data": "browser" },
	                     *          { "data": "platform.inner" },
	                     *          { "data": "platform.details.0" },
	                     *          { "data": "platform.details.1" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `data` as a function to provide different information for
	                     *    // sorting, filtering and display. In this case, currency (price)
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": function ( source, type, val ) {
	                     *            if (type === 'set') {
	                     *              source.price = val;
	                     *              // Store the computed dislay and filter values for efficiency
	                     *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
	                     *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
	                     *              return;
	                     *            }
	                     *            else if (type === 'display') {
	                     *              return source.price_display;
	                     *            }
	                     *            else if (type === 'filter') {
	                     *              return source.price_filter;
	                     *            }
	                     *            // 'sort', 'type' and undefined all just use the integer
	                     *            return source.price;
	                     *          }
	                     *        } ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using default content
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": null,
	                     *          "defaultContent": "Click to edit"
	                     *        } ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using array notation - outputting a list from an array
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": "name[, ]"
	                     *        } ]
	                     *      } );
	                     *    } );
	                     *
	                     */
	                    "mData": null,


	                    /**
	                     * This property is the rendering partner to `data` and it is suggested that
	                     * when you want to manipulate data for display (including filtering,
	                     * sorting etc) without altering the underlying data for the table, use this
	                     * property. `render` can be considered to be the the read only companion to
	                     * `data` which is read / write (then as such more complex). Like `data`
	                     * this option can be given in a number of different ways to effect its
	                     * behaviour:
	                     *
	                     * * `integer` - treated as an array index for the data source. This is the
	                     *   default that DataTables uses (incrementally increased for each column).
	                     * * `string` - read an object property from the data source. There are
	                     *   three 'special' options that can be used in the string to alter how
	                     *   DataTables reads the data from the source object:
	                     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	                     *      Javascript to read from nested objects, so to can the options
	                     *      specified in `data`. For example: `browser.version` or
	                     *      `browser.name`. If your object parameter name contains a period, use
	                     *      `\\` to escape it - i.e. `first\\.name`.
	                     *    * `[]` - Array notation. DataTables can automatically combine data
	                     *      from and array source, joining the data with the characters provided
	                     *      between the two brackets. For example: `name[, ]` would provide a
	                     *      comma-space separated list from the source array. If no characters
	                     *      are provided between the brackets, the original array source is
	                     *      returned.
	                     *    * `()` - Function notation. Adding `()` to the end of a parameter will
	                     *      execute a function of the name given. For example: `browser()` for a
	                     *      simple function on the data source, `browser.version()` for a
	                     *      function in a nested property or even `browser().version` to get an
	                     *      object property if the function called returns an object.
	                     * * `object` - use different data for the different data types requested by
	                     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
	                     *   of the object is the data type the property refers to and the value can
	                     *   defined using an integer, string or function using the same rules as
	                     *   `render` normally does. Note that an `_` option _must_ be specified.
	                     *   This is the default value to use if you haven't specified a value for
	                     *   the data type requested by DataTables.
	                     * * `function` - the function given will be executed whenever DataTables
	                     *   needs to set or get the data for a cell in the column. The function
	                     *   takes three parameters:
	                     *    * Parameters:
	                     *      * {array|object} The data source for the row (based on `data`)
	                     *      * {string} The type call data requested - this will be 'filter',
	                     *        'display', 'type' or 'sort'.
	                     *      * {array|object} The full data source for the row (not based on
	                     *        `data`)
	                     *    * Return:
	                     *      * The return value from the function is what will be used for the
	                     *        data requested.
	                     *
	                     *  @type string|int|function|object|null
	                     *  @default null Use the data source value.
	                     *
	                     *  @name DataTable.defaults.column.render
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Create a comma separated list from an array of objects
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "ajaxSource": "sources/deep.txt",
	                     *        "columns": [
	                     *          { "data": "engine" },
	                     *          { "data": "browser" },
	                     *          {
	                     *            "data": "platform",
	                     *            "render": "[, ].name"
	                     *          }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Execute a function to obtain data
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": null, // Use the full data source object for the renderer's source
	                     *          "render": "browserName()"
	                     *        } ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // As an object, extracting different data for the different types
	                     *    // This would be used with a data source such as:
	                     *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
	                     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
	                     *    // (which has both forms) is used for filtering for if a user inputs either format, while
	                     *    // the formatted phone number is the one that is shown in the table.
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": null, // Use the full data source object for the renderer's source
	                     *          "render": {
	                     *            "_": "phone",
	                     *            "filter": "phone_filter",
	                     *            "display": "phone_display"
	                     *          }
	                     *        } ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Use as a function to create a link from the data source
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "data": "download_link",
	                     *          "render": function ( data, type, full ) {
	                     *            return '<a href="'+data+'">Download</a>';
	                     *          }
	                     *        } ]
	                     *      } );
	                     *    } );
	                     */
	                    "mRender": null,


	                    /**
	                     * Change the cell type created for the column - either TD cells or TH cells. This
	                     * can be useful as TH cells have semantic meaning in the table body, allowing them
	                     * to act as a header for a row (you may wish to add scope='row' to the TH elements).
	                     *  @type string
	                     *  @default td
	                     *
	                     *  @name DataTable.defaults.column.cellType
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Make the first column use TH cells
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [ {
	                     *          "targets": [ 0 ],
	                     *          "cellType": "th"
	                     *        } ]
	                     *      } );
	                     *    } );
	                     */
	                    "sCellType": "td",


	                    /**
	                     * Class to give to each cell in this column.
	                     *  @type string
	                     *  @default <i>Empty string</i>
	                     *
	                     *  @name DataTable.defaults.column.class
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "class": "my_class", "targets": [ 0 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "class": "my_class" },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sClass": "",

	                    /**
	                     * When DataTables calculates the column widths to assign to each column,
	                     * it finds the longest string in each column and then constructs a
	                     * temporary table and reads the widths from that. The problem with this
	                     * is that "mmm" is much wider then "iiii", but the latter is a longer
	                     * string - thus the calculation can go wrong (doing it properly and putting
	                     * it into an DOM object and measuring that is horribly(!) slow). Thus as
	                     * a "work around" we provide this option. It will append its value to the
	                     * text that is found to be the longest string for the column - i.e. padding.
	                     * Generally you shouldn't need this!
	                     *  @type string
	                     *  @default <i>Empty string<i>
	                     *
	                     *  @name DataTable.defaults.column.contentPadding
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          {
	                     *            "contentPadding": "mmm"
	                     *          }
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sContentPadding": "",


	                    /**
	                     * Allows a default value to be given for a column's data, and will be used
	                     * whenever a null data source is encountered (this can be because `data`
	                     * is set to null, or because the data source itself is null).
	                     *  @type string
	                     *  @default null
	                     *
	                     *  @name DataTable.defaults.column.defaultContent
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          {
	                     *            "data": null,
	                     *            "defaultContent": "Edit",
	                     *            "targets": [ -1 ]
	                     *          }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          {
	                     *            "data": null,
	                     *            "defaultContent": "Edit"
	                     *          }
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sDefaultContent": null,


	                    /**
	                     * This parameter is only used in DataTables' server-side processing. It can
	                     * be exceptionally useful to know what columns are being displayed on the
	                     * client side, and to map these to database fields. When defined, the names
	                     * also allow DataTables to reorder information from the server if it comes
	                     * back in an unexpected order (i.e. if you switch your columns around on the
	                     * client-side, your server-side code does not also need updating).
	                     *  @type string
	                     *  @default <i>Empty string</i>
	                     *
	                     *  @name DataTable.defaults.column.name
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "name": "engine", "targets": [ 0 ] },
	                     *          { "name": "browser", "targets": [ 1 ] },
	                     *          { "name": "platform", "targets": [ 2 ] },
	                     *          { "name": "version", "targets": [ 3 ] },
	                     *          { "name": "grade", "targets": [ 4 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "name": "engine" },
	                     *          { "name": "browser" },
	                     *          { "name": "platform" },
	                     *          { "name": "version" },
	                     *          { "name": "grade" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sName": "",


	                    /**
	                     * Defines a data source type for the ordering which can be used to read
	                     * real-time information from the table (updating the internally cached
	                     * version) prior to ordering. This allows ordering to occur on user
	                     * editable elements such as form inputs.
	                     *  @type string
	                     *  @default std
	                     *
	                     *  @name DataTable.defaults.column.orderDataType
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
	                     *          { "type": "numeric", "targets": [ 3 ] },
	                     *          { "orderDataType": "dom-select", "targets": [ 4 ] },
	                     *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          null,
	                     *          null,
	                     *          { "orderDataType": "dom-text" },
	                     *          { "orderDataType": "dom-text", "type": "numeric" },
	                     *          { "orderDataType": "dom-select" },
	                     *          { "orderDataType": "dom-checkbox" }
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sSortDataType": "std",


	                    /**
	                     * The title of this column.
	                     *  @type string
	                     *  @default null <i>Derived from the 'TH' value for this column in the
	                     *    original HTML table.</i>
	                     *
	                     *  @name DataTable.defaults.column.title
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "title": "My column title", "targets": [ 0 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "title": "My column title" },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sTitle": null,


	                    /**
	                     * The type allows you to specify how the data for this column will be
	                     * ordered. Four types (string, numeric, date and html (which will strip
	                     * HTML tags before ordering)) are currently available. Note that only date
	                     * formats understood by Javascript's Date() object will be accepted as type
	                     * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
	                     * 'numeric', 'date' or 'html' (by default). Further types can be adding
	                     * through plug-ins.
	                     *  @type string
	                     *  @default null <i>Auto-detected from raw data</i>
	                     *
	                     *  @name DataTable.defaults.column.type
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "type": "html", "targets": [ 0 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "type": "html" },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sType": null,


	                    /**
	                     * Defining the width of the column, this parameter may take any CSS value
	                     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
	                     * been given a specific width through this interface ensuring that the table
	                     * remains readable.
	                     *  @type string
	                     *  @default null <i>Automatic</i>
	                     *
	                     *  @name DataTable.defaults.column.width
	                     *  @dtopt Columns
	                     *
	                     *  @example
	                     *    // Using `columnDefs`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columnDefs": [
	                     *          { "width": "20%", "targets": [ 0 ] }
	                     *        ]
	                     *      } );
	                     *    } );
	                     *
	                     *  @example
	                     *    // Using `columns`
	                     *    $(document).ready( function() {
	                     *      $('#example').dataTable( {
	                     *        "columns": [
	                     *          { "width": "20%" },
	                     *          null,
	                     *          null,
	                     *          null,
	                     *          null
	                     *        ]
	                     *      } );
	                     *    } );
	                     */
	                    "sWidth": null
	                };

	                _fnHungarianMap(DataTable.defaults.column);



	                /**
	                 * DataTables settings object - this holds all the information needed for a
	                 * given table, including configuration, data and current application of the
	                 * table options. DataTables does not have a single instance for each DataTable
	                 * with the settings attached to that instance, but rather instances of the
	                 * DataTable "class" are created on-the-fly as needed (typically by a
	                 * $().dataTable() call) and the settings object is then applied to that
	                 * instance.
	                 *
	                 * Note that this object is related to {@link DataTable.defaults} but this
	                 * one is the internal data store for DataTables's cache of columns. It should
	                 * NOT be manipulated outside of DataTables. Any configuration should be done
	                 * through the initialisation options.
	                 *  @namespace
	                 *  @todo Really should attach the settings object to individual instances so we
	                 *    don't need to create new instances on each $().dataTable() call (if the
	                 *    table already exists). It would also save passing oSettings around and
	                 *    into every single function. However, this is a very significant
	                 *    architecture change for DataTables and will almost certainly break
	                 *    backwards compatibility with older installations. This is something that
	                 *    will be done in 2.0.
	                 */
	                DataTable.models.oSettings = {
	                    /**
	                     * Primary features of DataTables and their enablement state.
	                     *  @namespace
	                     */
	                    "oFeatures": {

	                        /**
	                         * Flag to say if DataTables should automatically try to calculate the
	                         * optimum table and columns widths (true) or not (false).
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bAutoWidth": null,

	                        /**
	                         * Delay the creation of TR and TD elements until they are actually
	                         * needed by a driven page draw. This can give a significant speed
	                         * increase for Ajax source and Javascript source data, but makes no
	                         * difference at all fro DOM and server-side processing tables.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bDeferRender": null,

	                        /**
	                         * Enable filtering on the table or not. Note that if this is disabled
	                         * then there is no filtering at all on the table, including fnFilter.
	                         * To just remove the filtering input use sDom and remove the 'f' option.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bFilter": null,

	                        /**
	                         * Table information element (the 'Showing x of y records' div) enable
	                         * flag.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bInfo": null,

	                        /**
	                         * Present a user control allowing the end user to change the page size
	                         * when pagination is enabled.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bLengthChange": null,

	                        /**
	                         * Pagination enabled or not. Note that if this is disabled then length
	                         * changing must also be disabled.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bPaginate": null,

	                        /**
	                         * Processing indicator enable flag whenever DataTables is enacting a
	                         * user request - typically an Ajax request for server-side processing.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bProcessing": null,

	                        /**
	                         * Server-side processing enabled flag - when enabled DataTables will
	                         * get all data from the server for every draw - there is no filtering,
	                         * sorting or paging done on the client-side.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bServerSide": null,

	                        /**
	                         * Sorting enablement flag.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bSort": null,

	                        /**
	                         * Multi-column sorting
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bSortMulti": null,

	                        /**
	                         * Apply a class to the columns which are being sorted to provide a
	                         * visual highlight or not. This can slow things down when enabled since
	                         * there is a lot of DOM interaction.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bSortClasses": null,

	                        /**
	                         * State saving enablement flag.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bStateSave": null
	                    },


	                    /**
	                     * Scrolling settings for a table.
	                     *  @namespace
	                     */
	                    "oScroll": {
	                        /**
	                         * When the table is shorter in height than sScrollY, collapse the
	                         * table container down to the height of the table (when true).
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type boolean
	                         */
	                        "bCollapse": null,

	                        /**
	                         * Width of the scrollbar for the web-browser's platform. Calculated
	                         * during table initialisation.
	                         *  @type int
	                         *  @default 0
	                         */
	                        "iBarWidth": 0,

	                        /**
	                         * Viewport width for horizontal scrolling. Horizontal scrolling is
	                         * disabled if an empty string.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type string
	                         */
	                        "sX": null,

	                        /**
	                         * Width to expand the table to when using x-scrolling. Typically you
	                         * should not need to use this.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type string
	                         *  @deprecated
	                         */
	                        "sXInner": null,

	                        /**
	                         * Viewport height for vertical scrolling. Vertical scrolling is disabled
	                         * if an empty string.
	                         * Note that this parameter will be set by the initialisation routine. To
	                         * set a default use {@link DataTable.defaults}.
	                         *  @type string
	                         */
	                        "sY": null
	                    },

	                    /**
	                     * Language information for the table.
	                     *  @namespace
	                     *  @extends DataTable.defaults.oLanguage
	                     */
	                    "oLanguage": {
	                        /**
	                         * Information callback function. See
	                         * {@link DataTable.defaults.fnInfoCallback}
	                         *  @type function
	                         *  @default null
	                         */
	                        "fnInfoCallback": null
	                    },

	                    /**
	                     * Browser support parameters
	                     *  @namespace
	                     */
	                    "oBrowser": {
	                        /**
	                         * Indicate if the browser incorrectly calculates width:100% inside a
	                         * scrolling element (IE6/7)
	                         *  @type boolean
	                         *  @default false
	                         */
	                        "bScrollOversize": false,

	                        /**
	                         * Determine if the vertical scrollbar is on the right or left of the
	                         * scrolling container - needed for rtl language layout, although not
	                         * all browsers move the scrollbar (Safari).
	                         *  @type boolean
	                         *  @default false
	                         */
	                        "bScrollbarLeft": false
	                    },


	                    "ajax": null,


	                    /**
	                     * Array referencing the nodes which are used for the features. The
	                     * parameters of this object match what is allowed by sDom - i.e.
	                     *   <ul>
	                     *     <li>'l' - Length changing</li>
	                     *     <li>'f' - Filtering input</li>
	                     *     <li>'t' - The table!</li>
	                     *     <li>'i' - Information</li>
	                     *     <li>'p' - Pagination</li>
	                     *     <li>'r' - pRocessing</li>
	                     *   </ul>
	                     *  @type array
	                     *  @default []
	                     */
	                    "aanFeatures": [],

	                    /**
	                     * Store data information - see {@link DataTable.models.oRow} for detailed
	                     * information.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoData": [],

	                    /**
	                     * Array of indexes which are in the current display (after filtering etc)
	                     *  @type array
	                     *  @default []
	                     */
	                    "aiDisplay": [],

	                    /**
	                     * Array of indexes for display - no filtering
	                     *  @type array
	                     *  @default []
	                     */
	                    "aiDisplayMaster": [],

	                    /**
	                     * Store information about each column that is in use
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoColumns": [],

	                    /**
	                     * Store information about the table's header
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoHeader": [],

	                    /**
	                     * Store information about the table's footer
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoFooter": [],

	                    /**
	                     * Store the applied global search information in case we want to force a
	                     * research or compare the old search to a new one.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @namespace
	                     *  @extends DataTable.models.oSearch
	                     */
	                    "oPreviousSearch": {},

	                    /**
	                     * Store the applied search for each column - see
	                     * {@link DataTable.models.oSearch} for the format that is used for the
	                     * filtering information for each column.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoPreSearchCols": [],

	                    /**
	                     * Sorting that is applied to the table. Note that the inner arrays are
	                     * used in the following manner:
	                     * <ul>
	                     *   <li>Index 0 - column number</li>
	                     *   <li>Index 1 - current sorting direction</li>
	                     * </ul>
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type array
	                     *  @todo These inner arrays should really be objects
	                     */
	                    "aaSorting": null,

	                    /**
	                     * Sorting that is always applied to the table (i.e. prefixed in front of
	                     * aaSorting).
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aaSortingFixed": [],

	                    /**
	                     * Classes to use for the striping of a table.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type array
	                     *  @default []
	                     */
	                    "asStripeClasses": null,

	                    /**
	                     * If restoring a table - we should restore its striping classes as well
	                     *  @type array
	                     *  @default []
	                     */
	                    "asDestroyStripes": [],

	                    /**
	                     * If restoring a table - we should restore its width
	                     *  @type int
	                     *  @default 0
	                     */
	                    "sDestroyWidth": 0,

	                    /**
	                     * Callback functions array for every time a row is inserted (i.e. on a draw).
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoRowCallback": [],

	                    /**
	                     * Callback functions for the header on each draw.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoHeaderCallback": [],

	                    /**
	                     * Callback function for the footer on each draw.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoFooterCallback": [],

	                    /**
	                     * Array of callback functions for draw callback functions
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoDrawCallback": [],

	                    /**
	                     * Array of callback functions for row created function
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoRowCreatedCallback": [],

	                    /**
	                     * Callback functions for just before the table is redrawn. A return of
	                     * false will be used to cancel the draw.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoPreDrawCallback": [],

	                    /**
	                     * Callback functions for when the table has been initialised.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoInitComplete": [],


	                    /**
	                     * Callbacks for modifying the settings to be stored for state saving, prior to
	                     * saving state.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoStateSaveParams": [],

	                    /**
	                     * Callbacks for modifying the settings that have been stored for state saving
	                     * prior to using the stored values to restore the state.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoStateLoadParams": [],

	                    /**
	                     * Callbacks for operating on the settings object once the saved state has been
	                     * loaded
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoStateLoaded": [],

	                    /**
	                     * Cache the table ID for quick access
	                     *  @type string
	                     *  @default <i>Empty string</i>
	                     */
	                    "sTableId": "",

	                    /**
	                     * The TABLE node for the main table
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTable": null,

	                    /**
	                     * Permanent ref to the thead element
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTHead": null,

	                    /**
	                     * Permanent ref to the tfoot element - if it exists
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTFoot": null,

	                    /**
	                     * Permanent ref to the tbody element
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTBody": null,

	                    /**
	                     * Cache the wrapper node (contains all DataTables controlled elements)
	                     *  @type node
	                     *  @default null
	                     */
	                    "nTableWrapper": null,

	                    /**
	                     * Indicate if when using server-side processing the loading of data
	                     * should be deferred until the second draw.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type boolean
	                     *  @default false
	                     */
	                    "bDeferLoading": false,

	                    /**
	                     * Indicate if all required information has been read in
	                     *  @type boolean
	                     *  @default false
	                     */
	                    "bInitialised": false,

	                    /**
	                     * Information about open rows. Each object in the array has the parameters
	                     * 'nTr' and 'nParent'
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoOpenRows": [],

	                    /**
	                     * Dictate the positioning of DataTables' control elements - see
	                     * {@link DataTable.model.oInit.sDom}.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type string
	                     *  @default null
	                     */
	                    "sDom": null,

	                    /**
	                     * Search delay (in mS)
	                     *  @type integer
	                     *  @default null
	                     */
	                    "searchDelay": null,

	                    /**
	                     * Which type of pagination should be used.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type string
	                     *  @default two_button
	                     */
	                    "sPaginationType": "two_button",

	                    /**
	                     * The state duration (for `stateSave`) in seconds.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type int
	                     *  @default 0
	                     */
	                    "iStateDuration": 0,

	                    /**
	                     * Array of callback functions for state saving. Each array element is an
	                     * object with the following parameters:
	                     *   <ul>
	                     *     <li>function:fn - function to call. Takes two parameters, oSettings
	                     *       and the JSON string to save that has been thus far created. Returns
	                     *       a JSON string to be inserted into a json object
	                     *       (i.e. '"param": [ 0, 1, 2]')</li>
	                     *     <li>string:sName - name of callback</li>
	                     *   </ul>
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoStateSave": [],

	                    /**
	                     * Array of callback functions for state loading. Each array element is an
	                     * object with the following parameters:
	                     *   <ul>
	                     *     <li>function:fn - function to call. Takes two parameters, oSettings
	                     *       and the object stored. May return false to cancel state loading</li>
	                     *     <li>string:sName - name of callback</li>
	                     *   </ul>
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoStateLoad": [],

	                    /**
	                     * State that was saved. Useful for back reference
	                     *  @type object
	                     *  @default null
	                     */
	                    "oSavedState": null,

	                    /**
	                     * State that was loaded. Useful for back reference
	                     *  @type object
	                     *  @default null
	                     */
	                    "oLoadedState": null,

	                    /**
	                     * Source url for AJAX data for the table.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type string
	                     *  @default null
	                     */
	                    "sAjaxSource": null,

	                    /**
	                     * Property from a given object from which to read the table data from. This
	                     * can be an empty string (when not server-side processing), in which case
	                     * it is  assumed an an array is given directly.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type string
	                     */
	                    "sAjaxDataProp": null,

	                    /**
	                     * Note if draw should be blocked while getting data
	                     *  @type boolean
	                     *  @default true
	                     */
	                    "bAjaxDataGet": true,

	                    /**
	                     * The last jQuery XHR object that was used for server-side data gathering.
	                     * This can be used for working with the XHR information in one of the
	                     * callbacks
	                     *  @type object
	                     *  @default null
	                     */
	                    "jqXHR": null,

	                    /**
	                     * JSON returned from the server in the last Ajax request
	                     *  @type object
	                     *  @default undefined
	                     */
	                    "json": undefined,

	                    /**
	                     * Data submitted as part of the last Ajax request
	                     *  @type object
	                     *  @default undefined
	                     */
	                    "oAjaxData": undefined,

	                    /**
	                     * Function to get the server-side data.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type function
	                     */
	                    "fnServerData": null,

	                    /**
	                     * Functions which are called prior to sending an Ajax request so extra
	                     * parameters can easily be sent to the server
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoServerParams": [],

	                    /**
	                     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
	                     * required).
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type string
	                     */
	                    "sServerMethod": null,

	                    /**
	                     * Format numbers for display.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type function
	                     */
	                    "fnFormatNumber": null,

	                    /**
	                     * List of options that can be used for the user selectable length menu.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aLengthMenu": null,

	                    /**
	                     * Counter for the draws that the table does. Also used as a tracker for
	                     * server-side processing
	                     *  @type int
	                     *  @default 0
	                     */
	                    "iDraw": 0,

	                    /**
	                     * Indicate if a redraw is being done - useful for Ajax
	                     *  @type boolean
	                     *  @default false
	                     */
	                    "bDrawing": false,

	                    /**
	                     * Draw index (iDraw) of the last error when parsing the returned data
	                     *  @type int
	                     *  @default -1
	                     */
	                    "iDrawError": -1,

	                    /**
	                     * Paging display length
	                     *  @type int
	                     *  @default 10
	                     */
	                    "_iDisplayLength": 10,

	                    /**
	                     * Paging start point - aiDisplay index
	                     *  @type int
	                     *  @default 0
	                     */
	                    "_iDisplayStart": 0,

	                    /**
	                     * Server-side processing - number of records in the result set
	                     * (i.e. before filtering), Use fnRecordsTotal rather than
	                     * this property to get the value of the number of records, regardless of
	                     * the server-side processing setting.
	                     *  @type int
	                     *  @default 0
	                     *  @private
	                     */
	                    "_iRecordsTotal": 0,

	                    /**
	                     * Server-side processing - number of records in the current display set
	                     * (i.e. after filtering). Use fnRecordsDisplay rather than
	                     * this property to get the value of the number of records, regardless of
	                     * the server-side processing setting.
	                     *  @type boolean
	                     *  @default 0
	                     *  @private
	                     */
	                    "_iRecordsDisplay": 0,

	                    /**
	                     * Flag to indicate if jQuery UI marking and classes should be used.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type boolean
	                     */
	                    "bJUI": null,

	                    /**
	                     * The classes to use for the table
	                     *  @type object
	                     *  @default {}
	                     */
	                    "oClasses": {},

	                    /**
	                     * Flag attached to the settings object so you can check in the draw
	                     * callback if filtering has been done in the draw. Deprecated in favour of
	                     * events.
	                     *  @type boolean
	                     *  @default false
	                     *  @deprecated
	                     */
	                    "bFiltered": false,

	                    /**
	                     * Flag attached to the settings object so you can check in the draw
	                     * callback if sorting has been done in the draw. Deprecated in favour of
	                     * events.
	                     *  @type boolean
	                     *  @default false
	                     *  @deprecated
	                     */
	                    "bSorted": false,

	                    /**
	                     * Indicate that if multiple rows are in the header and there is more than
	                     * one unique cell per column, if the top one (true) or bottom one (false)
	                     * should be used for sorting / title by DataTables.
	                     * Note that this parameter will be set by the initialisation routine. To
	                     * set a default use {@link DataTable.defaults}.
	                     *  @type boolean
	                     */
	                    "bSortCellsTop": null,

	                    /**
	                     * Initialisation object that is used for the table
	                     *  @type object
	                     *  @default null
	                     */
	                    "oInit": null,

	                    /**
	                     * Destroy callback functions - for plug-ins to attach themselves to the
	                     * destroy so they can clean up markup and events.
	                     *  @type array
	                     *  @default []
	                     */
	                    "aoDestroyCallback": [],


	                    /**
	                     * Get the number of records in the current record set, before filtering
	                     *  @type function
	                     */
	                    "fnRecordsTotal": function () {
	                        return _fnDataSource(this) == 'ssp' ?
	                            this._iRecordsTotal * 1 :
	                            this.aiDisplayMaster.length;
	                    },

	                    /**
	                     * Get the number of records in the current record set, after filtering
	                     *  @type function
	                     */
	                    "fnRecordsDisplay": function () {
	                        return _fnDataSource(this) == 'ssp' ?
	                            this._iRecordsDisplay * 1 :
	                            this.aiDisplay.length;
	                    },

	                    /**
	                     * Get the display end point - aiDisplay index
	                     *  @type function
	                     */
	                    "fnDisplayEnd": function () {
	                        var
	                            len = this._iDisplayLength,
	                            start = this._iDisplayStart,
	                            calc = start + len,
	                            records = this.aiDisplay.length,
	                            features = this.oFeatures,
	                            paginate = features.bPaginate;

	                        if (features.bServerSide) {
	                            return paginate === false || len === -1 ?
	                                start + records :
	                                Math.min(start + len, this._iRecordsDisplay);
	                        }
	                        else {
	                            return !paginate || calc > records || len === -1 ?
	                                records :
	                                calc;
	                        }
	                    },

	                    /**
	                     * The DataTables object for this table
	                     *  @type object
	                     *  @default null
	                     */
	                    "oInstance": null,

	                    /**
	                     * Unique identifier for each instance of the DataTables object. If there
	                     * is an ID on the table node, then it takes that value, otherwise an
	                     * incrementing internal counter is used.
	                     *  @type string
	                     *  @default null
	                     */
	                    "sInstance": null,

	                    /**
	                     * tabindex attribute value that is added to DataTables control elements, allowing
	                     * keyboard navigation of the table and its controls.
	                     */
	                    "iTabIndex": 0,

	                    /**
	                     * DIV container for the footer scrolling table if scrolling
	                     */
	                    "nScrollHead": null,

	                    /**
	                     * DIV container for the footer scrolling table if scrolling
	                     */
	                    "nScrollFoot": null,

	                    /**
	                     * Last applied sort
	                     *  @type array
	                     *  @default []
	                     */
	                    "aLastSort": [],

	                    /**
	                     * Stored plug-in instances
	                     *  @type object
	                     *  @default {}
	                     */
	                    "oPlugins": {}
	                };

	                /**
	                 * Extension object for DataTables that is used to provide all extension
	                 * options.
	                 *
	                 * Note that the `DataTable.ext` object is available through
	                 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	                 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	                 *  @namespace
	                 *  @extends DataTable.models.ext
	                 */


	                /**
	                 * DataTables extensions
	                 * 
	                 * This namespace acts as a collection area for plug-ins that can be used to
	                 * extend DataTables capabilities. Indeed many of the build in methods
	                 * use this method to provide their own capabilities (sorting methods for
	                 * example).
	                 *
	                 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	                 * reasons
	                 *
	                 *  @namespace
	                 */
	                DataTable.ext = _ext = {
	                    /**
	                     * Buttons. For use with the Buttons extension for DataTables. This is
	                     * defined here so other extensions can define buttons regardless of load
	                     * order. It is _not_ used by DataTables core.
	                     *
	                     *  @type object
	                     *  @default {}
	                     */
	                    buttons: {},


	                    /**
	                     * Element class names
	                     *
	                     *  @type object
	                     *  @default {}
	                     */
	                    classes: {},


	                    /**
	                     * Error reporting.
	                     * 
	                     * How should DataTables report an error. Can take the value 'alert',
	                     * 'throw', 'none' or a function.
	                     *
	                     *  @type string|function
	                     *  @default alert
	                     */
	                    errMode: "alert",


	                    /**
	                     * Feature plug-ins.
	                     * 
	                     * This is an array of objects which describe the feature plug-ins that are
	                     * available to DataTables. These feature plug-ins are then available for
	                     * use through the `dom` initialisation option.
	                     * 
	                     * Each feature plug-in is described by an object which must have the
	                     * following properties:
	                     * 
	                     * * `fnInit` - function that is used to initialise the plug-in,
	                     * * `cFeature` - a character so the feature can be enabled by the `dom`
	                     *   instillation option. This is case sensitive.
	                     *
	                     * The `fnInit` function has the following input parameters:
	                     *
	                     * 1. `{object}` DataTables settings object: see
	                     *    {@link DataTable.models.oSettings}
	                     *
	                     * And the following return is expected:
	                     * 
	                     * * {node|null} The element which contains your feature. Note that the
	                     *   return may also be void if your plug-in does not require to inject any
	                     *   DOM elements into DataTables control (`dom`) - for example this might
	                     *   be useful when developing a plug-in which allows table control via
	                     *   keyboard entry
	                     *
	                     *  @type array
	                     *
	                     *  @example
	                     *    $.fn.dataTable.ext.features.push( {
	                     *      "fnInit": function( oSettings ) {
	                     *        return new TableTools( { "oDTSettings": oSettings } );
	                     *      },
	                     *      "cFeature": "T"
	                     *    } );
	                     */
	                    feature: [],


	                    /**
	                     * Row searching.
	                     * 
	                     * This method of searching is complimentary to the default type based
	                     * searching, and a lot more comprehensive as it allows you complete control
	                     * over the searching logic. Each element in this array is a function
	                     * (parameters described below) that is called for every row in the table,
	                     * and your logic decides if it should be included in the searching data set
	                     * or not.
	                     *
	                     * Searching functions have the following input parameters:
	                     *
	                     * 1. `{object}` DataTables settings object: see
	                     *    {@link DataTable.models.oSettings}
	                     * 2. `{array|object}` Data for the row to be processed (same as the
	                     *    original format that was passed in as the data source, or an array
	                     *    from a DOM data source
	                     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
	                     *    can be useful to retrieve the `TR` element if you need DOM interaction.
	                     *
	                     * And the following return is expected:
	                     *
	                     * * {boolean} Include the row in the searched result set (true) or not
	                     *   (false)
	                     *
	                     * Note that as with the main search ability in DataTables, technically this
	                     * is "filtering", since it is subtractive. However, for consistency in
	                     * naming we call it searching here.
	                     *
	                     *  @type array
	                     *  @default []
	                     *
	                     *  @example
	                     *    // The following example shows custom search being applied to the
	                     *    // fourth column (i.e. the data[3] index) based on two input values
	                     *    // from the end-user, matching the data in a certain range.
	                     *    $.fn.dataTable.ext.search.push(
	                     *      function( settings, data, dataIndex ) {
	                     *        var min = document.getElementById('min').value * 1;
	                     *        var max = document.getElementById('max').value * 1;
	                     *        var version = data[3] == "-" ? 0 : data[3]*1;
	                     *
	                     *        if ( min == "" && max == "" ) {
	                     *          return true;
	                     *        }
	                     *        else if ( min == "" && version < max ) {
	                     *          return true;
	                     *        }
	                     *        else if ( min < version && "" == max ) {
	                     *          return true;
	                     *        }
	                     *        else if ( min < version && version < max ) {
	                     *          return true;
	                     *        }
	                     *        return false;
	                     *      }
	                     *    );
	                     */
	                    search: [],


	                    /**
	                     * Selector extensions
	                     *
	                     * The `selector` option can be used to extend the options available for the
	                     * selector modifier options (`selector-modifier` object data type) that
	                     * each of the three built in selector types offer (row, column and cell +
	                     * their plural counterparts). For example the Select extension uses this
	                     * mechanism to provide an option to select only rows, columns and cells
	                     * that have been marked as selected by the end user (`{selected: true}`),
	                     * which can be used in conjunction with the existing built in selector
	                     * options.
	                     *
	                     * Each property is an array to which functions can be pushed. The functions
	                     * take three attributes:
	                     *
	                     * * Settings object for the host table
	                     * * Options object (`selector-modifier` object type)
	                     * * Array of selected item indexes
	                     *
	                     * The return is an array of the resulting item indexes after the custom
	                     * selector has been applied.
	                     *
	                     *  @type object
	                     */
	                    selector: {
	                        cell: [],
	                        column: [],
	                        row: []
	                    },


	                    /**
	                     * Internal functions, exposed for used in plug-ins.
	                     * 
	                     * Please note that you should not need to use the internal methods for
	                     * anything other than a plug-in (and even then, try to avoid if possible).
	                     * The internal function may change between releases.
	                     *
	                     *  @type object
	                     *  @default {}
	                     */
	                    internal: {},


	                    /**
	                     * Legacy configuration options. Enable and disable legacy options that
	                     * are available in DataTables.
	                     *
	                     *  @type object
	                     */
	                    legacy: {
	                        /**
	                         * Enable / disable DataTables 1.9 compatible server-side processing
	                         * requests
	                         *
	                         *  @type boolean
	                         *  @default null
	                         */
	                        ajax: null
	                    },


	                    /**
	                     * Pagination plug-in methods.
	                     * 
	                     * Each entry in this object is a function and defines which buttons should
	                     * be shown by the pagination rendering method that is used for the table:
	                     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
	                     * buttons are displayed in the document, while the functions here tell it
	                     * what buttons to display. This is done by returning an array of button
	                     * descriptions (what each button will do).
	                     *
	                     * Pagination types (the four built in options and any additional plug-in
	                     * options defined here) can be used through the `paginationType`
	                     * initialisation parameter.
	                     *
	                     * The functions defined take two parameters:
	                     *
	                     * 1. `{int} page` The current page index
	                     * 2. `{int} pages` The number of pages in the table
	                     *
	                     * Each function is expected to return an array where each element of the
	                     * array can be one of:
	                     *
	                     * * `first` - Jump to first page when activated
	                     * * `last` - Jump to last page when activated
	                     * * `previous` - Show previous page when activated
	                     * * `next` - Show next page when activated
	                     * * `{int}` - Show page of the index given
	                     * * `{array}` - A nested array containing the above elements to add a
	                     *   containing 'DIV' element (might be useful for styling).
	                     *
	                     * Note that DataTables v1.9- used this object slightly differently whereby
	                     * an object with two functions would be defined for each plug-in. That
	                     * ability is still supported by DataTables 1.10+ to provide backwards
	                     * compatibility, but this option of use is now decremented and no longer
	                     * documented in DataTables 1.10+.
	                     *
	                     *  @type object
	                     *  @default {}
	                     *
	                     *  @example
	                     *    // Show previous, next and current page buttons only
	                     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
	                     *      return [ 'previous', page, 'next' ];
	                     *    };
	                     */
	                    pager: {},


	                    renderer: {
	                        pageButton: {},
	                        header: {}
	                    },


	                    /**
	                     * Ordering plug-ins - custom data source
	                     * 
	                     * The extension options for ordering of data available here is complimentary
	                     * to the default type based ordering that DataTables typically uses. It
	                     * allows much greater control over the the data that is being used to
	                     * order a column, but is necessarily therefore more complex.
	                     * 
	                     * This type of ordering is useful if you want to do ordering based on data
	                     * live from the DOM (for example the contents of an 'input' element) rather
	                     * than just the static string that DataTables knows of.
	                     * 
	                     * The way these plug-ins work is that you create an array of the values you
	                     * wish to be ordering for the column in question and then return that
	                     * array. The data in the array much be in the index order of the rows in
	                     * the table (not the currently ordering order!). Which order data gathering
	                     * function is run here depends on the `dt-init columns.orderDataType`
	                     * parameter that is used for the column (if any).
	                     *
	                     * The functions defined take two parameters:
	                     *
	                     * 1. `{object}` DataTables settings object: see
	                     *    {@link DataTable.models.oSettings}
	                     * 2. `{int}` Target column index
	                     *
	                     * Each function is expected to return an array:
	                     *
	                     * * `{array}` Data for the column to be ordering upon
	                     *
	                     *  @type array
	                     *
	                     *  @example
	                     *    // Ordering using `input` node values
	                     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
	                     *    {
	                     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
	                     *        return $('input', td).val();
	                     *      } );
	                     *    }
	                     */
	                    order: {},


	                    /**
	                     * Type based plug-ins.
	                     *
	                     * Each column in DataTables has a type assigned to it, either by automatic
	                     * detection or by direct assignment using the `type` option for the column.
	                     * The type of a column will effect how it is ordering and search (plug-ins
	                     * can also make use of the column type if required).
	                     *
	                     * @namespace
	                     */
	                    type: {
	                        /**
	                         * Type detection functions.
	                         *
	                         * The functions defined in this object are used to automatically detect
	                         * a column's type, making initialisation of DataTables super easy, even
	                         * when complex data is in the table.
	                         *
	                         * The functions defined take two parameters:
	                         *
	                         *  1. `{*}` Data from the column cell to be analysed
	                         *  2. `{settings}` DataTables settings object. This can be used to
	                         *     perform context specific type detection - for example detection
	                         *     based on language settings such as using a comma for a decimal
	                         *     place. Generally speaking the options from the settings will not
	                         *     be required
	                         *
	                         * Each function is expected to return:
	                         *
	                         * * `{string|null}` Data type detected, or null if unknown (and thus
	                         *   pass it on to the other type detection functions.
	                         *
	                         *  @type array
	                         *
	                         *  @example
	                         *    // Currency type detection plug-in:
	                         *    $.fn.dataTable.ext.type.detect.push(
	                         *      function ( data, settings ) {
	                         *        // Check the numeric part
	                         *        if ( ! $.isNumeric( data.substring(1) ) ) {
	                         *          return null;
	                         *        }
	                         *
	                         *        // Check prefixed by currency
	                         *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
	                         *          return 'currency';
	                         *        }
	                         *        return null;
	                         *      }
	                         *    );
	                         */
	                        detect: [],


	                        /**
	                         * Type based search formatting.
	                         *
	                         * The type based searching functions can be used to pre-format the
	                         * data to be search on. For example, it can be used to strip HTML
	                         * tags or to de-format telephone numbers for numeric only searching.
	                         *
	                         * Note that is a search is not defined for a column of a given type,
	                         * no search formatting will be performed.
	                         * 
	                         * Pre-processing of searching data plug-ins - When you assign the sType
	                         * for a column (or have it automatically detected for you by DataTables
	                         * or a type detection plug-in), you will typically be using this for
	                         * custom sorting, but it can also be used to provide custom searching
	                         * by allowing you to pre-processing the data and returning the data in
	                         * the format that should be searched upon. This is done by adding
	                         * functions this object with a parameter name which matches the sType
	                         * for that target column. This is the corollary of <i>afnSortData</i>
	                         * for searching data.
	                         *
	                         * The functions defined take a single parameter:
	                         *
	                         *  1. `{*}` Data from the column cell to be prepared for searching
	                         *
	                         * Each function is expected to return:
	                         *
	                         * * `{string|null}` Formatted string that will be used for the searching.
	                         *
	                         *  @type object
	                         *  @default {}
	                         *
	                         *  @example
	                         *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
	                         *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
	                         *    }
	                         */
	                        search: {},


	                        /**
	                         * Type based ordering.
	                         *
	                         * The column type tells DataTables what ordering to apply to the table
	                         * when a column is sorted upon. The order for each type that is defined,
	                         * is defined by the functions available in this object.
	                         *
	                         * Each ordering option can be described by three properties added to
	                         * this object:
	                         *
	                         * * `{type}-pre` - Pre-formatting function
	                         * * `{type}-asc` - Ascending order function
	                         * * `{type}-desc` - Descending order function
	                         *
	                         * All three can be used together, only `{type}-pre` or only
	                         * `{type}-asc` and `{type}-desc` together. It is generally recommended
	                         * that only `{type}-pre` is used, as this provides the optimal
	                         * implementation in terms of speed, although the others are provided
	                         * for compatibility with existing Javascript sort functions.
	                         *
	                         * `{type}-pre`: Functions defined take a single parameter:
	                         *
	                         *  1. `{*}` Data from the column cell to be prepared for ordering
	                         *
	                         * And return:
	                         *
	                         * * `{*}` Data to be sorted upon
	                         *
	                         * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
	                         * functions, taking two parameters:
	                         *
	                         *  1. `{*}` Data to compare to the second parameter
	                         *  2. `{*}` Data to compare to the first parameter
	                         *
	                         * And returning:
	                         *
	                         * * `{*}` Ordering match: <0 if first parameter should be sorted lower
	                         *   than the second parameter, ===0 if the two parameters are equal and
	                         *   >0 if the first parameter should be sorted height than the second
	                         *   parameter.
	                         * 
	                         *  @type object
	                         *  @default {}
	                         *
	                         *  @example
	                         *    // Numeric ordering of formatted numbers with a pre-formatter
	                         *    $.extend( $.fn.dataTable.ext.type.order, {
	                         *      "string-pre": function(x) {
	                         *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
	                         *        return parseFloat( a );
	                         *      }
	                         *    } );
	                         *
	                         *  @example
	                         *    // Case-sensitive string ordering, with no pre-formatting method
	                         *    $.extend( $.fn.dataTable.ext.order, {
	                         *      "string-case-asc": function(x,y) {
	                         *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	                         *      },
	                         *      "string-case-desc": function(x,y) {
	                         *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	                         *      }
	                         *    } );
	                         */
	                        order: {}
	                    },

	                    /**
	                     * Unique DataTables instance counter
	                     *
	                     * @type int
	                     * @private
	                     */
	                    _unique: 0,


	                    //
	                    // Depreciated
	                    // The following properties are retained for backwards compatiblity only.
	                    // The should not be used in new projects and will be removed in a future
	                    // version
	                    //

	                    /**
	                     * Version check function.
	                     *  @type function
	                     *  @depreciated Since 1.10
	                     */
	                    fnVersionCheck: DataTable.fnVersionCheck,


	                    /**
	                     * Index for what 'this' index API functions should use
	                     *  @type int
	                     *  @deprecated Since v1.10
	                     */
	                    iApiIndex: 0,


	                    /**
	                     * jQuery UI class container
	                     *  @type object
	                     *  @deprecated Since v1.10
	                     */
	                    oJUIClasses: {},


	                    /**
	                     * Software version
	                     *  @type string
	                     *  @deprecated Since v1.10
	                     */
	                    sVersion: DataTable.version
	                };


	                //
	                // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	                //
	                $.extend(_ext, {
	                    afnFiltering: _ext.search,
	                    aTypes: _ext.type.detect,
	                    ofnSearch: _ext.type.search,
	                    oSort: _ext.type.order,
	                    afnSortData: _ext.order,
	                    aoFeatures: _ext.feature,
	                    oApi: _ext.internal,
	                    oStdClasses: _ext.classes,
	                    oPagination: _ext.pager
	                });


	                $.extend(DataTable.ext.classes, {
	                    "sTable": "dataTable",
	                    "sNoFooter": "no-footer",

	                    /* Paging buttons */
	                    "sPageButton": "paginate_button",
	                    "sPageButtonActive": "current",
	                    "sPageButtonDisabled": "disabled",

	                    /* Striping classes */
	                    "sStripeOdd": "odd",
	                    "sStripeEven": "even",

	                    /* Empty row */
	                    "sRowEmpty": "dataTables_empty",

	                    /* Features */
	                    "sWrapper": "dataTables_wrapper",
	                    "sFilter": "dataTables_filter",
	                    "sInfo": "dataTables_info",
	                    "sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
	                    "sLength": "dataTables_length",
	                    "sProcessing": "dataTables_processing",

	                    /* Sorting */
	                    "sSortAsc": "sorting_asc",
	                    "sSortDesc": "sorting_desc",
	                    "sSortable": "sorting", /* Sortable in both directions */
	                    "sSortableAsc": "sorting_asc_disabled",
	                    "sSortableDesc": "sorting_desc_disabled",
	                    "sSortableNone": "sorting_disabled",
	                    "sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

	                    /* Filtering */
	                    "sFilterInput": "",

	                    /* Page length */
	                    "sLengthSelect": "",

	                    /* Scrolling */
	                    "sScrollWrapper": "dataTables_scroll",
	                    "sScrollHead": "dataTables_scrollHead",
	                    "sScrollHeadInner": "dataTables_scrollHeadInner",
	                    "sScrollBody": "dataTables_scrollBody",
	                    "sScrollFoot": "dataTables_scrollFoot",
	                    "sScrollFootInner": "dataTables_scrollFootInner",

	                    /* Misc */
	                    "sHeaderTH": "",
	                    "sFooterTH": "",

	                    // Deprecated
	                    "sSortJUIAsc": "",
	                    "sSortJUIDesc": "",
	                    "sSortJUI": "",
	                    "sSortJUIAscAllowed": "",
	                    "sSortJUIDescAllowed": "",
	                    "sSortJUIWrapper": "",
	                    "sSortIcon": "",
	                    "sJUIHeader": "",
	                    "sJUIFooter": ""
	                });


	                (function () {

	                    // Reused strings for better compression. Closure compiler appears to have a
	                    // weird edge case where it is trying to expand strings rather than use the
	                    // variable version. This results in about 200 bytes being added, for very
	                    // little preference benefit since it this run on script load only.
	                    var _empty = '';
	                    _empty = '';

	                    var _stateDefault = _empty + 'ui-state-default';
	                    var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
	                    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';

	                    $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
	                        /* Full numbers paging buttons */
	                        "sPageButton": "fg-button ui-button " + _stateDefault,
	                        "sPageButtonActive": "ui-state-disabled",
	                        "sPageButtonDisabled": "ui-state-disabled",

	                        /* Features */
	                        "sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " +
	                            "ui-buttonset-multi paging_", /* Note that the type is postfixed */

	                        /* Sorting */
	                        "sSortAsc": _stateDefault + " sorting_asc",
	                        "sSortDesc": _stateDefault + " sorting_desc",
	                        "sSortable": _stateDefault + " sorting",
	                        "sSortableAsc": _stateDefault + " sorting_asc_disabled",
	                        "sSortableDesc": _stateDefault + " sorting_desc_disabled",
	                        "sSortableNone": _stateDefault + " sorting_disabled",
	                        "sSortJUIAsc": _sortIcon + "triangle-1-n",
	                        "sSortJUIDesc": _sortIcon + "triangle-1-s",
	                        "sSortJUI": _sortIcon + "carat-2-n-s",
	                        "sSortJUIAscAllowed": _sortIcon + "carat-1-n",
	                        "sSortJUIDescAllowed": _sortIcon + "carat-1-s",
	                        "sSortJUIWrapper": "DataTables_sort_wrapper",
	                        "sSortIcon": "DataTables_sort_icon",

	                        /* Scrolling */
	                        "sScrollHead": "dataTables_scrollHead " + _stateDefault,
	                        "sScrollFoot": "dataTables_scrollFoot " + _stateDefault,

	                        /* Misc */
	                        "sHeaderTH": _stateDefault,
	                        "sFooterTH": _stateDefault,
	                        "sJUIHeader": _headerFooter + " ui-corner-tl ui-corner-tr",
	                        "sJUIFooter": _headerFooter + " ui-corner-bl ui-corner-br"
	                    });

	                }());



	                var extPagination = DataTable.ext.pager;

	                function _numbers(page, pages) {
	                    var
	                        numbers = [],
	                        buttons = extPagination.numbers_length,
	                        half = Math.floor(buttons / 2),
	                        i = 1;

	                    if (pages <= buttons) {
	                        numbers = _range(0, pages);
	                    }
	                    else if (page <= half) {
	                        numbers = _range(0, buttons - 2);
	                        numbers.push('ellipsis');
	                        numbers.push(pages - 1);
	                    }
	                    else if (page >= pages - 1 - half) {
	                        numbers = _range(pages - (buttons - 2), pages);
	                        numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6
	                        numbers.splice(0, 0, 0);
	                    }
	                    else {
	                        numbers = _range(page - half + 2, page + half - 1);
	                        numbers.push('ellipsis');
	                        numbers.push(pages - 1);
	                        numbers.splice(0, 0, 'ellipsis');
	                        numbers.splice(0, 0, 0);
	                    }

	                    numbers.DT_el = 'span';
	                    return numbers;
	                }


	                $.extend(extPagination, {
	                    simple: function (page, pages) {
	                        return ['previous', 'next'];
	                    },

	                    full: function (page, pages) {
	                        return ['first', 'previous', 'next', 'last'];
	                    },

	                    simple_numbers: function (page, pages) {
	                        return ['previous', _numbers(page, pages), 'next'];
	                    },

	                    full_numbers: function (page, pages) {
	                        return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
	                    },

	                    // For testing and plug-ins to use
	                    _numbers: _numbers,

	                    // Number of number buttons (including ellipsis) to show. _Must be odd!_
	                    numbers_length: 7
	                });


	                $.extend(true, DataTable.ext.renderer, {
	                    pageButton: {
	                        _: function (settings, host, idx, buttons, page, pages) {
	                            var classes = settings.oClasses;
	                            var lang = settings.oLanguage.oPaginate;
	                            var btnDisplay, btnClass, counter = 0;

	                            var attach = function (container, buttons) {
	                                var i, ien, node, button;
	                                var clickHandler = function (e) {
	                                    _fnPageChange(settings, e.data.action, true);
	                                };

	                                for (i = 0, ien = buttons.length ; i < ien ; i++) {
	                                    button = buttons[i];

	                                    if ($.isArray(button)) {
	                                        var inner = $('<' + (button.DT_el || 'div') + '/>')
	                                            .appendTo(container);
	                                        attach(inner, button);
	                                    }
	                                    else {
	                                        btnDisplay = '';
	                                        btnClass = '';

	                                        switch (button) {
	                                            case 'ellipsis':
	                                                container.append('<span class="ellipsis">&#x2026;</span>');
	                                                break;

	                                            case 'first':
	                                                btnDisplay = lang.sFirst;
	                                                btnClass = button + (page > 0 ?
	                                                    '' : ' ' + classes.sPageButtonDisabled);
	                                                break;

	                                            case 'previous':
	                                                btnDisplay = lang.sPrevious;
	                                                btnClass = button + (page > 0 ?
	                                                    '' : ' ' + classes.sPageButtonDisabled);
	                                                break;

	                                            case 'next':
	                                                btnDisplay = lang.sNext;
	                                                btnClass = button + (page < pages - 1 ?
	                                                    '' : ' ' + classes.sPageButtonDisabled);
	                                                break;

	                                            case 'last':
	                                                btnDisplay = lang.sLast;
	                                                btnClass = button + (page < pages - 1 ?
	                                                    '' : ' ' + classes.sPageButtonDisabled);
	                                                break;

	                                            default:
	                                                btnDisplay = button + 1;
	                                                btnClass = page === button ?
	                                                    classes.sPageButtonActive : '';
	                                                break;
	                                        }

	                                        if (btnDisplay) {
	                                            node = $('<a>', {
	                                                'class': classes.sPageButton + ' ' + btnClass,
	                                                'aria-controls': settings.sTableId,
	                                                'data-dt-idx': counter,
	                                                'tabindex': settings.iTabIndex,
	                                                'id': idx === 0 && typeof button === 'string' ?
	                                                    settings.sTableId + '_' + button :
	                                                    null
	                                            })
	                                                .html(btnDisplay)
	                                                .appendTo(container);

	                                            _fnBindAction(
	                                                node, { action: button }, clickHandler
	                                            );

	                                            counter++;
	                                        }
	                                    }
	                                }
	                            };

	                            // IE9 throws an 'unknown error' if document.activeElement is used
	                            // inside an iframe or frame. Try / catch the error. Not good for
	                            // accessibility, but neither are frames.
	                            var activeEl;

	                            try {
	                                // Because this approach is destroying and recreating the paging
	                                // elements, focus is lost on the select button which is bad for
	                                // accessibility. So we want to restore focus once the draw has
	                                // completed
	                                activeEl = $(document.activeElement).data('dt-idx');
	                            }
	                            catch (e) { }

	                            attach($(host).empty(), buttons);

	                            if (activeEl) {
	                                $(host).find('[data-dt-idx=' + activeEl + ']').focus();
	                            }
	                        }
	                    }
	                });



	                // Built in type detection. See model.ext.aTypes for information about
	                // what is required from this methods.
	                $.extend(DataTable.ext.type.detect, [
	                    // Plain numbers - first since V8 detects some plain numbers as dates
	                    // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
	                    function (d, settings) {
	                        var decimal = settings.oLanguage.sDecimal;
	                        return _isNumber(d, decimal) ? 'num' + decimal : null;
	                    },

	                    // Dates (only those recognised by the browser's Date.parse)
	                    function (d, settings) {
	                        // V8 will remove any unknown characters at the start and end of the
	                        // expression, leading to false matches such as `$245.12` or `10%` being
	                        // a valid date. See forum thread 18941 for detail.
	                        if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) {
	                            return null;
	                        }
	                        var parsed = Date.parse(d);
	                        return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
	                    },

	                    // Formatted numbers
	                    function (d, settings) {
	                        var decimal = settings.oLanguage.sDecimal;
	                        return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
	                    },

	                    // HTML numeric
	                    function (d, settings) {
	                        var decimal = settings.oLanguage.sDecimal;
	                        return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
	                    },

	                    // HTML numeric, formatted
	                    function (d, settings) {
	                        var decimal = settings.oLanguage.sDecimal;
	                        return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
	                    },

	                    // HTML (this is strict checking - there must be html)
	                    function (d, settings) {
	                        return _empty(d) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
	                            'html' : null;
	                    }
	                ]);



	                // Filter formatting functions. See model.ext.ofnSearch for information about
	                // what is required from these methods.
	                // 
	                // Note that additional search methods are added for the html numbers and
	                // html formatted numbers by `_addNumericSort()` when we know what the decimal
	                // place is


	                $.extend(DataTable.ext.type.search, {
	                    html: function (data) {
	                        return _empty(data) ?
	                            data :
	                            typeof data === 'string' ?
	                                data
	                                    .replace(_re_new_lines, " ")
	                                    .replace(_re_html, "") :
	                                '';
	                    },

	                    string: function (data) {
	                        return _empty(data) ?
	                            data :
	                            typeof data === 'string' ?
	                                data.replace(_re_new_lines, " ") :
	                                data;
	                    }
	                });



	                var __numericReplace = function (d, decimalPlace, re1, re2) {
	                    if (d !== 0 && (!d || d === '-')) {
	                        return -Infinity;
	                    }

	                    // If a decimal place other than `.` is used, it needs to be given to the
	                    // function so we can detect it and replace with a `.` which is the only
	                    // decimal place Javascript recognises - it is not locale aware.
	                    if (decimalPlace) {
	                        d = _numToDecimal(d, decimalPlace);
	                    }

	                    if (d.replace) {
	                        if (re1) {
	                            d = d.replace(re1, '');
	                        }

	                        if (re2) {
	                            d = d.replace(re2, '');
	                        }
	                    }

	                    return d * 1;
	                };


	                // Add the numeric 'deformatting' functions for sorting and search. This is done
	                // in a function to provide an easy ability for the language options to add
	                // additional methods if a non-period decimal place is used.
	                function _addNumericSort(decimalPlace) {
	                    $.each(
	                        {
	                            // Plain numbers
	                            "num": function (d) {
	                                return __numericReplace(d, decimalPlace);
	                            },

	                            // Formatted numbers
	                            "num-fmt": function (d) {
	                                return __numericReplace(d, decimalPlace, _re_formatted_numeric);
	                            },

	                            // HTML numeric
	                            "html-num": function (d) {
	                                return __numericReplace(d, decimalPlace, _re_html);
	                            },

	                            // HTML numeric, formatted
	                            "html-num-fmt": function (d) {
	                                return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
	                            }
	                        },
	                        function (key, fn) {
	                            // Add the ordering method
	                            _ext.type.order[key + decimalPlace + '-pre'] = fn;

	                            // For HTML types add a search formatter that will strip the HTML
	                            if (key.match(/^html\-/)) {
	                                _ext.type.search[key + decimalPlace] = _ext.type.search.html;
	                            }
	                        }
	                    );
	                }


	                // Default sort methods
	                $.extend(_ext.type.order, {
	                    // Dates
	                    "date-pre": function (d) {
	                        return Date.parse(d) || 0;
	                    },

	                    // html
	                    "html-pre": function (a) {
	                        return _empty(a) ?
	                            '' :
	                            a.replace ?
	                                a.replace(/<.*?>/g, "").toLowerCase() :
	                                a + '';
	                    },

	                    // string
	                    "string-pre": function (a) {
	                        // This is a little complex, but faster than always calling toString,
	                        // http://jsperf.com/tostring-v-check
	                        return _empty(a) ?
	                            '' :
	                            typeof a === 'string' ?
	                                a.toLowerCase() :
	                                !a.toString ?
	                                    '' :
	                                    a.toString();
	                    },

	                    // string-asc and -desc are retained only for compatibility with the old
	                    // sort methods
	                    "string-asc": function (x, y) {
	                        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	                    },

	                    "string-desc": function (x, y) {
	                        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	                    }
	                });


	                // Numeric sorting types - order doesn't matter here
	                _addNumericSort('');


	                $.extend(true, DataTable.ext.renderer, {
	                    header: {
	                        _: function (settings, cell, column, classes) {
	                            // No additional mark-up required
	                            // Attach a sort listener to update on sort - note that using the
	                            // `DT` namespace will allow the event to be removed automatically
	                            // on destroy, while the `dt` namespaced event is the one we are
	                            // listening for
	                            $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
	                                if (settings !== ctx) { // need to check this this is the host
	                                    return;               // table, not a nested one
	                                }

	                                var colIdx = column.idx;

	                                cell
	                                    .removeClass(
	                                        column.sSortingClass + ' ' +
	                                        classes.sSortAsc + ' ' +
	                                        classes.sSortDesc
	                                    )
	                                    .addClass(columns[colIdx] == 'asc' ?
	                                        classes.sSortAsc : columns[colIdx] == 'desc' ?
	                                            classes.sSortDesc :
	                                            column.sSortingClass
	                                    );
	                            });
	                        },

	                        jqueryui: function (settings, cell, column, classes) {
	                            $('<div/>')
	                                .addClass(classes.sSortJUIWrapper)
	                                .append(cell.contents())
	                                .append($('<span/>')
	                                    .addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)
	                                )
	                                .appendTo(cell);

	                            // Attach a sort listener to update on sort
	                            $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
	                                if (settings !== ctx) {
	                                    return;
	                                }

	                                var colIdx = column.idx;

	                                cell
	                                    .removeClass(classes.sSortAsc + " " + classes.sSortDesc)
	                                    .addClass(columns[colIdx] == 'asc' ?
	                                        classes.sSortAsc : columns[colIdx] == 'desc' ?
	                                            classes.sSortDesc :
	                                            column.sSortingClass
	                                    );

	                                cell
	                                    .find('span.' + classes.sSortIcon)
	                                    .removeClass(
	                                        classes.sSortJUIAsc + " " +
	                                        classes.sSortJUIDesc + " " +
	                                        classes.sSortJUI + " " +
	                                        classes.sSortJUIAscAllowed + " " +
	                                        classes.sSortJUIDescAllowed
	                                    )
	                                    .addClass(columns[colIdx] == 'asc' ?
	                                        classes.sSortJUIAsc : columns[colIdx] == 'desc' ?
	                                            classes.sSortJUIDesc :
	                                            column.sSortingClassJUI
	                                    );
	                            });
	                        }
	                    }
	                });

	                /*
	                 * Public helper functions. These aren't used internally by DataTables, or
	                 * called by any of the options passed into DataTables, but they can be used
	                 * externally by developers working with DataTables. They are helper functions
	                 * to make working with DataTables a little bit easier.
	                 */

	                /**
	                 * Helpers for `columns.render`.
	                 *
	                 * The options defined here can be used with the `columns.render` initialisation
	                 * option to provide a display renderer. The following functions are defined:
	                 *
	                 * * `number` - Will format numeric data (defined by `columns.data`) for
	                 *   display, retaining the original unformatted data for sorting and filtering.
	                 *   It takes 4 parameters:
	                 *   * `string` - Thousands grouping separator
	                 *   * `string` - Decimal point indicator
	                 *   * `integer` - Number of decimal points to show
	                 *   * `string` (optional) - Prefix.
	                 *
	                 * @example
	                 *   // Column definition using the number renderer
	                 *   {
	                 *     data: "salary",
	                 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	                 *   }
	                 *
	                 * @namespace
	                 */
	                DataTable.render = {
	                    number: function (thousands, decimal, precision, prefix) {
	                        return {
	                            display: function (d) {
	                                if (typeof d !== 'number' && typeof d !== 'string') {
	                                    return d;
	                                }

	                                var negative = d < 0 ? '-' : '';
	                                d = Math.abs(parseFloat(d));

	                                var intPart = parseInt(d, 10);
	                                var floatPart = precision ?
	                                    decimal + (d - intPart).toFixed(precision).substring(2) :
	                                    '';

	                                return negative + (prefix || '') +
	                                    intPart.toString().replace(
	                                        /\B(?=(\d{3})+(?!\d))/g, thousands
	                                    ) +
	                                    floatPart;
	                            }
	                        };
	                    }
	                };


	                /*
	                 * This is really a good bit rubbish this method of exposing the internal methods
	                 * publicly... - To be fixed in 2.0 using methods on the prototype
	                 */


	                /**
	                 * Create a wrapper function for exporting an internal functions to an external API.
	                 *  @param {string} fn API function name
	                 *  @returns {function} wrapped function
	                 *  @memberof DataTable#internal
	                 */
	                function _fnExternApiFunc(fn) {
	                    return function () {
	                        var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(
	                            Array.prototype.slice.call(arguments)
	                        );
	                        return DataTable.ext.internal[fn].apply(this, args);
	                    };
	                }


	                /**
	                 * Reference to internal functions for use by plug-in developers. Note that
	                 * these methods are references to internal functions and are considered to be
	                 * private. If you use these methods, be aware that they are liable to change
	                 * between versions.
	                 *  @namespace
	                 */
	                $.extend(DataTable.ext.internal, {
	                    _fnExternApiFunc: _fnExternApiFunc,
	                    _fnBuildAjax: _fnBuildAjax,
	                    _fnAjaxUpdate: _fnAjaxUpdate,
	                    _fnAjaxParameters: _fnAjaxParameters,
	                    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
	                    _fnAjaxDataSrc: _fnAjaxDataSrc,
	                    _fnAddColumn: _fnAddColumn,
	                    _fnColumnOptions: _fnColumnOptions,
	                    _fnAdjustColumnSizing: _fnAdjustColumnSizing,
	                    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
	                    _fnColumnIndexToVisible: _fnColumnIndexToVisible,
	                    _fnVisbleColumns: _fnVisbleColumns,
	                    _fnGetColumns: _fnGetColumns,
	                    _fnColumnTypes: _fnColumnTypes,
	                    _fnApplyColumnDefs: _fnApplyColumnDefs,
	                    _fnHungarianMap: _fnHungarianMap,
	                    _fnCamelToHungarian: _fnCamelToHungarian,
	                    _fnLanguageCompat: _fnLanguageCompat,
	                    _fnBrowserDetect: _fnBrowserDetect,
	                    _fnAddData: _fnAddData,
	                    _fnAddTr: _fnAddTr,
	                    _fnNodeToDataIndex: _fnNodeToDataIndex,
	                    _fnNodeToColumnIndex: _fnNodeToColumnIndex,
	                    _fnGetCellData: _fnGetCellData,
	                    _fnSetCellData: _fnSetCellData,
	                    _fnSplitObjNotation: _fnSplitObjNotation,
	                    _fnGetObjectDataFn: _fnGetObjectDataFn,
	                    _fnSetObjectDataFn: _fnSetObjectDataFn,
	                    _fnGetDataMaster: _fnGetDataMaster,
	                    _fnClearTable: _fnClearTable,
	                    _fnDeleteIndex: _fnDeleteIndex,
	                    _fnInvalidate: _fnInvalidate,
	                    _fnGetRowElements: _fnGetRowElements,
	                    _fnCreateTr: _fnCreateTr,
	                    _fnBuildHead: _fnBuildHead,
	                    _fnDrawHead: _fnDrawHead,
	                    _fnDraw: _fnDraw,
	                    _fnReDraw: _fnReDraw,
	                    _fnAddOptionsHtml: _fnAddOptionsHtml,
	                    _fnDetectHeader: _fnDetectHeader,
	                    _fnGetUniqueThs: _fnGetUniqueThs,
	                    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
	                    _fnFilterComplete: _fnFilterComplete,
	                    _fnFilterCustom: _fnFilterCustom,
	                    _fnFilterColumn: _fnFilterColumn,
	                    _fnFilter: _fnFilter,
	                    _fnFilterCreateSearch: _fnFilterCreateSearch,
	                    _fnEscapeRegex: _fnEscapeRegex,
	                    _fnFilterData: _fnFilterData,
	                    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
	                    _fnUpdateInfo: _fnUpdateInfo,
	                    _fnInfoMacros: _fnInfoMacros,
	                    _fnInitialise: _fnInitialise,
	                    _fnInitComplete: _fnInitComplete,
	                    _fnLengthChange: _fnLengthChange,
	                    _fnFeatureHtmlLength: _fnFeatureHtmlLength,
	                    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
	                    _fnPageChange: _fnPageChange,
	                    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
	                    _fnProcessingDisplay: _fnProcessingDisplay,
	                    _fnFeatureHtmlTable: _fnFeatureHtmlTable,
	                    _fnScrollDraw: _fnScrollDraw,
	                    _fnApplyToChildren: _fnApplyToChildren,
	                    _fnCalculateColumnWidths: _fnCalculateColumnWidths,
	                    _fnThrottle: _fnThrottle,
	                    _fnConvertToWidth: _fnConvertToWidth,
	                    _fnScrollingWidthAdjust: _fnScrollingWidthAdjust,
	                    _fnGetWidestNode: _fnGetWidestNode,
	                    _fnGetMaxLenString: _fnGetMaxLenString,
	                    _fnStringToCss: _fnStringToCss,
	                    _fnScrollBarWidth: _fnScrollBarWidth,
	                    _fnSortFlatten: _fnSortFlatten,
	                    _fnSort: _fnSort,
	                    _fnSortAria: _fnSortAria,
	                    _fnSortListener: _fnSortListener,
	                    _fnSortAttachListener: _fnSortAttachListener,
	                    _fnSortingClasses: _fnSortingClasses,
	                    _fnSortData: _fnSortData,
	                    _fnSaveState: _fnSaveState,
	                    _fnLoadState: _fnLoadState,
	                    _fnSettingsFromNode: _fnSettingsFromNode,
	                    _fnLog: _fnLog,
	                    _fnMap: _fnMap,
	                    _fnBindAction: _fnBindAction,
	                    _fnCallbackReg: _fnCallbackReg,
	                    _fnCallbackFire: _fnCallbackFire,
	                    _fnLengthOverflow: _fnLengthOverflow,
	                    _fnRenderer: _fnRenderer,
	                    _fnDataSource: _fnDataSource,
	                    _fnRowAttributes: _fnRowAttributes,
	                    _fnCalculateEnd: function () { } // Used by a lot of plug-ins, but redundant
	                    // in 1.10, so this dead-end function is
	                    // added to prevent errors
	                });


	                // jQuery access
	                $.fn.dataTable = DataTable;

	                // Legacy aliases
	                $.fn.dataTableSettings = DataTable.settings;
	                $.fn.dataTableExt = DataTable.ext;

	                // With a capital `D` we return a DataTables API instance rather than a
	                // jQuery object
	                $.fn.DataTable = function (opts) {
	                    return $(this).dataTable(opts).api();
	                };

	                // All properties that are available to $.fn.dataTable should also be
	                // available on $.fn.DataTable
	                $.each(DataTable, function (prop, val) {
	                    $.fn.DataTable[prop] = val;
	                });


	                // Information about events fired by DataTables - for documentation.
	                /**
	                 * Draw event, fired whenever the table is redrawn on the page, at the same
	                 * point as fnDrawCallback. This may be useful for binding events or
	                 * performing calculations when the table is altered at all.
	                 *  @name DataTable#draw.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * Search event, fired when the searching applied to the table (using the
	                 * built-in global search, or column filters) is altered.
	                 *  @name DataTable#search.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * Page change event, fired when the paging of the table is altered.
	                 *  @name DataTable#page.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * Order event, fired when the ordering applied to the table is altered.
	                 *  @name DataTable#order.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * DataTables initialisation complete event, fired when the table is fully
	                 * drawn, including Ajax data loaded, if Ajax data is required.
	                 *  @name DataTable#init.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} oSettings DataTables settings object
	                 *  @param {object} json The JSON object request from the server - only
	                 *    present if client-side Ajax sourced data is used</li></ol>
	                 */

	                /**
	                 * State save event, fired when the table has changed state a new state save
	                 * is required. This event allows modification of the state saving object
	                 * prior to actually doing the save, including addition or other state
	                 * properties (for plug-ins) or modification of a DataTables core property.
	                 *  @name DataTable#stateSaveParams.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} oSettings DataTables settings object
	                 *  @param {object} json The state information to be saved
	                 */

	                /**
	                 * State load event, fired when the table is loading state from the stored
	                 * data, but prior to the settings object being modified by the saved state
	                 * - allowing modification of the saved state is required or loading of
	                 * state for a plug-in.
	                 *  @name DataTable#stateLoadParams.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} oSettings DataTables settings object
	                 *  @param {object} json The saved state information
	                 */

	                /**
	                 * State loaded event, fired when state has been loaded from stored data and
	                 * the settings object has been modified by the loaded data.
	                 *  @name DataTable#stateLoaded.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} oSettings DataTables settings object
	                 *  @param {object} json The saved state information
	                 */

	                /**
	                 * Processing event, fired when DataTables is doing some kind of processing
	                 * (be it, order, searcg or anything else). It can be used to indicate to
	                 * the end user that there is something happening, or that something has
	                 * finished.
	                 *  @name DataTable#processing.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} oSettings DataTables settings object
	                 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	                 */

	                /**
	                 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	                 * request to made to the server for new data. This event is called before
	                 * DataTables processed the returned data, so it can also be used to pre-
	                 * process the data returned from the server, if needed.
	                 *
	                 * Note that this trigger is called in `fnServerData`, if you override
	                 * `fnServerData` and which to use this event, you need to trigger it in you
	                 * success function.
	                 *  @name DataTable#xhr.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 *  @param {object} json JSON returned from the server
	                 *
	                 *  @example
	                 *     // Use a custom property returned from the server in another DOM element
	                 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	                 *       $('#status').html( json.status );
	                 *     } );
	                 *
	                 *  @example
	                 *     // Pre-process the data returned from the server
	                 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	                 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	                 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	                 *       }
	                 *       // Note no return - manipulate the data directly in the JSON object.
	                 *     } );
	                 */

	                /**
	                 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	                 * or passing the bDestroy:true parameter in the initialisation object. This
	                 * can be used to remove bound events, added DOM nodes, etc.
	                 *  @name DataTable#destroy.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * Page length change event, fired when number of records to show on each
	                 * page (the length) is changed.
	                 *  @name DataTable#length.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 *  @param {integer} len New length
	                 */

	                /**
	                 * Column sizing has changed.
	                 *  @name DataTable#column-sizing.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 */

	                /**
	                 * Column visibility has changed.
	                 *  @name DataTable#column-visibility.dt
	                 *  @event
	                 *  @param {event} e jQuery event object
	                 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	                 *  @param {int} column Column index
	                 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	                 */

	                return $.fn.dataTable;
	            }));

	        }(window, document));
	               
	    },
	    RunDataTable: function (CSSidselector) {

	        this.jqueryTableInit();

	        $(CSSidselector).DataTable({
	            "language": svlanguageSettings
	        });

	    }
	}

	let svlanguageSettings = {
	    "sEmptyTable": "Tabellen inneh" + String.fromCharCode(229) + "ller ingen data",
	    "sInfo": "Visar _START_ till _END_ av totalt _TOTAL_ rader",
	    "sInfoEmpty": "Visar 0 till 0 av totalt 0 rader",
	    "sInfoFiltered": "(filtrerade fr" + String.fromCharCode(229) + "n totalt _MAX_ rader)",
	    "sInfoPostFix": "",
	    "sInfoThousands": " ",
	    "sLengthMenu": "Visa _MENU_ rader",
	    "sLoadingRecords": "Laddar...",
	    "sProcessing": "Bearbetar...",
	    "sSearch": "S" + String.fromCharCode(246) + "k:",
	    "sZeroRecords": "Hittade inga matchande resultat",
	    "oPaginate": {
	        "sFirst": "F" + String.fromCharCode(246) + "rsta",
	        "sLast": "Sista",
	        "sNext": "N" + String.fromCharCode(228) + "sta",
	        "sPrevious": "F" + String.fromCharCode(246) + "reg" + String.fromCharCode(229) + "ende"
	    },
	    "oAria": {
	        "sSortAscending": ": aktivera f" + String.fromCharCode(246) + "r att sortera kolumnen i stigande ordning",
	        "sSortDescending": ": aktivera f" + String.fromCharCode(246) + "r att sortera kolumnen i fallande ordning"
	    }
	};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	let fillobj = __webpack_require__(5);
	let autocompleteobj2 = __webpack_require__(9);
	let servicecall = __webpack_require__(10);
	let $ = __webpack_require__(2);

	module.exports = {
	    init: function () {
	        this.cacheDom();
	        this.bindEvent();
	        this.render();
	        //autocompleteobj2.init('#bb_aj_cur_title');
	    },
	    cacheDom: function () {
	        this.$body = $('body');
	        this.$bb_aj_approve = $(".bb_aj_approve");
	        this.$bb_aj_modalContainer = $("#bb_aj_modalContainer");
	        this.$bb_aj_boktipformsavedata = $('#bb_aj_boktipformsavedata');
	        this.$bb_aj_cur_title= $("#bb_aj_cur_title");
	    },
	    bindEvent: function (userid) {
	        let that = this;        

	        this.$body.on('click', '.bb_aj_approve', function (e) {
	            let id = $(this).attr('data-tipid');            

	            fillobj.getCurrentItem(id, function () {
	                that.$bb_aj_modalContainer.show();
	                autocompleteobj2.init('#bb_aj_cur_title');
	            });
	                        
	            return false;
	        });

	        this.$body.on('click', '.bb_aj_delete', function (e) {
	            let id = $(this).attr('data-tipid');
	            fillobj.deleteitemBox(id);
	            that.$bb_aj_modalContainer.show();
	            return false;
	        });
	       
	        this.$body.on('change', '.bb_aj_valtboktips', function (e) {
	            let id = $(this).attr('data-tipid');
	            let val = 0;
	            
	            if (this.checked) {
	               val = 1;               
	            }
	            if (servicecall.approvetip(id, val)) {
	                console.log("approved json");
	            };

	            $(this).val(this.checked); 
	            return false;
	        });

	        this.$body.on('click', '#bb_aj_SaveEditToServer', function (e) {
	            
	            let bb_aj_boktipformsavedata = $('#bb_aj_boktipformsavedata');
	            let bb_aj_cur_title = $("#bb_aj_cur_title");

	            let savedata = {
	                TipID: $(this).attr('data-tipid'),
	                Title: bb_aj_cur_title.val(),
	                LowAge: bb_aj_boktipformsavedata.attr("data-low"),
	                HighAge: bb_aj_boktipformsavedata.attr("data-high"),
	                Category: bb_aj_boktipformsavedata.attr("data-cat"),
	                Userid: bb_aj_boktipformsavedata.attr("data-userid"),
	                Bookid: bb_aj_boktipformsavedata.attr("data-bookid"),
	                Review: tinyMCE.activeEditor.getContent()
	            }

	            if (savedata.Title && savedata.TipID > 0) {
	                fillobj.saveitemBox(savedata);
	                that.$bb_aj_modalContainer.show();

	            } else {
	                alert("Ange titel!");
	                bb_aj_cur_title.focus();
	            };           
	            
	            return false;
	        });
	               
	        this.$body.on('click', '.bb_aj_closeModal', function (e) {
	            that.$bb_aj_modalContainer.hide();
	            return false;
	        });

	        this.$body.on('change', '#drpBoktipSuitableAgeMin', function (e) {
	            let minage = $(this).val();
	            let bb_aj_boktipformsavedata = $('#bb_aj_boktipformsavedata');
	            bb_aj_boktipformsavedata.attr("data-low", minage);
	            console.log(minage);
	        });

	        this.$body.on('change', '#drpBoktipSuitableAgeMax', function (e) {
	            let maxage = $(this).val();
	            let bb_aj_boktipformsavedata = $('#bb_aj_boktipformsavedata');
	            bb_aj_boktipformsavedata.attr("data-high", maxage);
	            console.log(maxage);
	        });

	        this.$body.on('change', '#drpBoktipAmnen', function (e) {
	            let cat = $(this).val();
	            let bb_aj_boktipformsavedata = $('#bb_aj_boktipformsavedata');
	            bb_aj_boktipformsavedata.attr("data-cat", cat);
	            console.log(cat);
	        });
	       
	    },
	    render: function () {

	    }
	}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	let _hh = __webpack_require__(6)
	let edt = __webpack_require__(7);
	let appsettingsobject = __webpack_require__(8);
	let appsettings = appsettingsobject.config;

	module.exports = {
	    
	    getCurrentItem: function (id,callback) {
	        let _currentobj = appsettings.dataset.currentdatalist;

	        let currobj = _currentobj.Boktips.filter(item => item.TipID == id);
	                
	        _hh.injecthtmltemplate("#bb_aj_modalContainer", appsettings.handlebartemplate.hb_editor_tmp, currobj, function () {
	            edt.remove();
	            edt.init("#bb_aj_modalbody");
	                       
	            callback();
	        });             
	    },
	    saveitemBox: function (saveObj) {        
	        appsettings.dataset.saveboktipObj = saveObj;

	        _hh.injecthtmltemplate("#bb_aj_modalContainer", appsettings.handlebartemplate.hb_savebox_tmp, saveObj, function () {
	            return true;
	        });
	    },
	    deleteitemBox: function (tipid) {
	        let obj = { "TipID": tipid };

	        _hh.injecthtmltemplate("#bb_aj_modalContainer", appsettings.handlebartemplate.hb_delbox_tmp, obj, function () {            
	            return true;
	        });    
	    },
	    editcontent: function () {
	        //edt.activeEditor.getContent('');
	    },

	} //end moduleexport


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(2);

	module.exports = {
	    injecthtmltemplate: function (targetClass, usetemplateName, currentdata, callback) {
	        
	        $.get(usetemplateName, function (data) {
	            var temptpl = Handlebars.compile(data);
	            $(targetClass).html(temptpl(currentdata));
	            callback();
	        }, 'html');
	    }
	}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	
	module.exports = {
	    _editorn: tinyMCE,
	    init: function (CSSidselector) {
	                   
	        this._editorn.init({
	            selector: CSSidselector,
	            menubar: false,
	            toolbar: 'undo redo | styleselect | bold italic | link image'
	        });

	    },//end init
	    remove: function () {
	        this._editorn.remove();
	    },
	    clear: function () {
	        this._editorn.activeEditor.setContent('');
	    },
	    setcontent: function (content) {
	        this._editorn.activeEditor.setContent(content);
	    }
	} //end moduleexport

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	
	module.exports = {
	    config: (function () {
	        let _apiserver = "http://localhost:59015";
	        let _dnnURL = "http://localdev.kivdev.se";
	        //let _apiserver = "http://dev1.barnensbibliotek.se:8080";
	        //let _dnnURL = "http://dev1.barnensbibliotek.se";
	        //let _apiserver = "http://dev1.barnensbibliotek.se:8080";
	        //let _dnnURL = "http://nytt.barnensbibliotek.se";
	        //let _apiserver = "https://www2.barnensbibliotek.se";
	        //let _dnnURL = "https://www.barnensbibliotek.se";
	        let _devkey = "alf";
	        let _apidevkeyend = "/devkey/" + _devkey + "/?type=jsonp&callback=?";
	        let _htmltemplateURL = "/DesktopModules/bb_aj_Boktips_Admin/template/";        
	        let _currentdatalist;
	        //// template
	        
	        let _hb_booktipList_template = _htmltemplateURL + "template_datatableRow.txt";   
	        let _hb_editor_template = _htmltemplateURL + "template_editor.txt"; 
	        let _hb_savebox_template = _htmltemplateURL + "template_save.txt";
	        let _hb_deletebox_template = _htmltemplateURL + "template_tabort.txt";
	        
	        // användarens senaste boktips
	        let _fn_booktipList = function (userid) {
	            return _apiserver + "/Api_v1/boktips/bylatest/1/devkey/" + _devkey + "/?type=json";
	        }
	        let _fn_booktipSave = function () {
	            return _apiserver + "/Api_v3.1/boktips/typ/editboktips/devkey/" + _devkey + "/?type=jsonp";
	        }
	        let _fn_booktipDelete = function () {            
	            return _apiserver + "/Api_v3.1/boktips/typ/deleteboktips/devkey/" + _devkey + "/?type=json";
	        }
	        let _fn_booktipApprove = function (tipid, val) {
	            return _apiserver + "/Api_v3.1/boktips/typ/approve/val/" + tipid + "/txtval/" + val + "/devkey/" + _devkey + "/?type=json";
	        }
	        let _fn_booktipListToAprove = function () {
	            return _apiserver + "/Api_v3.1/boktips/typ/toapprove/val/0/txtval/0/devkey/" + _devkey + "/?type=json";
	        }
	        let _fn_booktipListAll = function () {
	            return _apiserver + "/Api_v3.1/boktips/typ/getall/val/0/txtval/0/devkey/" + _devkey + "/?type=json";
	        }
	        // autocompleteURL
	        let _fn_autocompleteURL = function (antal) {
	            return _apiserver + "/Api_v3.1/katalogen/cmdtyp/autocomplete/antal/" + antal + "/devkey/" + _devkey + "/?type=json";
	        };
	           
	        return {
	            apiserver: _apiserver,
	            dnnURL: _dnnURL,
	            htmltemplateurl: _dnnURL + _htmltemplateURL,
	            devkey: _devkey,
	            handlebartemplate: {
	                hb_booktipList_tmp: _hb_booktipList_template,
	                hb_editor_tmp: _hb_editor_template,
	                hb_savebox_tmp: _hb_savebox_template,
	                hb_delbox_tmp: _hb_deletebox_template
	            },
	            api: {                
	                boktipslistor: {
	                    getboktipslistToApprove: _fn_booktipListToAprove,
	                    getboktipslistAll: _fn_booktipListAll
	                },
	                approve: _fn_booktipApprove,
	                save: _fn_booktipSave,
	                delete: _fn_booktipDelete,
	                autocomplete: {
	                    geturl: _fn_autocompleteURL
	                },                
	                devkeyend: _apidevkeyend
	            },
	            dataset: {
	                currentdatalist: _currentdatalist,
	                saveboktipObj: {}
	            },

	            debug: "false"
	        }
	    })(),
	    
	}



/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(2);
	var appsettingsobject = __webpack_require__(8);
	var appsettings = appsettingsobject.config;

	module.exports = {
	    init: function (ControlID) {
	        let autocomp = new autoComplete({
	            selector: ControlID,
	            minChars: 2,
	            source: function (term, response) {
	                let url = appsettings.api.autocomplete.geturl;
	                let test = url(10);
	                let searchdata = { "Searchstr": term };
	                $.ajax({
	                    async: true,
	                    type: "post",
	                    dataType: 'json',
	                    data:searchdata,
	                    url: url(10),
	                    success: function (data) {
	                        let suggestions = [];

	                        $.each(data.BookList, function (item, val) {
	                            
	                            suggestions.push([val.Title,val.Bookid]);
	                            
	                        });
	                        
	                        response(suggestions);
	                    },
	                    error: function (xhr, ajaxOptions, thrownError) {
	                        alert("Nått blev fel vid hämtning av arrangemang!");
	                    }
	                })

	            },
	            renderItem: function (item, search){
	                //search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	                //var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
	                // return '<div class="autocomplete-suggestion" data-bookid="' + item[1] + '">' + item[0].replace(re, "<b>$1</b>") + '</div>';
	                return '<div class="autocomplete-suggestion" data-bookid="' + item[1] + '">' + item[0] + '</div>';

	            },
	            onSelect: function (e, term, item) {
	                                
	                $('#bb_aj_cur_title').val(item.innerHTML);
	                $('.bb_aj_bookid').html(item.dataset.bookid);
	                $('#bb_aj_boktipformsavedata').attr("data-bookid", item.dataset.bookid);
	                                
	                return false;
	            }
	        });
	    }
	};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	let _service_old = __webpack_require__(11);
	let _service = __webpack_require__(12);
	let appsettingsobject = __webpack_require__(8);
	let appsettings = appsettingsobject.config;

	module.exports = {
	    approvetip: function (tipid, val) {
	        let jsondatapromise = _service.getjsondata(appsettings.api.approve(tipid, val));

	        jsondatapromise
	            .then(jsondata => { return true; })
	            .catch(err => false);
	    },
	    deletetip: function (tipid, callback) {
	        let dataopt = {           
	            "TipID": tipid
	        }

	        _service_old.postjsondata(appsettings.api.delete(), dataopt, function (data) {
	            callback(data);
	        });      

	    },
	    savetip: function (tipid, rubrik, content, callback) {
	        let dataopt = appsettings.dataset.saveboktipObj;

	        if (tipid === dataopt.TipID) {
	            _service_old.postjsondata(appsettings.api.save(), dataopt, function (data) {
	                    callback(data);
	            });
	        };
	    }
	}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(2);

	module.exports = {
	    getjsondata: function (url, callback) {
	        if (!url) {
	            return false;
	        } else {
	            //console.log("Searchservicen hämtar Arrangemangdata");
	            $.ajax({
	                async: true,
	                type: "get",
	                dataType: 'jsonp',
	                url: url,
	                success: function (data) {
	                    console.log("Search Detalj arrangemang hämtat: ");
	                    callback(data);
	                },
	                error: function (xhr, ajaxOptions, thrownError) {
	                    alert("Nått blev fel vid hämtning av arrangemang!");
	                }
	            })
	        };
	    },
	    postjsondata: function (url, postdata, callback) {
	        if (!url) {
	            return false;
	        } else {
	            //console.log("Searchservicen hämtar Arrangemangdata");
	            $.ajax({
	                async: true,

	                type: "post",
	                url: url,
	                data: postdata,
	                success: function (data) {
	                    console.log("Hämtar Data: ");
	                    callback(data);
	                },
	                error: function (xhr, ajaxOptions, thrownError) {
	                    alert("Nått blev fel vid hämtning av POST json!");
	                }
	            })
	        };
	    }
	}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	
	module.exports = {
	    getjsondata: function (url) {
	        return fetch(url)
	            .then(res => res.json())
	            .then(jsondata => jsondata)
	            
	    },
	    postjsondata: function (url, postdata) {

	        const option = {
	            method: 'POST', 
	            mode:"no-cors",
	            body: JSON.stringify(postdata),
	            headers: {
	                "Content-Type": "application/json"
	            }

	        }
	        return fetch(url, option)
	            .then(res => res.json())
	            .then(jsondata => jsondata)

	    },
	    fetchjsonpdata: function (url, postdata) {
	        //postdata= { data: medskick, merdata: mera }
	        const option = {
	            method: 'POST',
	            header: 'application/json',
	            body: JSON.stringify(postdata)

	        }
	        return fetch(url, option)
	            .then(res => res.responseText())
	            .then(jsonText => JSON.parse(jsonText))

	    }
	}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	
	let appsettingsobject = __webpack_require__(8);
	let appsettings = appsettingsobject.config;

	module.exports = {
	    init: function () {

	        Handlebars.registerHelper('checkapproved', function (Approve) {                        
	            if (Approve==1) {
	               return  "checked";
	            };            
	        });
	        Handlebars.registerHelper('filloptions', function (sel) {
	            let retopt,i;

	            for (i = 1; i < 20; i++) {
	                if (i == sel) {
	                    retopt += '<option value="' + i + '" selected >' + i + '</option>';
	                } else {
	                    retopt += '<option value="' + i + '">' + i + '</option>';
	                };
	            }
	            return retopt;
	        });
	        Handlebars.registerHelper('fillcat', function (sel) {
	            let retopt, i;

	            for (i = 0; i < 23; i++) {
	                if (i == sel) {
	                    retopt += '<option value="' + i + '" selected >' + i + '</option>';
	                } else {
	                    retopt += '<option value="' + i + '">' + i + '</option>';
	                };
	            }
	            return retopt;
	        });
	       
	    }
	}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
